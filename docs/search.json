[{"path":"https://jinghuazhao.github.io/pQTLtools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020-2022 Jing Hua Zhao Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-INF.html","id":"colocalization","dir":"Articles","previous_headings":"","what":"Colocalization","title":"SCALLOP-INF scripts","text":"actual script cis-pQTL colocalization analysis GTEx v8, reported Kerimov et al. (2021), SCALLOP-INF.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-INF.html","id":"data","dir":"Articles","previous_headings":"Colocalization","what":"Data","title":"SCALLOP-INF scripts","text":"data GWAS summary statistics GRCh37 VCF format, converted gwasvcf. GTEx association statistics GRCh38 downloaded eQTL Catalogue stored locally. Data microarray RNA-Seq remain eQTL Catalogue website.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-INF.html","id":"the-driver-program","dir":"Articles","previous_headings":"Colocalization","what":"The driver program","title":"SCALLOP-INF scripts","text":"Bash.","code":"#!/usr/bin/bash  for r in {1..59} do    export r=${r}    export cvt=${INF}/work/INF1.merge.cis.vs.trans    read prot MarkerName < \\                         <(awk -vFS=\",\" '$14==\"cis\"' ${cvt} | \\                           awk -vFS=\",\" -vr=${r} 'NR==r{print $2,$5}')    echo ${r} - ${prot} - ${MarkerName}    export prot=${prot}    export MarkerName=${MarkerName}    if [ ! -f ${INF}/coloc/${prot}-${MarkerName}.pdf ] || \\       [ ! -f ${INF}/coloc/${prot}-${MarkerName}.RDS ]; then      cd ${INF}/coloc      R --no-save < ${INF}/rsid/coloc.R 2>&1 | \\      tee ${prot}-${MarkerName}.log #    ls *tbi | xargs -I {} bash -c \"rm {}\"      cd -    fi done"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-INF.html","id":"coloc-r","dir":"Articles","previous_headings":"Colocalization","what":"coloc.R","title":"SCALLOP-INF scripts","text":"contains minor modification documentation example, options protein GWAS, microarray, RNA-Seq available respect variant-flanking gene regions. results generated, problem dplyr::arrange(df_gtex, -PP.H4.abf);p <- ggplot(df_gtex, aes(x = PP.H4.abf)) + geom_histogram().","code":"liftRegion <- function(x,chain,flanking=1e6) {   require(GenomicRanges)   gr <- with(x,GenomicRanges::GRanges(seqnames=chr,IRanges::IRanges(start,end))+flanking)   seqlevelsStyle(gr) <- \"UCSC\"   gr38 <- rtracklayer::liftOver(gr, chain)   chr <- gsub(\"chr\",\"\",colnames(table(seqnames(gr38))))   start <- min(unlist(start(gr38)))   end <- max(unlist(end(gr38)))   invisible(list(chr=chr,start=start,end=end,region=paste0(chr,\":\",start,\"-\",end))) }  sumstats <- function(prot,chr,region37) {   cat(\"GWAS sumstats\\n\")   vcf <- file.path(INF,\"METAL/gwas2vcf\",paste0(prot,\".vcf.gz\"))   gwas_stats <- gwasvcf::query_gwas(vcf, chrompos = region37)   gwas_stats <- gwasvcf::vcf_to_granges(gwas_stats) %>%                 keepSeqlevels(chr) %>%                 renameSeqlevels(paste0(\"chr\",chr))   gwas_stats_hg38 <- rtracklayer::liftOver(gwas_stats, chain) %>%     unlist() %>%     renameSeqlevels(chr) %>%     dplyr::as_tibble() %>%     dplyr::transmute(chromosome = seqnames,                      position = start, REF, ALT, AF, ES, SE, LP, SS) %>%     dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%     dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%     dplyr::group_by(id) %>%     dplyr::mutate(row_count = n()) %>%     dplyr::ungroup() %>%     dplyr::filter(row_count == 1) }  microarray <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"a. eQTL datasets\\n\")   microarray_df <- dplyr::filter(tabix_paths, quant_method == \"microarray\") %>%                    dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(microarray_df$ftp_path), microarray_df$qtl_id[1])   hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\")   column_names <- names(read.delim(hdr))   summary_list <- purrr::map(ftp_path_list, ~import_eQTLCatalogue(., region38,                              selected_gene_id = ensGene, column_names))   purrr::map_df(summary_list[lapply(summary_list,nrow)!=0],                 ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  rnaseq <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"b. Uniformly processed RNA-seq datasets\\n\")   rnaseq_df <- dplyr::filter(tabix_paths, quant_method == \"ge\") %>%                dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id)   hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list, ~safe_import(., region38,                              selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list[lapply(result_list,nrow)!=0], ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   purrr::map_df(result_list, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  gtex <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"c. GTEx_v8 imported eQTL datasets\\n\")   rnaseq_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%                dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id)   hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list,                              ~safe_import(., region38, selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  coloc <- function(prot,chr,ensGene,chain,region37,region38,out,run_all=FALSE) {   gwas_stats_hg38 <- sumstats(prot,chr,region37)   if (run_all)   {     df_microarray <- microarray(gwas_stats_hg38,ensGene,region38)     df_rnaseq <- rnaseq(gwas_stats_hg38,ensGene,region38)     df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)     if (exists(\"df_microarray\") & exits(\"df_rnaseq\") & exists(\"df_gtex\"))     {       coloc_df = dplyr::bind_rows(df_microarray, df_rnaseq, df_gtex)       saveRDS(coloc_df, file=paste0(out,\".RDS\"))       dplyr::arrange(coloc_df, -PP.H4.abf)       p <- ggplot(coloc_df, aes(x = PP.H4.abf)) + geom_histogram()     }   } else {     df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)     if (exists(\"df_gtex\"))     {       saveRDS(df_gtex,file=paste0(out,\".RDS\"))       dplyr::arrange(df_gtex, -PP.H4.abf)       p <- ggplot(df_gtex, aes(x = PP.H4.abf)) + geom_histogram()     }   }   s <- ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point()   ggsave(plot = s, filename = paste0(out, \"-assoc.pdf\"), path = \"\", device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300)   ggsave(plot = p, filename = paste0(out, \"-hist.pdf\"), path = \"\", device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300) }  single_run <- function(r) {   sentinel <- sentinels[r,]   isnpid <- within(gap::inv_chr_pos_a1_a2(sentinel[[\"SNP\"]]),   {     chr <- gsub(\"chr\",\"\",chr)     pos <- as.integer(pos)     start <- pos-M     if (start<0) start <- 0     end <- pos+M   })   chr <- with(isnpid,chr)   region37 <- with(isnpid, paste0(chr,\":\",start,\"-\",end))   ensRegion37 <- with(subset(inf1,prot==sentinel[[\"prot\"]]),                       {                         start <- start-M                         if (start<0) start <- 0                         end <- end+M                         paste0(chr,\":\",start,\"-\",end)                       })   region38 <- with(liftRegion(isnpid,chain),region)   ensGene <- subset(inf1,prot==sentinel[[\"prot\"]])[[\"ensembl_gene_id\"]]   ensRegion38 <- with(liftRegion(subset(inf1,prot==sentinel[[\"prot\"]]),chain),region)   f <- file.path(INF,\"coloc\",with(sentinel,paste0(prot,\"-\",SNP)))   cat(chr,region37,region38,ensGene,ensRegion37,ensRegion38,\"\\n\") # coloc(sentinel[[\"prot\"]],chr,ensGene,chain,region37,region38,f)   coloc(sentinel[[\"prot\"]],chr,ensGene,chain,ensRegion37,ensRegion38,f) }  # slow with the following loop: loop <- function() for (r in 1:nrow(sentinels)) single_run(r)  library(pQTLtools) f <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\") chain <- rtracklayer::import.chain(f) pkgs <- c(\"dplyr\", \"ggplot2\", \"readr\", \"coloc\", \"GenomicRanges\",\"seqminer\") invisible(lapply(pkgs, require, character.only = TRUE)) HPC_WORK <- Sys.getenv(\"HPC_WORK\") gwasvcf::set_bcftools(file.path(HPC_WORK,\"bin\",\"bcftools\")) f <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths.tsv\") tabix_paths <- read.delim(f, stringsAsFactors = FALSE) %>% dplyr::as_tibble() HOME <- Sys.getenv(\"HOME\") f <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_gtex.tsv\") imported_tabix_paths <- within(read.delim(f, stringsAsFactors = FALSE) %>% dplyr::as_tibble(),       {ftp_path <- gsub(\"ftp://ftp.ebi.ac.uk/pub/databases/spot/eQTL/csv/GTEx_V8/ge\",                         paste0(HOME,\"/rds/public_databases/GTEx/csv\"),ftp_path)}) options(width=200) library(dplyr) INF <- Sys.getenv(\"INF\") M <- 1e6 sentinels <- subset(read.csv(file.path(INF,\"work\",\"INF1.merge.cis.vs.trans\")),cis) cvt_rsid <- file.path(INF,\"work\",\"INF1.merge.cis.vs.trans-rsid\") prot_rsid <- subset(read.delim(cvt_rsid,sep=\" \"),cis,select=c(prot,SNP)) # Faster with parallel Bash runs. r <- as.integer(Sys.getenv(\"r\")) single_run(r)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-INF.html","id":"collection-of-results","dir":"Articles","previous_headings":"Colocalization","what":"Collection of results","title":"SCALLOP-INF scripts","text":"furnished keep results follows, .e., PP3+PP4>=0.9 PP4/PP3>=3.","code":"collect <- function() {   df_coloc <- data.frame()   for(r in 1:nrow(sentinels))   {     prot <- sentinels[[\"prot\"]][r]     snpid <- sentinels[[\"SNP\"]][r]     rsid <- prot_rsid[[\"SNP\"]][r]     f <- file.path(INF,\"coloc\",paste0(prot,\"-\",snpid,\".RDS\"))     if (!file.exists(f)) next     cat(prot,\"-\",rsid,\"\\n\")     rds <- readRDS(f)     if (nrow(rds)==0) next     df_coloc <- rbind(df_coloc,data.frame(prot=prot,rsid=rsid,snpid=snpid,rds))   }   df_coloc <- within(df_coloc,{qtl_id <- gsub(\"GTEx_V8_\",\"\",qtl_id)}) %>%               rename(H0=PP.H0.abf,H1=PP.H1.abf,H2=PP.H2.abf,H3=PP.H3.abf,H4=PP.H4.abf)   write.table(subset(df_coloc,H3+H4>=0.9 & H4/H3>=3),               file=file.path(INF,\"coloc\",\"GTEx.tsv\"),               quote=FALSE,row.names=FALSE,sep=\"\\t\") } collect()"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-INF.html","id":"parallel-computing","dir":"Articles","previous_headings":"Colocalization","what":"Parallel computing","title":"SCALLOP-INF scripts","text":"speed analysis, resort SLURM,","code":"#!/usr/bin/bash  #SBATCH --job-name=_coloc #SBATCH --account CARDIO-SL0-CPU #SBATCH --partition cardio #SBATCH --qos=cardio #SBATCH --array=1-59 #SBATCH --mem=28800 #SBATCH --time=5-00:00:00 #SBATCH --error=/rds/user/jhz22/hpc-work/work/_coloc_%A_%a.err #SBATCH --output=/rds/user/jhz22/hpc-work/work/_coloc_%A_%a.out #SBATCH --export ALL  export job=${SLURM_ARRAY_TASK_ID} export trait=$(awk -v job=${job} 'NR==job {print $1}' ${INF}/work/inf1.tmp)  function gtex() {   export r=${SLURM_ARRAY_TASK_ID}   export cvt=${INF}/work/INF1.merge.cis.vs.trans   read prot MarkerName < \\                        <(awk -vFS=\",\" '$14==\"cis\"' ${cvt} | \\                          awk -vFS=\",\" -vr=${r} 'NR==r{print $2,$5}')   echo ${r} - ${prot} - ${MarkerName}   export prot=${prot}   export MarkerName=${MarkerName}   if [ ! -f ${INF}/coloc/${prot}-${MarkerName}.pdf ] || \\      [ ! -f ${INF}/coloc/${prot}-${MarkerName}.RDS ]; then     cd ${INF}/coloc     R --no-save < ${INF}/rsid/coloc.R 2>&1 | \\     tee ${prot}-${MarkerName}.log     cd -   fi }  gtex"},{"path":[]},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"combat","dir":"Articles","previous_headings":"Normalisation","what":"ComBat","title":"Bioconductor Notes","text":"documentation example, based Bioconductor 3.14.","code":"data(bladderdata) dat <- bladderEset[1:50,]  pheno = pData(dat) edata = exprs(dat) batch = pheno$batch mod = model.matrix(~as.factor(cancer), data=pheno)  # 1. parametric adjustment combat_edata1 = ComBat(dat=edata, batch=batch, mod=NULL, par.prior=TRUE, prior.plots=TRUE) #> Found5batches #> Adjusting for0covariate(s) or covariate level(s) #> Standardizing Data across genes #> Fitting L/S model and finding priors #> Finding parametric adjustments #> Adjusting the Data # 2. non-parametric adjustment, mean-only version combat_edata2 = ComBat(dat=edata, batch=batch, mod=NULL, par.prior=FALSE, mean.only=TRUE) #> Using the 'mean only' version of ComBat #> Found5batches #> Adjusting for0covariate(s) or covariate level(s) #> Standardizing Data across genes #> Fitting L/S model and finding priors #> Finding nonparametric adjustments #> Adjusting the Data  # 3. reference-batch version, with covariates combat_edata3 = ComBat(dat=edata, batch=batch, mod=mod, par.prior=TRUE, ref.batch=3, prior.plots=TRUE) #> Using batch =3as a reference batch (this batch won't change) #> Found5batches #> Adjusting for2covariate(s) or covariate level(s) #> Standardizing Data across genes #> Fitting L/S model and finding priors #> Finding parametric adjustments #> Adjusting the Data"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"quantro","dir":"Articles","previous_headings":"Normalisation","what":"quantro","title":"Bioconductor Notes","text":", adapted package vignette. noting FlowSorted.DLPFC.450k instead FlowSorted used.","code":"p <- getBeta(FlowSorted.DLPFC.450k,offset=100) #> Loading required package: IlluminaHumanMethylation450kmanifest pd <- pData(FlowSorted.DLPFC.450k) matdensity(p, groupFactor = pd$CellType, xlab = \" \", ylab = \"density\",            main = \"Beta Values\", brewer.n = 8, brewer.name = \"Dark2\") legend('top', c(\"NeuN_neg\", \"NeuN_pos\"), col = c(1, 2), lty = 1, lwd = 3) matboxplot(p, groupFactor = pd$CellType, xaxt = \"n\", main = \"Beta Values\") qtest <- quantro(object = p, groupFactor = pd$CellType) #> [quantro] Average medians of the distributions are  #>                         not equal across groups. #> [quantro] Calculating the quantro test statistic. #> [quantro] No permutation testing performed.  #>                          Use B > 0 for permutation testing. # commented since `R CMD check` returns error with multithreads # registerDoParallel(cores=10) # qtestPerm <- quantro(p, groupFactor = pd$CellType, B = 1000) # qtestPerm # quantroPlot(qtestPerm)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"differential-expression","dir":"Articles","previous_headings":"","what":"Differential expression","title":"Bioconductor Notes","text":"See package action snakemake workflow Köster et al. (2021).","code":"ex <- makeExampleDESeqDataSet(m=4) dds <- DESeq(ex) #> estimating size factors #> estimating dispersions #> gene-wise dispersion estimates #> mean-dispersion relationship #> final dispersion estimates #> fitting model and testing res <- results(dds, contrast=c(\"condition\",\"B\",\"A\")) rld <- rlogTransformation(ex, blind=TRUE) dat <- plotPCA(rld, intgroup=c(\"condition\"),returnData=TRUE) percentVar <- round(100 * attr(dat,\"percentVar\")) ggplot(dat, aes(PC1, PC2, color=condition, shape=condition)) + geom_point(size=3) + xlab(paste0(\"PC1:\",percentVar[1],\"% variance\")) + ylab(paste0(\"PC2:\",percentVar[2],\"% variance\")) ex$condition <- relevel(ex$condition, ref=\"B\") dds2 <- DESeq(dds) #> using pre-existing size factors #> estimating dispersions #> found already estimated dispersions, replacing these #> gene-wise dispersion estimates #> mean-dispersion relationship #> final dispersion estimates #> fitting model and testing res <- results(dds2) knitr::kable(head(as.data.frame(res)))"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"gene-co-expression-and-network-analysis","dir":"Articles","previous_headings":"","what":"Gene co-expression and network analysis","title":"Bioconductor Notes","text":"simple network furnished GeneNet documentation example,    side--side heatmaps  module analysis WGCNA,","code":"## A random network with 40 nodes  # it contains 780=40*39/2 edges of which 5 percent (=39) are non-zero true.pcor <- ggm.simulate.pcor(40)    # A data set with 40 observations m.sim <- ggm.simulate.data(40, true.pcor)  # A simple estimate of partial correlations estimated.pcor <- cor2pcor( cor(m.sim) )  # A comparison of estimated and true values sum((true.pcor-estimated.pcor)^2) #> [1] 284.6764  # A slightly better estimate ... estimated.pcor.2 <- ggm.estimate.pcor(m.sim) #> Estimating optimal shrinkage intensity lambda (correlation matrix): 0.0555 sum((true.pcor-estimated.pcor.2)^2) #> [1] 11.24353  ## ecoli data  data(ecoli)  # partial correlation matrix  inferred.pcor <- ggm.estimate.pcor(ecoli) #> Estimating optimal shrinkage intensity lambda (correlation matrix): 0.1804  # p-values, q-values and posterior probabilities for each potential edge  test.results <- network.test.edges(inferred.pcor) #> Estimate (local) false discovery rates (partial correlations): #> Step 1... determine cutoff point #> Step 2... estimate parameters of null distribution and eta0 #> Step 3... compute p-values and estimate empirical PDF/CDF #> Step 4... compute q-values and local fdr #> Step 5... prepare for plotting  # best 20 edges (strongest correlation) test.results[1:20,] #>           pcor node1 node2         pval         qval      prob #> 1   0.23185664    51    53 2.220446e-16 3.612205e-13 1.0000000 #> 2   0.22405545    52    53 2.220446e-16 3.612205e-13 1.0000000 #> 3   0.21507824    51    52 2.220446e-16 3.612205e-13 1.0000000 #> 4   0.17328863     7    93 3.108624e-15 3.792816e-12 0.9999945 #> 5  -0.13418892    29    86 1.120813e-09 1.093998e-06 0.9999516 #> 6   0.12594697    21    72 1.103837e-08 8.978569e-06 0.9998400 #> 7   0.11956105    28    86 5.890927e-08 3.853592e-05 0.9998400 #> 8  -0.11723897    26    80 1.060526e-07 5.816175e-05 0.9998400 #> 9  -0.11711625    72    89 1.093655e-07 5.930502e-05 0.9972804 #> 10  0.10658013    20    21 1.366611e-06 5.925278e-04 0.9972804 #> 11  0.10589778    21    73 1.596860e-06 6.678431e-04 0.9972804 #> 12  0.10478689    20    91 2.053404e-06 8.024428e-04 0.9972804 #> 13  0.10420836     7    52 2.338383e-06 8.778608e-04 0.9944557 #> 14  0.10236077    87    95 3.525188e-06 1.224964e-03 0.9944557 #> 15  0.10113550    27    95 4.610445e-06 1.500048e-03 0.9920084 #> 16  0.09928954    21    51 6.868360e-06 2.046550e-03 0.9920084 #> 17  0.09791914    21    88 9.192376e-06 2.520617e-03 0.9920084 #> 18  0.09719685    18    95 1.070233e-05 2.790103e-03 0.9920084 #> 19  0.09621791    28    90 1.313008e-05 3.171818e-03 0.9920084 #> 20  0.09619099    12    80 1.320374e-05 3.182527e-03 0.9920084  # network containing edges with prob > 0.9 (i.e. local fdr < 0.1) net <- extract.network(test.results, cutoff.ggm=0.9) #>  #> Significant edges:  65  #>     Corresponding to  1.26 %  of possible edges net #>           pcor node1 node2         pval         qval      prob #> 1   0.23185664    51    53 2.220446e-16 3.612205e-13 1.0000000 #> 2   0.22405545    52    53 2.220446e-16 3.612205e-13 1.0000000 #> 3   0.21507824    51    52 2.220446e-16 3.612205e-13 1.0000000 #> 4   0.17328863     7    93 3.108624e-15 3.792816e-12 0.9999945 #> 5  -0.13418892    29    86 1.120813e-09 1.093998e-06 0.9999516 #> 6   0.12594697    21    72 1.103837e-08 8.978569e-06 0.9998400 #> 7   0.11956105    28    86 5.890927e-08 3.853592e-05 0.9998400 #> 8  -0.11723897    26    80 1.060526e-07 5.816175e-05 0.9998400 #> 9  -0.11711625    72    89 1.093655e-07 5.930502e-05 0.9972804 #> 10  0.10658013    20    21 1.366611e-06 5.925278e-04 0.9972804 #> 11  0.10589778    21    73 1.596860e-06 6.678431e-04 0.9972804 #> 12  0.10478689    20    91 2.053404e-06 8.024428e-04 0.9972804 #> 13  0.10420836     7    52 2.338383e-06 8.778608e-04 0.9944557 #> 14  0.10236077    87    95 3.525188e-06 1.224964e-03 0.9944557 #> 15  0.10113550    27    95 4.610445e-06 1.500048e-03 0.9920084 #> 16  0.09928954    21    51 6.868360e-06 2.046550e-03 0.9920084 #> 17  0.09791914    21    88 9.192376e-06 2.520617e-03 0.9920084 #> 18  0.09719685    18    95 1.070233e-05 2.790103e-03 0.9920084 #> 19  0.09621791    28    90 1.313008e-05 3.171818e-03 0.9920084 #> 20  0.09619099    12    80 1.320374e-05 3.182527e-03 0.9920084 #> 21  0.09576091    89    95 1.443542e-05 3.354778e-03 0.9891317 #> 22  0.09473210     7    51 1.784127e-05 3.864827e-03 0.9891317 #> 23 -0.09386896    53    58 2.127623e-05 4.313591e-03 0.9891317 #> 24 -0.09366615    29    83 2.217013e-05 4.421101e-03 0.9891317 #> 25 -0.09341148    21    89 2.334321e-05 4.556948e-03 0.9810727 #> 26 -0.09156391    49    93 3.380044e-05 5.955974e-03 0.9810727 #> 27 -0.09150710    80    90 3.418364e-05 6.002084e-03 0.9810727 #> 28  0.09101505     7    53 3.767967e-05 6.408104e-03 0.9810727 #> 29  0.09050688    21    84 4.164472e-05 6.838785e-03 0.9810727 #> 30  0.08965490    72    73 4.919367e-05 7.581868e-03 0.9810727 #> 31 -0.08934025    29    99 5.229606e-05 7.861419e-03 0.9810727 #> 32 -0.08906819     9    95 5.512710e-05 8.104761e-03 0.9810727 #> 33  0.08888345     2    49 5.713146e-05 8.270675e-03 0.9810727 #> 34  0.08850681    86    90 6.143364e-05 8.610164e-03 0.9810727 #> 35  0.08805868    17    53 6.695172e-05 9.015178e-03 0.9810727 #> 36  0.08790809    28    48 6.890886e-05 9.151294e-03 0.9810727 #> 37  0.08783471    33    58 6.988213e-05 9.217600e-03 0.9682377 #> 38 -0.08705796     7    49 8.101246e-05 1.021362e-02 0.9682377 #> 39  0.08645033    20    46 9.086550e-05 1.102467e-02 0.9682377 #> 40  0.08609950    48    86 9.705865e-05 1.150393e-02 0.9682377 #> 41  0.08598769    21    52 9.911461e-05 1.165817e-02 0.9682377 #> 42  0.08555275    32    95 1.075099e-04 1.226435e-02 0.9682377 #> 43  0.08548231    17    51 1.089311e-04 1.236337e-02 0.9424721 #> 44  0.08470370    80    83 1.258659e-04 1.382357e-02 0.9424721 #> 45  0.08442510    80    82 1.325063e-04 1.437068e-02 0.9174572 #> 46  0.08271606    80    93 1.810275e-04 1.845632e-02 0.9174572 #> 47  0.08235175    46    91 1.933329e-04 1.941580e-02 0.9174572 #> 48  0.08217787    25    95 1.994789e-04 1.988433e-02 0.9174572 #> 49 -0.08170331    29    87 2.171999e-04 2.119715e-02 0.9174572 #> 50  0.08123632    19    29 2.360717e-04 2.253606e-02 0.9174572 #> 51  0.08101702    51    84 2.454547e-04 2.318025e-02 0.9174572 #> 52  0.08030748    16    93 2.782643e-04 2.532796e-02 0.9174572 #> 53  0.08006503    28    52 2.903870e-04 2.608272e-02 0.9174572 #> 54 -0.07941656    41    80 3.252834e-04 2.814825e-02 0.9174572 #> 55  0.07941410    54    89 3.254230e-04 2.815621e-02 0.9174572 #> 56 -0.07934653    28    80 3.292785e-04 2.837512e-02 0.9174572 #> 57  0.07916783    29    92 3.396803e-04 2.895702e-02 0.9174572 #> 58 -0.07866905    17    86 3.703636e-04 3.060294e-02 0.9174572 #> 59  0.07827749    16    29 3.962447e-04 3.191463e-02 0.9174572 #> 60 -0.07808262    73    89 4.097453e-04 3.257290e-02 0.9174572 #> 61  0.07766261    52    67 4.403166e-04 3.400207e-02 0.9174572 #> 62  0.07762917    25    87 4.428397e-04 3.411638e-02 0.9174572 #> 63 -0.07739378     9    93 4.609873e-04 3.492296e-02 0.9174572 #> 64  0.07738885    31    80 4.613748e-04 3.493988e-02 0.9174572 #> 65 -0.07718681    80    94 4.775137e-04 3.563445e-02 0.9174572  # significant based on FDR cutoff Q=0.05? num.significant.1 <- sum(test.results$qval <= 0.05) test.results[1:num.significant.1,] #>           pcor node1 node2         pval         qval      prob #> 1   0.23185664    51    53 2.220446e-16 3.612205e-13 1.0000000 #> 2   0.22405545    52    53 2.220446e-16 3.612205e-13 1.0000000 #> 3   0.21507824    51    52 2.220446e-16 3.612205e-13 1.0000000 #> 4   0.17328863     7    93 3.108624e-15 3.792816e-12 0.9999945 #> 5  -0.13418892    29    86 1.120813e-09 1.093998e-06 0.9999516 #> 6   0.12594697    21    72 1.103837e-08 8.978569e-06 0.9998400 #> 7   0.11956105    28    86 5.890927e-08 3.853592e-05 0.9998400 #> 8  -0.11723897    26    80 1.060526e-07 5.816175e-05 0.9998400 #> 9  -0.11711625    72    89 1.093655e-07 5.930502e-05 0.9972804 #> 10  0.10658013    20    21 1.366611e-06 5.925278e-04 0.9972804 #> 11  0.10589778    21    73 1.596860e-06 6.678431e-04 0.9972804 #> 12  0.10478689    20    91 2.053404e-06 8.024428e-04 0.9972804 #> 13  0.10420836     7    52 2.338383e-06 8.778608e-04 0.9944557 #> 14  0.10236077    87    95 3.525188e-06 1.224964e-03 0.9944557 #> 15  0.10113550    27    95 4.610445e-06 1.500048e-03 0.9920084 #> 16  0.09928954    21    51 6.868360e-06 2.046550e-03 0.9920084 #> 17  0.09791914    21    88 9.192376e-06 2.520617e-03 0.9920084 #> 18  0.09719685    18    95 1.070233e-05 2.790103e-03 0.9920084 #> 19  0.09621791    28    90 1.313008e-05 3.171818e-03 0.9920084 #> 20  0.09619099    12    80 1.320374e-05 3.182527e-03 0.9920084 #> 21  0.09576091    89    95 1.443542e-05 3.354778e-03 0.9891317 #> 22  0.09473210     7    51 1.784127e-05 3.864827e-03 0.9891317 #> 23 -0.09386896    53    58 2.127623e-05 4.313591e-03 0.9891317 #> 24 -0.09366615    29    83 2.217013e-05 4.421101e-03 0.9891317 #> 25 -0.09341148    21    89 2.334321e-05 4.556948e-03 0.9810727 #> 26 -0.09156391    49    93 3.380044e-05 5.955974e-03 0.9810727 #> 27 -0.09150710    80    90 3.418364e-05 6.002084e-03 0.9810727 #> 28  0.09101505     7    53 3.767967e-05 6.408104e-03 0.9810727 #> 29  0.09050688    21    84 4.164472e-05 6.838785e-03 0.9810727 #> 30  0.08965490    72    73 4.919367e-05 7.581868e-03 0.9810727 #> 31 -0.08934025    29    99 5.229606e-05 7.861419e-03 0.9810727 #> 32 -0.08906819     9    95 5.512710e-05 8.104761e-03 0.9810727 #> 33  0.08888345     2    49 5.713146e-05 8.270675e-03 0.9810727 #> 34  0.08850681    86    90 6.143364e-05 8.610164e-03 0.9810727 #> 35  0.08805868    17    53 6.695172e-05 9.015178e-03 0.9810727 #> 36  0.08790809    28    48 6.890886e-05 9.151294e-03 0.9810727 #> 37  0.08783471    33    58 6.988213e-05 9.217600e-03 0.9682377 #> 38 -0.08705796     7    49 8.101246e-05 1.021362e-02 0.9682377 #> 39  0.08645033    20    46 9.086550e-05 1.102467e-02 0.9682377 #> 40  0.08609950    48    86 9.705865e-05 1.150393e-02 0.9682377 #> 41  0.08598769    21    52 9.911461e-05 1.165817e-02 0.9682377 #> 42  0.08555275    32    95 1.075099e-04 1.226435e-02 0.9682377 #> 43  0.08548231    17    51 1.089311e-04 1.236337e-02 0.9424721 #> 44  0.08470370    80    83 1.258659e-04 1.382357e-02 0.9424721 #> 45  0.08442510    80    82 1.325063e-04 1.437068e-02 0.9174572 #> 46  0.08271606    80    93 1.810275e-04 1.845632e-02 0.9174572 #> 47  0.08235175    46    91 1.933329e-04 1.941580e-02 0.9174572 #> 48  0.08217787    25    95 1.994789e-04 1.988433e-02 0.9174572 #> 49 -0.08170331    29    87 2.171999e-04 2.119715e-02 0.9174572 #> 50  0.08123632    19    29 2.360717e-04 2.253606e-02 0.9174572 #> 51  0.08101702    51    84 2.454547e-04 2.318025e-02 0.9174572 #> 52  0.08030748    16    93 2.782643e-04 2.532796e-02 0.9174572 #> 53  0.08006503    28    52 2.903870e-04 2.608272e-02 0.9174572 #> 54 -0.07941656    41    80 3.252834e-04 2.814825e-02 0.9174572 #> 55  0.07941410    54    89 3.254230e-04 2.815621e-02 0.9174572 #> 56 -0.07934653    28    80 3.292785e-04 2.837512e-02 0.9174572 #> 57  0.07916783    29    92 3.396803e-04 2.895702e-02 0.9174572 #> 58 -0.07866905    17    86 3.703636e-04 3.060294e-02 0.9174572 #> 59  0.07827749    16    29 3.962447e-04 3.191463e-02 0.9174572 #> 60 -0.07808262    73    89 4.097453e-04 3.257290e-02 0.9174572 #> 61  0.07766261    52    67 4.403166e-04 3.400207e-02 0.9174572 #> 62  0.07762917    25    87 4.428397e-04 3.411638e-02 0.9174572 #> 63 -0.07739378     9    93 4.609873e-04 3.492296e-02 0.9174572 #> 64  0.07738885    31    80 4.613748e-04 3.493988e-02 0.9174572 #> 65 -0.07718681    80    94 4.775137e-04 3.563445e-02 0.9174572 #> 66  0.07706275    27    58 4.876832e-04 3.606179e-02 0.8297810 #> 67 -0.07610709    16    83 5.730534e-04 4.085920e-02 0.8297810 #> 68  0.07550557    53    84 6.337144e-04 4.406473e-02 0.8297810  # significant based on \"local fdr\" cutoff (prob > 0.9)? num.significant.2 <- sum(test.results$prob > 0.9) test.results[test.results$prob > 0.9,] #>           pcor node1 node2         pval         qval      prob #> 1   0.23185664    51    53 2.220446e-16 3.612205e-13 1.0000000 #> 2   0.22405545    52    53 2.220446e-16 3.612205e-13 1.0000000 #> 3   0.21507824    51    52 2.220446e-16 3.612205e-13 1.0000000 #> 4   0.17328863     7    93 3.108624e-15 3.792816e-12 0.9999945 #> 5  -0.13418892    29    86 1.120813e-09 1.093998e-06 0.9999516 #> 6   0.12594697    21    72 1.103837e-08 8.978569e-06 0.9998400 #> 7   0.11956105    28    86 5.890927e-08 3.853592e-05 0.9998400 #> 8  -0.11723897    26    80 1.060526e-07 5.816175e-05 0.9998400 #> 9  -0.11711625    72    89 1.093655e-07 5.930502e-05 0.9972804 #> 10  0.10658013    20    21 1.366611e-06 5.925278e-04 0.9972804 #> 11  0.10589778    21    73 1.596860e-06 6.678431e-04 0.9972804 #> 12  0.10478689    20    91 2.053404e-06 8.024428e-04 0.9972804 #> 13  0.10420836     7    52 2.338383e-06 8.778608e-04 0.9944557 #> 14  0.10236077    87    95 3.525188e-06 1.224964e-03 0.9944557 #> 15  0.10113550    27    95 4.610445e-06 1.500048e-03 0.9920084 #> 16  0.09928954    21    51 6.868360e-06 2.046550e-03 0.9920084 #> 17  0.09791914    21    88 9.192376e-06 2.520617e-03 0.9920084 #> 18  0.09719685    18    95 1.070233e-05 2.790103e-03 0.9920084 #> 19  0.09621791    28    90 1.313008e-05 3.171818e-03 0.9920084 #> 20  0.09619099    12    80 1.320374e-05 3.182527e-03 0.9920084 #> 21  0.09576091    89    95 1.443542e-05 3.354778e-03 0.9891317 #> 22  0.09473210     7    51 1.784127e-05 3.864827e-03 0.9891317 #> 23 -0.09386896    53    58 2.127623e-05 4.313591e-03 0.9891317 #> 24 -0.09366615    29    83 2.217013e-05 4.421101e-03 0.9891317 #> 25 -0.09341148    21    89 2.334321e-05 4.556948e-03 0.9810727 #> 26 -0.09156391    49    93 3.380044e-05 5.955974e-03 0.9810727 #> 27 -0.09150710    80    90 3.418364e-05 6.002084e-03 0.9810727 #> 28  0.09101505     7    53 3.767967e-05 6.408104e-03 0.9810727 #> 29  0.09050688    21    84 4.164472e-05 6.838785e-03 0.9810727 #> 30  0.08965490    72    73 4.919367e-05 7.581868e-03 0.9810727 #> 31 -0.08934025    29    99 5.229606e-05 7.861419e-03 0.9810727 #> 32 -0.08906819     9    95 5.512710e-05 8.104761e-03 0.9810727 #> 33  0.08888345     2    49 5.713146e-05 8.270675e-03 0.9810727 #> 34  0.08850681    86    90 6.143364e-05 8.610164e-03 0.9810727 #> 35  0.08805868    17    53 6.695172e-05 9.015178e-03 0.9810727 #> 36  0.08790809    28    48 6.890886e-05 9.151294e-03 0.9810727 #> 37  0.08783471    33    58 6.988213e-05 9.217600e-03 0.9682377 #> 38 -0.08705796     7    49 8.101246e-05 1.021362e-02 0.9682377 #> 39  0.08645033    20    46 9.086550e-05 1.102467e-02 0.9682377 #> 40  0.08609950    48    86 9.705865e-05 1.150393e-02 0.9682377 #> 41  0.08598769    21    52 9.911461e-05 1.165817e-02 0.9682377 #> 42  0.08555275    32    95 1.075099e-04 1.226435e-02 0.9682377 #> 43  0.08548231    17    51 1.089311e-04 1.236337e-02 0.9424721 #> 44  0.08470370    80    83 1.258659e-04 1.382357e-02 0.9424721 #> 45  0.08442510    80    82 1.325063e-04 1.437068e-02 0.9174572 #> 46  0.08271606    80    93 1.810275e-04 1.845632e-02 0.9174572 #> 47  0.08235175    46    91 1.933329e-04 1.941580e-02 0.9174572 #> 48  0.08217787    25    95 1.994789e-04 1.988433e-02 0.9174572 #> 49 -0.08170331    29    87 2.171999e-04 2.119715e-02 0.9174572 #> 50  0.08123632    19    29 2.360717e-04 2.253606e-02 0.9174572 #> 51  0.08101702    51    84 2.454547e-04 2.318025e-02 0.9174572 #> 52  0.08030748    16    93 2.782643e-04 2.532796e-02 0.9174572 #> 53  0.08006503    28    52 2.903870e-04 2.608272e-02 0.9174572 #> 54 -0.07941656    41    80 3.252834e-04 2.814825e-02 0.9174572 #> 55  0.07941410    54    89 3.254230e-04 2.815621e-02 0.9174572 #> 56 -0.07934653    28    80 3.292785e-04 2.837512e-02 0.9174572 #> 57  0.07916783    29    92 3.396803e-04 2.895702e-02 0.9174572 #> 58 -0.07866905    17    86 3.703636e-04 3.060294e-02 0.9174572 #> 59  0.07827749    16    29 3.962447e-04 3.191463e-02 0.9174572 #> 60 -0.07808262    73    89 4.097453e-04 3.257290e-02 0.9174572 #> 61  0.07766261    52    67 4.403166e-04 3.400207e-02 0.9174572 #> 62  0.07762917    25    87 4.428397e-04 3.411638e-02 0.9174572 #> 63 -0.07739378     9    93 4.609873e-04 3.492296e-02 0.9174572 #> 64  0.07738885    31    80 4.613748e-04 3.493988e-02 0.9174572 #> 65 -0.07718681    80    94 4.775137e-04 3.563445e-02 0.9174572  # parameters of the mixture distribution used to compute p-values etc. c <- fdrtool(sm2vec(inferred.pcor), statistic=\"correlation\") #> Step 1... determine cutoff point #> Step 2... estimate parameters of null distribution and eta0 #> Step 3... compute p-values and estimate empirical PDF/CDF #> Step 4... compute q-values and local fdr #> Step 5... prepare for plotting c$param #>          cutoff N.cens      eta0     eta0.SE    kappa kappa.SE #> [1,] 0.03553068   4352 0.9474623 0.005656465 2043.377 94.72264  ## A random network with 20 nodes and 10 percent (=19) edges true.pcor <- ggm.simulate.pcor(20, 0.1)  # convert to edge list test.results <- ggm.list.edges(true.pcor)[1:19,] nlab <- LETTERS[1:20]  # graphviz # network.make.dot(filename=\"test.dot\", test.results, nlab, main = \"A graph\") # system(\"fdp -T svg -o test.svg test.dot\")  # Rgraphviz gr <- network.make.graph( test.results, nlab) gr #> A graphNEL graph with directed edges #> Number of Nodes = 20  #> Number of Edges = 38 num.nodes(gr) #> [1] 20 edge.info(gr) #> $weight #>      A~Q      A~E      B~T      D~P      D~E      D~I      E~K      F~J  #>  0.51860 -0.52382 -0.48535 -0.13223  0.35232 -0.43940 -0.15950  0.99442  #>      H~M      H~N      H~O      I~T      K~O      K~P      L~P      M~R  #> -0.00100 -0.38557 -0.57005 -0.38896 -0.25397  0.46440  0.66363  0.93266  #>      N~R      O~T      Q~T  #> -0.21348  0.30313  0.34678  #>  #> $dir #>    A~Q    A~E    B~T    D~P    D~E    D~I    E~K    F~J    H~M    H~N    H~O  #> \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\"  #>    I~T    K~O    K~P    L~P    M~R    N~R    O~T    Q~T  #> \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" gr2 <- network.make.graph( test.results, nlab, drop.singles=TRUE) gr2 #> A graphNEL graph with directed edges #> Number of Nodes = 17  #> Number of Edges = 38 num.nodes(gr2) #> [1] 17 edge.info(gr2) #> $weight #>      A~Q      A~E      B~T      D~P      D~E      D~I      E~K      F~J  #>  0.51860 -0.52382 -0.48535 -0.13223  0.35232 -0.43940 -0.15950  0.99442  #>      H~M      H~N      H~O      I~T      K~O      K~P      L~P      M~R  #> -0.00100 -0.38557 -0.57005 -0.38896 -0.25397  0.46440  0.66363  0.93266  #>      N~R      O~T      Q~T  #> -0.21348  0.30313  0.34678  #>  #> $dir #>    A~Q    A~E    B~T    D~P    D~E    D~I    E~K    F~J    H~M    H~N    H~O  #> \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\"  #>    I~T    K~O    K~P    L~P    M~R    N~R    O~T    Q~T  #> \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\"  # plot network plot(gr, \"fdp\") plot(gr2, \"fdp\") set.seed(123454321) m <- matrix(runif(2500),50) r <- cor(m) g <- as.matrix(r>=0.7)+0 f1 <- Heatmap(r) f2 <- Heatmap(g) f <- f1+f2 draw(f) df <- normalize(mtcars) heatmaply(df,k_col=5,k_row=5,colors = colorRampPalette(brewer.pal(3, \"RdBu\"))(256)) pwr <- c(1:10, seq(from=12, to=30, by=2)) sft <- pickSoftThreshold(dat, powerVector=pwr, verbose=5) ADJ <- abs(cor(dat, method=\"pearson\", use=\"pairwise.complete.obs\"))^6 dissADJ <- 1-ADJ dissTOM <- TOMdist(ADJ) TOM <- TOMsimilarityFromExpr(dat) Tree <- hclust(as.dist(1-TOM), method=\"average\") for(j in pwr) {   pam_name <- paste0(\"pam\",j)   assign(pam_name, pam(as.dist(dissADJ),j))   pamTOM_name <- paste0(\"pamTOM\",j)   assign(pamTOM_name,pam(as.dist(dissTOM),j))   tc <- table(get(pam_name)$clustering,get(pamTOM_name)$clustering)   print(tc)   print(diag(tc)) } colorStaticTOM <- as.character(cutreeStaticColor(Tree,cutHeight=.99,minSize=5)) colorDynamicTOM <- labels2colors(cutreeDynamic(Tree,method=\"tree\",minClusterSize=5)) Colors <- data.frame(pamTOM6$clustering,colorStaticTOM,colorDynamicTOM) plotDendroAndColors(Tree, Colors, dendroLabels=FALSE, hang=0.03, addGuide=TRUE, guideHang=0.05) meg <- moduleEigengenes(dat, color=1:ncol(dat), softPower=6)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"meta-data","dir":"Articles","previous_headings":"","what":"Meta-data","title":"Bioconductor Notes","text":"","code":"hs <- available_projects() #> 2023-01-02 22:25:38 caching file sra.recount_project.MD.gz. #> 2023-01-02 22:25:39 caching file gtex.recount_project.MD.gz. #> 2023-01-02 22:25:41 caching file tcga.recount_project.MD.gz. dim(subset(hs,file_source==\"gtex\")) #> [1] 32  6 annotation_options(\"human\") #> [1] \"gencode_v26\" \"gencode_v29\" \"fantom6_cat\" \"refseq\"      \"ercc\"        #> [6] \"sirv\" blood_rse <- create_rse(subset(hs,project==\"BLOOD\")) #> 2023-01-02 22:25:44 downloading and reading the metadata. #> 2023-01-02 22:25:45 caching file gtex.gtex.BLOOD.MD.gz. #> 2023-01-02 22:25:46 caching file gtex.recount_project.BLOOD.MD.gz. #> 2023-01-02 22:25:47 caching file gtex.recount_qc.BLOOD.MD.gz. #> 2023-01-02 22:25:47 caching file gtex.recount_seq_qc.BLOOD.MD.gz. #> 2023-01-02 22:25:51 downloading and reading the feature information. #> 2023-01-02 22:25:51 caching file human.gene_sums.G026.gtf.gz. #> 2023-01-02 22:25:52 downloading and reading the counts: 1048 samples across 63856 features. #> 2023-01-02 22:25:53 caching file gtex.gene_sums.BLOOD.G026.gz. #> 2023-01-02 22:25:59 construcing the RangedSummarizedExperiment (rse) object. metadata(blood_rse) #> $time_created #> [1] \"2023-01-02 22:25:59 GMT\" #>  #> $recount3_version #>           package ondiskversion loadedversion #> recount3 recount3         1.6.0         1.6.0 #>                                         path #> recount3 /rds/user/jhz22/hpc-work/R/recount3 #>                                   loadedpath attached is_base       date #> recount3 /rds/user/jhz22/hpc-work/R/recount3     TRUE   FALSE 2022-04-26 #>                source md5ok                    library #> recount3 Bioconductor    NA /rds/user/jhz22/hpc-work/R #>  #> $project #> [1] \"BLOOD\" #>  #> $project_home #> [1] \"data_sources/gtex\" #>  #> $type #> [1] \"gene\" #>  #> $organism #> [1] \"human\" #>  #> $annotation #> [1] \"gencode_v26\" #>  #> $recount3_url #> [1] \"http://duffel.rail.bio/recount3\" rowRanges(blood_rse) #> GRanges object with 63856 ranges and 10 metadata columns: #>                              seqnames            ranges strand |   source #>                                 <Rle>         <IRanges>  <Rle> | <factor> #>          ENSG00000278704.1 GL000009.2       56140-58376      - |  ENSEMBL #>          ENSG00000277400.1 GL000194.1      53590-115018      - |  ENSEMBL #>          ENSG00000274847.1 GL000194.1      53594-115055      - |  ENSEMBL #>          ENSG00000277428.1 GL000195.1       37434-37534      - |  ENSEMBL #>          ENSG00000276256.1 GL000195.1       42939-49164      - |  ENSEMBL #>                        ...        ...               ...    ... .      ... #>   ENSG00000124334.17_PAR_Y       chrY 57184101-57197337      + |   HAVANA #>   ENSG00000185203.12_PAR_Y       chrY 57201143-57203357      - |   HAVANA #>    ENSG00000270726.6_PAR_Y       chrY 57190738-57208756      + |   HAVANA #>   ENSG00000182484.15_PAR_Y       chrY 57207346-57212230      + |   HAVANA #>    ENSG00000227159.8_PAR_Y       chrY 57212184-57214397      - |   HAVANA #>                                type bp_length     phase                gene_id #>                            <factor> <numeric> <integer>            <character> #>          ENSG00000278704.1     gene      2237      <NA>      ENSG00000278704.1 #>          ENSG00000277400.1     gene      2179      <NA>      ENSG00000277400.1 #>          ENSG00000274847.1     gene      1599      <NA>      ENSG00000274847.1 #>          ENSG00000277428.1     gene       101      <NA>      ENSG00000277428.1 #>          ENSG00000276256.1     gene      2195      <NA>      ENSG00000276256.1 #>                        ...      ...       ...       ...                    ... #>   ENSG00000124334.17_PAR_Y     gene      2504      <NA> ENSG00000124334.17_P.. #>   ENSG00000185203.12_PAR_Y     gene      1054      <NA> ENSG00000185203.12_P.. #>    ENSG00000270726.6_PAR_Y     gene       773      <NA> ENSG00000270726.6_PA.. #>   ENSG00000182484.15_PAR_Y     gene      4618      <NA> ENSG00000182484.15_P.. #>    ENSG00000227159.8_PAR_Y     gene      1306      <NA> ENSG00000227159.8_PA.. #>                                         gene_type   gene_name       level #>                                       <character> <character> <character> #>          ENSG00000278704.1         protein_coding  BX004987.1           3 #>          ENSG00000277400.1         protein_coding  AC145212.2           3 #>          ENSG00000274847.1         protein_coding  AC145212.1           3 #>          ENSG00000277428.1               misc_RNA       Y_RNA           3 #>          ENSG00000276256.1         protein_coding  AC011043.1           3 #>                        ...                    ...         ...         ... #>   ENSG00000124334.17_PAR_Y         protein_coding        IL9R           2 #>   ENSG00000185203.12_PAR_Y              antisense      WASIR1           2 #>    ENSG00000270726.6_PAR_Y   processed_transcript AJ271736.10           2 #>   ENSG00000182484.15_PAR_Y transcribed_unproces..      WASH6P           2 #>    ENSG00000227159.8_PAR_Y unprocessed_pseudogene    DDX11L16           2 #>                                     havana_gene         tag #>                                     <character> <character> #>          ENSG00000278704.1                 <NA>        <NA> #>          ENSG00000277400.1                 <NA>        <NA> #>          ENSG00000274847.1                 <NA>        <NA> #>          ENSG00000277428.1                 <NA>        <NA> #>          ENSG00000276256.1                 <NA>        <NA> #>                        ...                  ...         ... #>   ENSG00000124334.17_PAR_Y OTTHUMG00000022720.1         PAR #>   ENSG00000185203.12_PAR_Y OTTHUMG00000022676.3         PAR #>    ENSG00000270726.6_PAR_Y OTTHUMG00000184987.2         PAR #>   ENSG00000182484.15_PAR_Y OTTHUMG00000022677.5         PAR #>    ENSG00000227159.8_PAR_Y OTTHUMG00000022678.1         PAR #>   ------- #>   seqinfo: 374 sequences from an unspecified genome; no seqlengths colnames(colData(blood_rse))[1:20] #>  [1] \"rail_id\"        \"external_id\"    \"study\"          \"gtex.run_acc\"   #>  [5] \"gtex.subjid\"    \"gtex.sex\"       \"gtex.age\"       \"gtex.dthhrdy\"   #>  [9] \"gtex.sampid\"    \"gtex.smatsscr\"  \"gtex.smcenter\"  \"gtex.smpthnts\"  #> [13] \"gtex.smrin\"     \"gtex.smts\"      \"gtex.smtsd\"     \"gtex.smubrid\"   #> [17] \"gtex.smtsisch\"  \"gtex.smtspax\"   \"gtex.smnabtch\"  \"gtex.smnabtcht\" expand_sra_attributes(blood_rse) #> Warning: sra.sample_attributes was absent from the input rse. Will return the #> original rse object. #> class: RangedSummarizedExperiment  #> dim: 63856 1048  #> metadata(8): time_created recount3_version ... annotation recount3_url #> assays(1): raw_counts #> rownames(63856): ENSG00000278704.1 ENSG00000277400.1 ... #>   ENSG00000182484.15_PAR_Y ENSG00000227159.8_PAR_Y #> rowData names(10): source type ... havana_gene tag #> colnames(1048): GTEX-R55C-0005-SM-3GAE9.1 GTEX-QMR6-0005-SM-32PKY.1 ... #>   GTEX-1NSGN-0005-SM-DKPPX.1 GTEX-1QP29-0005-SM-DLZQX.1 #> colData names(198): rail_id external_id ... recount_seq_qc.errq #>   BigWigURL"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"pathway-and-enrichment-analysis","dir":"Articles","previous_headings":"","what":"Pathway and enrichment analysis","title":"Bioconductor Notes","text":"","code":"reactome <- pathways(\"hsapiens\", \"reactome\") kegg <- pathways(\"hsapiens\",\"kegg\") pharmgkb <- pathways(\"hsapiens\",\"pharmgkb\") nodes(kegg[[21]]) #>  [1] \"ENTREZID:102724560\" \"ENTREZID:10993\"     \"ENTREZID:113675\"    #>  [4] \"ENTREZID:132158\"    \"ENTREZID:1610\"      \"ENTREZID:1738\"      #>  [7] \"ENTREZID:1757\"      \"ENTREZID:189\"       \"ENTREZID:211\"       #> [10] \"ENTREZID:212\"       \"ENTREZID:23464\"     \"ENTREZID:2593\"      #> [13] \"ENTREZID:26227\"     \"ENTREZID:2628\"      \"ENTREZID:27232\"     #> [16] \"ENTREZID:2731\"      \"ENTREZID:275\"       \"ENTREZID:29958\"     #> [19] \"ENTREZID:29968\"     \"ENTREZID:441531\"    \"ENTREZID:501\"       #> [22] \"ENTREZID:51268\"     \"ENTREZID:5223\"      \"ENTREZID:5224\"      #> [25] \"ENTREZID:55349\"     \"ENTREZID:5723\"      \"ENTREZID:635\"       #> [28] \"ENTREZID:63826\"     \"ENTREZID:6470\"      \"ENTREZID:6472\"      #> [31] \"ENTREZID:64902\"     \"ENTREZID:669\"       \"ENTREZID:875\"       #> [34] \"ENTREZID:9380\"      \"ENTREZID:1491\" kegg_t2g <- ldply(lapply(kegg, nodes), data.frame) names(kegg_t2g) <- c(\"gs_name\", \"gene_symbol\") VEGF <- subset(kegg_t2g,gs_name==\"VEGF signaling pathway\")[[2]] eKEGG <- enricher(gene=VEGF, TERM2GENE = kegg_t2g,                   universe=,                   pAdjustMethod = \"BH\",                   pvalueCutoff = 0.1, qvalueCutoff = 0.05,                   minGSSize = 10, maxGSSize = 500)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"transcript-databases","dir":"Articles","previous_headings":"","what":"Transcript databases","title":"Bioconductor Notes","text":"overview annotation available Carlson et al. (2016).","code":"options(width=200)  # columns(org.Hs.eg.db) # keyref <- keys(org.Hs.eg.db, keytype=\"ENTREZID\") # symbol_uniprot <- select(org.Hs.eg.db,keys=keyref,columns = c(\"SYMBOL\",\"UNIPROT\")) # subset(symbol_uniprot,SYMBOL==\"MC4R\")  x <- EnsDb.Hsapiens.v86 listColumns(x, \"protein\", skip.keys=TRUE) #> [1] \"tx_id\"            \"protein_id\"       \"protein_sequence\" listGenebiotypes(x) #>  [1] \"protein_coding\"                     \"unitary_pseudogene\"                 \"unprocessed_pseudogene\"             \"processed_pseudogene\"               \"processed_transcript\"               #>  [6] \"transcribed_unprocessed_pseudogene\" \"antisense\"                          \"transcribed_unitary_pseudogene\"     \"polymorphic_pseudogene\"             \"lincRNA\"                            #> [11] \"sense_intronic\"                     \"transcribed_processed_pseudogene\"   \"sense_overlapping\"                  \"IG_V_pseudogene\"                    \"pseudogene\"                         #> [16] \"TR_V_gene\"                          \"3prime_overlapping_ncRNA\"           \"IG_V_gene\"                          \"bidirectional_promoter_lncRNA\"      \"snRNA\"                              #> [21] \"miRNA\"                              \"misc_RNA\"                           \"snoRNA\"                             \"rRNA\"                               \"Mt_tRNA\"                            #> [26] \"Mt_rRNA\"                            \"IG_C_gene\"                          \"IG_J_gene\"                          \"TR_J_gene\"                          \"TR_C_gene\"                          #> [31] \"TR_V_pseudogene\"                    \"TR_J_pseudogene\"                    \"IG_D_gene\"                          \"ribozyme\"                           \"IG_C_pseudogene\"                    #> [36] \"TR_D_gene\"                          \"TEC\"                                \"IG_J_pseudogene\"                    \"scRNA\"                              \"scaRNA\"                             #> [41] \"vaultRNA\"                           \"sRNA\"                               \"macro_lncRNA\"                       \"non_coding\"                         \"IG_pseudogene\"                      #> [46] \"LRG_gene\" listTxbiotypes(x) #>  [1] \"protein_coding\"                     \"processed_transcript\"               \"nonsense_mediated_decay\"            \"retained_intron\"                    \"unitary_pseudogene\"                 #>  [6] \"TEC\"                                \"miRNA\"                              \"misc_RNA\"                           \"non_stop_decay\"                     \"unprocessed_pseudogene\"             #> [11] \"processed_pseudogene\"               \"transcribed_unprocessed_pseudogene\" \"lincRNA\"                            \"antisense\"                          \"transcribed_unitary_pseudogene\"     #> [16] \"polymorphic_pseudogene\"             \"sense_intronic\"                     \"transcribed_processed_pseudogene\"   \"sense_overlapping\"                  \"IG_V_pseudogene\"                    #> [21] \"pseudogene\"                         \"TR_V_gene\"                          \"3prime_overlapping_ncRNA\"           \"IG_V_gene\"                          \"bidirectional_promoter_lncRNA\"      #> [26] \"snRNA\"                              \"snoRNA\"                             \"rRNA\"                               \"Mt_tRNA\"                            \"Mt_rRNA\"                            #> [31] \"IG_C_gene\"                          \"IG_J_gene\"                          \"TR_J_gene\"                          \"TR_C_gene\"                          \"TR_V_pseudogene\"                    #> [36] \"TR_J_pseudogene\"                    \"IG_D_gene\"                          \"ribozyme\"                           \"IG_C_pseudogene\"                    \"TR_D_gene\"                          #> [41] \"IG_J_pseudogene\"                    \"scRNA\"                              \"scaRNA\"                             \"vaultRNA\"                           \"sRNA\"                               #> [46] \"macro_lncRNA\"                       \"non_coding\"                         \"IG_pseudogene\"                      \"LRG_gene\" listTables(x) #> $gene #> [1] \"gene_id\"          \"gene_name\"        \"gene_biotype\"     \"gene_seq_start\"   \"gene_seq_end\"     \"seq_name\"         \"seq_strand\"       \"seq_coord_system\" \"symbol\"           #>  #> $tx #> [1] \"tx_id\"            \"tx_biotype\"       \"tx_seq_start\"     \"tx_seq_end\"       \"tx_cds_seq_start\" \"tx_cds_seq_end\"   \"gene_id\"          \"tx_name\"          #>  #> $tx2exon #> [1] \"tx_id\"    \"exon_id\"  \"exon_idx\" #>  #> $exon #> [1] \"exon_id\"        \"exon_seq_start\" \"exon_seq_end\"   #>  #> $chromosome #> [1] \"seq_name\"    \"seq_length\"  \"is_circular\" #>  #> $protein #> [1] \"tx_id\"            \"protein_id\"       \"protein_sequence\" #>  #> $uniprot #> [1] \"protein_id\"           \"uniprot_id\"           \"uniprot_db\"           \"uniprot_mapping_type\" #>  #> $protein_domain #> [1] \"protein_id\"            \"protein_domain_id\"     \"protein_domain_source\" \"interpro_accession\"    \"prot_dom_start\"        \"prot_dom_end\"          #>  #> $entrezgene #> [1] \"gene_id\"  \"entrezid\" #>  #> $metadata #> [1] \"name\"  \"value\" metadata(x) #>                  name                               value #> 1             Db type                               EnsDb #> 2     Type of Gene ID                     Ensembl Gene ID #> 3  Supporting package                           ensembldb #> 4       Db created by ensembldb package from Bioconductor #> 5      script_version                               0.3.0 #> 6       Creation time            Thu May 18 16:32:27 2017 #> 7     ensembl_version                                  86 #> 8        ensembl_host                           localhost #> 9            Organism                        homo_sapiens #> 10        taxonomy_id                                9606 #> 11       genome_build                              GRCh38 #> 12    DBSCHEMAVERSION                                 2.0 organism(x) #> [1] \"Homo sapiens\" returnFilterColumns(x) #> [1] TRUE seqinfo(x) #> Seqinfo object with 357 sequences (1 circular) from GRCh38 genome: #>   seqnames seqlengths isCircular genome #>   X         156040895      FALSE GRCh38 #>   20         64444167      FALSE GRCh38 #>   1         248956422      FALSE GRCh38 #>   6         170805979      FALSE GRCh38 #>   3         198295559      FALSE GRCh38 #>   ...             ...        ...    ... #>   LRG_239      114904      FALSE GRCh38 #>   LRG_311      115492      FALSE GRCh38 #>   LRG_721       33396      FALSE GRCh38 #>   LRG_741      231167      FALSE GRCh38 #>   LRG_93        22459      FALSE GRCh38 seqlevels(xupdateEnsDb(x) #> EnsDb for Ensembl: #> |Backend: SQLite #> |Db type: EnsDb #> |Type of Gene ID: Ensembl Gene ID #> |Supporting package: ensembldb #> |Db created by: ensembldb package from Bioconductor #> |script_version: 0.3.0 #> |Creation time: Thu May 18 16:32:27 2017 #> |ensembl_version: 86 #> |ensembl_host: localhost #> |Organism: homo_sapiens #> |taxonomy_id: 9606 #> |genome_build: GRCh38 #> |DBSCHEMAVERSION: 2.0 #> | No. of genes: 63970. #> | No. of transcripts: 216741. #> |Protein data available.  genes(x, columns=c(\"gene_name\"), filter=list(SeqNameFilter(\"X\"), GeneBiotypeFilter(\"protein_coding\"))) #> GRanges object with 841 ranges and 3 metadata columns: #>                   seqnames              ranges strand |   gene_name         gene_id   gene_biotype #>                      <Rle>           <IRanges>  <Rle> | <character>     <character>    <character> #>   ENSG00000182378        X       276322-303356      + |      PLCXD1 ENSG00000182378 protein_coding #>   ENSG00000178605        X       304529-318819      - |      GTPBP6 ENSG00000178605 protein_coding #>   ENSG00000167393        X       333963-386955      - |     PPP2R3B ENSG00000167393 protein_coding #>   ENSG00000185960        X       624344-659411      + |        SHOX ENSG00000185960 protein_coding #>   ENSG00000205755        X     1187549-1212750      - |       CRLF2 ENSG00000205755 protein_coding #>               ...      ...                 ...    ... .         ...             ...            ... #>   ENSG00000277745        X 155459415-155460005      - |      H2AFB3 ENSG00000277745 protein_coding #>   ENSG00000185973        X 155490115-155669944      - |       TMLHE ENSG00000185973 protein_coding #>   ENSG00000168939        X 155767812-155782459      + |       SPRY3 ENSG00000168939 protein_coding #>   ENSG00000124333        X 155881293-155943769      + |       VAMP7 ENSG00000124333 protein_coding #>   ENSG00000124334        X 155997581-156010817      + |        IL9R ENSG00000124334 protein_coding #>   ------- #>   seqinfo: 1 sequence from GRCh38 genome transcripts(x, columns=listColumns(x, \"tx\"), filter = AnnotationFilterList(), order.type = \"asc\", return.type = \"GRanges\") #> GRanges object with 216741 ranges and 6 metadata columns: #>                   seqnames            ranges strand |           tx_id             tx_biotype tx_cds_seq_start tx_cds_seq_end         gene_id         tx_name #>                      <Rle>         <IRanges>  <Rle> |     <character>            <character>        <integer>      <integer>     <character>     <character> #>   ENST00000456328        1       11869-14409      + | ENST00000456328   processed_transcript             <NA>           <NA> ENSG00000223972 ENST00000456328 #>   ENST00000450305        1       12010-13670      + | ENST00000450305 transcribed_unproces..             <NA>           <NA> ENSG00000223972 ENST00000450305 #>   ENST00000488147        1       14404-29570      - | ENST00000488147 unprocessed_pseudogene             <NA>           <NA> ENSG00000227232 ENST00000488147 #>   ENST00000619216        1       17369-17436      - | ENST00000619216                  miRNA             <NA>           <NA> ENSG00000278267 ENST00000619216 #>   ENST00000473358        1       29554-31097      + | ENST00000473358                lincRNA             <NA>           <NA> ENSG00000243485 ENST00000473358 #>               ...      ...               ...    ... .             ...                    ...              ...            ...             ...             ... #>   ENST00000420810        Y 26549425-26549743      + | ENST00000420810   processed_pseudogene             <NA>           <NA> ENSG00000224240 ENST00000420810 #>   ENST00000456738        Y 26586642-26591601      - | ENST00000456738 unprocessed_pseudogene             <NA>           <NA> ENSG00000227629 ENST00000456738 #>   ENST00000435945        Y 26594851-26634652      - | ENST00000435945 unprocessed_pseudogene             <NA>           <NA> ENSG00000237917 ENST00000435945 #>   ENST00000435741        Y 26626520-26627159      - | ENST00000435741   processed_pseudogene             <NA>           <NA> ENSG00000231514 ENST00000435741 #>   ENST00000431853        Y 56855244-56855488      + | ENST00000431853   processed_pseudogene             <NA>           <NA> ENSG00000235857 ENST00000431853 #>   ------- #>   seqinfo: 357 sequences (1 circular) from GRCh38 genome  txdbEnsemblGRCh38 <- makeTxDbFromEnsembl(organism=\"Homo sapiens\", release=98) #> Fetch transcripts and genes from Ensembl ... OK #>   (fetched 250194 transcripts from 67946 genes) #> Fetch exons and CDS from Ensembl ... OK #> Fetch chromosome names and lengths from Ensembl ...OK #> Gather the metadata ... OK #> Make the TxDb object ... OK txdb <- as.list(txdbEnsemblGRCh38) lapply(txdb,head) #> $transcripts #>   tx_id         tx_name        tx_type        tx_chrom tx_strand tx_start  tx_end #> 1     1 ENST00000636745         lncRNA CHR_HG107_PATCH         +  1049876 1055745 #> 2     2 ENST00000636387         lncRNA CHR_HG107_PATCH         +  1052607 1055745 #> 3     3 ENST00000643422 protein_coding CHR_HG107_PATCH         +  1075018 1112365 #> 4     4 ENST00000645631 protein_coding CHR_HG107_PATCH         +  1075018 1112365 #> 5     5 ENST00000636567 protein_coding CHR_HG107_PATCH         +  1159911 1203106 #> 6     6 ENST00000636545 protein_coding CHR_HG107_PATCH         -  1012823 1036718 #>  #> $splicings #>   tx_id exon_rank exon_id       exon_name      exon_chrom exon_strand exon_start exon_end cds_id        cds_name cds_start cds_end #> 1     1         1       1 ENSE00003797146 CHR_HG107_PATCH           +    1049876  1049958     NA            <NA>        NA      NA #> 2     1         2       2 ENSE00003795151 CHR_HG107_PATCH           +    1051619  1051839     NA            <NA>        NA      NA #> 3     1         3       4 ENSE00003793692 CHR_HG107_PATCH           +    1054235  1054388     NA            <NA>        NA      NA #> 4     1         4       5 ENSE00003797325 CHR_HG107_PATCH           +    1055110  1055745     NA            <NA>        NA      NA #> 5     2         1       3 ENSE00003798310 CHR_HG107_PATCH           +    1052607  1055745     NA            <NA>        NA      NA #> 6     3         1       6 ENSE00003815958 CHR_HG107_PATCH           +    1075018  1075093      1 ENSP00000494473   1075018 1075093 #>  #> $genes #>   tx_id         gene_id #> 1     1 ENSG00000283640 #> 2     2 ENSG00000283640 #> 3     3 ENSG00000284971 #> 4     4 ENSG00000284971 #> 5     5 ENSG00000283158 #> 6     6 ENSG00000283350 #>  #> $chrominfo #>              chrom    length is_circular #> 1  CHR_HG107_PATCH 135088590          NA #> 2  CHR_HG109_PATCH  58617934          NA #> 3  CHR_HG126_PATCH 198295908          NA #> 4 CHR_HG1277_PATCH 133754853          NA #> 5 CHR_HG1296_PATCH 190208697          NA #> 6 CHR_HG1298_PATCH 190196285          NA  txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene  # liverExprs <- quantifyExpressionsFromBWs(txdb = txdb,BWfiles=,experimentalDesign=)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"bionconductor-forum","dir":"Articles","previous_headings":"","what":"Bionconductor forum","title":"Bioconductor Notes","text":"Web: https://support.bioconductor.org/","code":""},{"path":[]},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"data-frame","dir":"Articles","previous_headings":"","what":"data.frame","title":"ExpressionSet usage","text":"great benefit use object directly data.frame.","code":"lm.result <- esApply(exampleSet,1,function(x) lm(score~gender+x)) beta.x <- unlist(lapply(lapply(lm.result,coef),\"[\",3)) beta.x[1] #> AFFX-MurIL2_at.x  #>    -0.0001907472 lm(score~gender+AFFX.MurIL2_at,data=exampleSet) #>  #> Call: #> lm(formula = score ~ gender + AFFX.MurIL2_at, data = exampleSet) #>  #> Coefficients: #>    (Intercept)      genderMale  AFFX.MurIL2_at   #>      0.5531725       0.0098932      -0.0001907"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"composite-plots","dir":"Articles","previous_headings":"","what":"Composite plots","title":"ExpressionSet usage","text":"wish examine distribution feature via histogram, scatter boxplot. One resort esApply simplicity nicer add feature name title. expression set indexed using feature name(s).","code":"invisible(esApply(exampleSet[1:2],1,function(x){par(mfrow=c(3,1));boxplot(x);hist(x);plot(x)})) f <- featureNames(exampleSet[1:2]) invisible(sapply(f,function(x) {                      d <- t(exprs(exampleSet[x]))                      fn <- featureNames(exampleSet[x])                      par(mfrow=c(3,1))                      hist(d,main=\"\",xlab=fn); plot(d, ylab=fn); boxplot(d,ylab=fn)                    }           ) )"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"outlier-detections","dir":"Articles","previous_headings":"","what":"Outlier detections","title":"ExpressionSet usage","text":"illustrates one mechanism,","code":"list_outliers <- function(es, method=\"upperquartile\") outliers(exprs(es),method=method) for (method in c(\"KS\",\"sum\",\"upperquartile\")) {   ZWK_outliers <- list_outliers(protein_ZWK,method=method)   print(ZWK_outliers@statistic[ZWK_outliers@which]) }"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"data-transformation","dir":"Articles","previous_headings":"","what":"Data transformation","title":"ExpressionSet usage","text":"Suppose wish use log2 greater zero set negative values missing.","code":"log2.na <- function(x) log2(ifelse(x>0, x, NA)) exprs(exampleSet) <- log2.na(exprs(exampleSet))"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"limit-of-detection-lod","dir":"Articles","previous_headings":"","what":"Limit of detection (LOD)","title":"ExpressionSet usage","text":"generate lod.max ~ U[0,1] variable experiment  quantity shown big impact protein abundance therefore pQTL detection shown real example.  Summary statistics","code":"fData(exampleSet) #> data frame with 0 columns and 500 rows fData(exampleSet)$lod.max <- apply(exprs(exampleSet),1,quantile,runif(nrow(exampleSet))) lod <- get.prop.below.LLOD(exampleSet) x <- dplyr::arrange(fData(lod),desc(pc.belowLOD.new)) kable(head(lod)) plot(x[,2], main=\"Random quantile cut off\", ylab=\"<lod%\") rm(list=ls()) dir <- \"~/rds/post_qc_data/interval/phenotype/olink_proteomics/post-qc/\" eset <- readRDS(paste0(dir,\"eset.inf1.flag.out.outlier.in.rds\")) x <- get.prop.below.LLOD(eset) annot <- fData(x) annot$MissDataProp <- as.numeric(gsub(\"\\\\%$\", \"\", annot$MissDataProp)) plot(annot$MissDataProp, annot$pc.belowLOD.new, xlab=\"% <LLOD in Original\",      ylab=\"% <LLOD in post QC dataset\", pch=19) INF <- Sys.getenv(\"INF\") np <- read.table(paste(INF, \"work\", \"INF1.merge.nosig\", sep=\"/\"), header=FALSE,                  col.names = c(\"prot\", \"uniprot\")) kable(np, caption=\"Proteins with no pQTL\") annot$pQTL <- rep(NA, nrow(annot)) no.pQTL.ind <- which(annot$uniprot.id %in% np$uniprot) annot$pQTL[no.pQTL.ind] <- \"red\" annot$pQTL[-no.pQTL.ind] <- \"blue\" annot <- annot[order(annot$pc.belowLOD.new, decreasing = TRUE),] annot <- annot[-grep(\"^BDNF$\", annot$ID),] saveRDS(annot,file=file.path(\"~\",\"pQTLtools\",\"tests\",\"annot.RDS\")) annot <- readRDS(file.path(\"~\",\"pQTLtools\",\"tests\",\"annot.RDS\")) annot <- within(annot,{prot=gsub(\"^[0-9]*_\",\"\",olink.id)}) par(mar=c(5,4,1,1)) attach(annot) ytick <- seq(1, nrow(annot)) plot(100-pc.belowLOD.new,ytick,cex=0.8,pch=19,col=pQTL,axes=FALSE, xlab=\"\", ylab=\"\", cex.lab=0.8) axis(1, cex.axis=0.6) axis(2, at=ytick, labels = FALSE, lwd.tick=0.1, lwd=0) text(y=ytick, par(\"usr\")[3],labels = prot, srt = 25, pos = 1, xpd = TRUE, cex=0.4) mtext(\"100-% samples with very low abundance per protein\",side=1,line=2.5,cex=1.2) mtext(\"Ordered proteins\",side=2,line=2.5,cex=0.9,font=2) legend(x=75,y=15,c(\"without pQTL\",\"with pQTL\"),box.lwd=0,cex=1.2,col=c(\"red\",\"blue\"),pch=19) detach(annot) options(width=120) kable(annot,caption=\"Summary statistics\",row.names=FALSE)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"combination-of-proteins-and-other-variables","dir":"Articles","previous_headings":"","what":"Combination of proteins and other variables","title":"ExpressionSet usage","text":"available design.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"maendtoend","dir":"Articles","previous_headings":"","what":"maEndtoEnd","title":"ExpressionSet usage","text":"Web: https://bioconductor.org/packages/release/workflows/html/maEndToEnd.html. Examples can found PCA, heatmap, normalisation, linear models, enrichment analysis Bioconductor package.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"cistrans-classification","dir":"Articles","previous_headings":"","what":"cis/trans classification","title":"An Overview of pQTLtools","text":"Table 1. cis/trans classification cis/trans classification INF1_merge_cvt object obtained later use. recent implementation qtlClassifier function. example , used generate 2d-pQTL plot 2d pQTL plot whose result can also viewed 2-d plotly style, 2d pQTL plotly 3-d counterpart 3d pQTL plotly ideogram (biomaRt always keep copy hgnc) now proceed Karyoplot cis/trans pQTLs","code":"options(width=200) f <- file.path(\"~\",\"pQTLtools\",\"tests\",\"INF1.merge\") merged <- read.delim(f,as.is=TRUE) hits <- merge(merged[c(\"CHR\",\"POS\",\"MarkerName\",\"prot\",\"log10p\")],               inf1[c(\"prot\",\"uniprot\")],by=\"prot\") %>%         mutate(log10p=-log10p) names(hits) <- c(\"prot\",\"Chr\",\"bp\",\"SNP\",\"log10p\",\"uniprot\") cistrans <- cis.vs.trans.classification(hits,inf1,\"uniprot\") cis.vs.trans <- with(cistrans,data) kable(with(cistrans,table),caption=\"Table 1. cis/trans classification\") with(cistrans,total) #> [1] 180 circos.cis.vs.trans.plot(hits=f,inf1,\"uniprot\") f <- file.path(\"~\",\"pQTLtools\",\"tests\",\"INF1.merge\") INF1_merge <- read.delim(f)[c(\"Chrom\",\"Start\",\"End\",\"prot\",\"MarkerName\")] INF1_merge_cvt <- merge(INF1_merge,cis.vs.trans,by.x=c(\"prot\",\"MarkerName\"),by.y=c(\"prot\",\"SNP\")) ord <- with(INF1_merge_cvt,order(Chr,bp)) INF1_merge_cvt <- INF1_merge_cvt[ord,] options(width=200) geneSNP <- merge(merged[c(\"prot\",\"MarkerName\")],inf1[c(\"prot\",\"gene\")],by=\"prot\")[c(\"gene\",\"MarkerName\",\"prot\")] SNPPos <- merged[c(\"MarkerName\",\"CHR\",\"POS\")] genePos <- inf1[c(\"gene\",\"chr\",\"start\",\"end\")] cvt <- qtlClassifier(geneSNP,SNPPos,genePos,1e6) kable(head(cvt)) cistrans.check <- merge(cvt[c(\"gene\",\"MarkerName\",\"Type\")],cis.vs.trans[c(\"p.gene\",\"SNP\",\"cis.trans\")],                         by.x=c(\"gene\",\"MarkerName\"),by.y=c(\"p.gene\",\"SNP\")) with(cistrans.check,table(Type,cis.trans)) #>        cis.trans #> Type    cis trans #>   cis    59     0 #>   trans   0   121 t2d <- qtl2dplot(cis.vs.trans,xlab=\"pQTL position\",ylab=\"Gene position\") fig2d <- qtl2dplotly(cis.vs.trans,xlab=\"pQTL position\",ylab=\"Gene position\") fig2d # We can save the figure for a browser independently htmlwidgets::saveWidget(fig2d,file=\"fig2d.html\") fig3d <- qtl3dplotly(cis.vs.trans,zmax=300,qtl.prefix=\"pQTL:\",xlab=\"pQTL position\",ylab=\"Gene position\") fig3d # We can save the figure for a browser independently htmlwidgets::saveWidget(fig3d,file=\"fig3d.html\") set_config(config(ssl_verifypeer = 0L)) mart <- useMart(biomart = \"ensembl\", dataset = \"hsapiens_gene_ensembl\") attrs <- c(\"hgnc_symbol\", \"chromosome_name\", \"start_position\", \"end_position\", \"band\") hgnc <- vector(\"character\",180) for(i in 1:180) {   v <- with(INF1_merge_cvt[i,],paste0(Chr,\":\",bp,\":\",bp))   g <- subset(getBM(attributes = attrs, filters=\"chromosomal_region\", values=v, mart=mart),!is.na(hgnc_symbol))   hgnc[i] <- paste(g[[\"hgnc_symbol\"]],collapse=\";\")   cat(i,g[[\"hgnc_symbol\"]],hgnc[i],\"\\n\") } save(hgnc,file=\"~/pQTLtools/tests/hgnc.rda\",compress=\"xz\") load(\"~/pQTLtools/tests/hgnc.rda\") INF1_merge_cvt <- within(INF1_merge_cvt,{   hgnc <- hgnc   hgnc[cis] <- p.gene[cis] })  with(INF1_merge_cvt, {   sentinels <- toGRanges(Chr,bp-1,bp,labels=hgnc)   cis.regions <- toGRanges(Chr,cis.start,cis.end)   loci <- toGRanges(Chr,Start,End)   colors <- c(\"red\",\"blue\")   seqlevelsStyle(sentinels) <- \"UCSC\"   kp <- plotKaryotype(genome=\"hg19\",chromosomes=levels(seqnames(sentinels)))   kpAddBaseNumbers(kp)   kpPlotRegions(kp, data=loci,r0=0.05,r1=0.15,border=\"black\")   kpPlotMarkers(kp, data=sentinels, labels=hgnc, text.orientation=\"vertical\",                 cex=0.5, y=0.3*seq_along(hgnc)/length(hgnc), srt=30,                 ignore.chromosome.ends=TRUE,                 adjust.label.position=TRUE, label.color=colors[2-cis], label.dist=0.002,                 cex.axis=3, cex.lab=3)   legend(\"bottomright\", bty=\"n\", pch=c(19,19), col=colors, pt.cex=0.4,          legend=c(\"cis\", \"trans\"), text.col=colors, cex=0.8, horiz=FALSE) # panel <- toGRanges(p.chr,p.start,p.end,labels=p.gene) # kpPlotLinks(kp, data=loci, data2=panel, col=colors[2-cis]) })"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"genomic-regions-enrichment-analysis","dir":"Articles","previous_headings":"","what":"Genomic regions enrichment analysis","title":"An Overview of pQTLtools","text":"now considerably easier Genomic Regions Enrichment Annotations Tool (GREAT). GREAT plots GREAT plots GREAT plots GREAT plots top terms Binomial p=1e-5 extracted follows, Table 2. GREAT IL12B-KITLG-TNFSF10 results","code":"post <- function(regions) {   job <- submitGreatJob(get(regions), species=\"hg19\", version=\"3.0.0\")   et <- getEnrichmentTables(job,download_by = 'tsv')   tb <- do.call('rbind',et)   write.table(tb,file=paste0(regions,\".tsv\"),quote=FALSE,row.names=FALSE,sep=\"\\t\")   invisible(list(job=job,tb=tb)) }  M <- 1e+6 INF1_merge <- read.delim(file.path(\"~\",\"pQTLtools\",\"tests\",\"INF1.merge\")) %>%               dplyr::mutate(chr=Chrom, start=POS-M, end=POS+M) %>%               dplyr::mutate(start=if_else(start<0,0,start)) %>%               dplyr::select(prot,MarkerName,chr,start,end) cistrans <- dplyr::select(INF1_merge, chr,start,end) %>%             dplyr::arrange(chr,start,end) %>%             dplyr::distinct() # All regions cistrans.post <- post(\"cistrans\") job <- with(cistrans.post,job) plotRegionGeneAssociationGraphs(job,type=c(1,3)) availableOntologies(job) # plot of the top term par(mfcol=c(3,1)) plotRegionGeneAssociationGraphs(job, ontology=\"GO Molecular Function\",                                 termID=\"GO:0005126\", type=c(1,3)) plotRegionGeneAssociationGraphs(job, ontology=\"GO Biological Process\",                                 termID=\"GO:0009611\", type=c(1,3)) plotRegionGeneAssociationGraphs(job, ontology=\"GO Cellular Component\",                                 termID=\"GO:0005615\", type=c(1,3)) # Specific regions IL12B <- dplyr::filter(INF1_merge,prot==\"IL.12B\") %>% select(chr,start,end) KITLG <- dplyr::filter(INF1_merge,prot==\"SCF\") %>% select(chr,start,end) TNFSF10 <- dplyr::filter(INF1_merge,prot==\"TRAIL\") %>% select(chr,start,end) tb_all <- data.frame() for (r in c(\"IL12B\",\"KITLG\",\"TNFSF10\")) {   r.post <- post(r)   tb_all <- rbind(tb_all,data.frame(gene=r,with(r.post,tb))) } #> Don't make too frequent requests. The time break is 60s. #> Please wait for 50s for the next request. #> The time break can be set by `request_interval` argument. #> Don't make too frequent requests. The time break is 60s. #> Please wait for 55s for the next request. #> The time break can be set by `request_interval` argument. #> Don't make too frequent requests. The time break is 60s. #> Please wait for 57s for the next request. #> The time break can be set by `request_interval` argument. write.table(tb_all,file=\"IL12B-KITLG-TNFSF10.tsv\",quote=FALSE,row.names=FALSE,sep=\"\\t\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"eqtl-catalog-for-colocalization-analysis","dir":"Articles","previous_headings":"","what":"eQTL Catalog for colocalization analysis","title":"An Overview of pQTLtools","text":"See example associated import_eQTLCatalogue. related function import_OpenGWAS used fetch data OpenGWAS. cis-pQTLs 1e+6 flanking regions considered data actually fetched files stored locally. first sentinel used, code executed. load data obtained code , Association plot Association plot Table 3. Colocalization results OPG-chr8:120081031_C_T function sumstats() obtained meta-analysis summary statistics (build 37 therefore lifted build 38) used colocalization analysis. output saved .RDS files. Note ftp_path changes eQTL Catalog local files.","code":"INF <- Sys.getenv(\"INF\") HPC_WORK <- Sys.getenv(\"HPC_WORK\") f <- file.path(system.file(package=\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\") chain <- rtracklayer::import.chain(f) gwasvcf::set_bcftools(file.path(HPC_WORK,\"bin\",\"bcftools\")) f <- file.path(system.file(package=\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_gtex.tsv\") tabix_paths <- read.delim(f, sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE) %>%                dplyr::as_tibble() f <- file.path(system.file(package=\"pQTLtools\"),\"eQTL-Catalogue\",                \"tabix_ftp_paths_gtex.tsv\") imported_tabix_paths <- within(read.delim(f, stringsAsFactors = FALSE) %>%                         dplyr::as_tibble(),       {ftp_path <- gsub(\"ftp://ftp.ebi.ac.uk/pub/databases/spot/eQTL/csv/GTEx_V8/ge\",                         paste0(\"~\",\"/rds/public_databases/GTEx/csv\"),ftp_path)}) M <- 1e6 sentinels <- subset(cis.vs.trans,cis)  liftRegion <- function(x,chain,flanking=1e6) {   gr <- with(x,GenomicRanges::GRanges(seqnames=chr,IRanges::IRanges(start,end))+flanking)   seqlevelsStyle(gr) <- \"UCSC\"   gr38 <- rtracklayer::liftOver(gr, chain)   chr <- colnames(table(seqnames(gr38)))   chr <- gsub(\"chr\",\"\",chr)   start <- min(unlist(start(gr38)))   end <- max(unlist(end(gr38)))   invisible(list(chr=chr,start=start,end=end,region=paste0(chr,\":\",start,\"-\",end))) }  sumstats <- function(prot,chr,region37) {   cat(\"GWAS sumstats\\n\")   f <- file.path(INF,\"METAL/gwas2vcf\",paste0(prot,\".vcf.gz\"))   gwas_stats <- gwasvcf::query_gwas(f, chrompos = region37)   gwas_stats <- gwasvcf::vcf_to_granges(gwas_stats) %>%                 keepSeqlevels(chr) %>%                 renameSeqlevels(paste0(\"chr\",chr))   gwas_stats_hg38 <- rtracklayer::liftOver(gwas_stats, chain) %>%                      unlist() %>%                      renameSeqlevels(chr) %>%                      dplyr::as_tibble() %>%                      dplyr::transmute(chromosome = seqnames,                                       position = start, REF, ALT, AF, ES, SE, LP, SS) %>%                      dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%                      dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%                      dplyr::group_by(id) %>%                      dplyr::mutate(row_count = n()) %>%                      dplyr::ungroup() %>%                      dplyr::filter(row_count == 1) }  coloc <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"c. GTEx_v8 imported eQTL datasets\\n\")   rnaseq_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%                dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id)   hdr <- file.path(system.file(package=\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list, ~safe_import(., region38,                              selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  sentinel <- sentinels[1,] isnpid <- within(gap::inv_chr_pos_a1_a2(sentinel[[\"SNP\"]]), {     chr <- gsub(\"chr\",\"\",chr)     pos <- as.integer(pos)     start <- pos-M     if (start<0) start <- 0     end <- pos+M }) chr <- with(isnpid,chr) region37 <- with(isnpid, paste0(chr,\":\",start,\"-\",end)) ensRegion37 <- with(subset(inf1,prot==sentinel[[\"prot\"]]),paste0(chr,\":\",start,\"-\",end)) region38 <- with(liftRegion(isnpid,chain),region) ensGene <- subset(inf1,prot==sentinel[[\"prot\"]])[[\"ensembl_gene_id\"]] ensRegion38 <- with(liftRegion(subset(inf1,prot==sentinel[[\"prot\"]]),chain),region) f <- file.path(\"~\",\"pQTLtools\",\"tests\",with(sentinel,paste0(prot,\"-\",gsub(\":\",\"_\",SNP),\".rda\"))) gwas_stats_hg38 <- sumstats(sentinel[[\"prot\"]],chr,region37) coloc_df_imported <- coloc(gwas_stats_hg38,ensGene,region38) save(gwas_stats_hg38,sentinel,coloc_df_imported,file=f) load(file.path(\"~\",\"pQTLtools\",\"tests\",\"OPG-chr8_120081031_C_T.rda\")) ggplot2::ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + ggplot2::theme_bw() + ggplot2::geom_point() + ggplot2::ggtitle(with(sentinel,paste0(prot,\"-\",SNP,\" association plot\"))) if (nrow(coloc_df_imported)>0) {    dplyr::arrange(coloc_df_imported, -PP.H4.abf)    ggplot(coloc_df_imported, aes(x = PP.H4.abf)) +    ggplot2::theme_bw() +    geom_histogram() +    ggtitle(with(sentinel,paste0(prot,\"-\",SNP,\" PP4 histogram\"))) +    xlab(\"PP4\") + ylab(\"Frequency\") } #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. ktitle <- with(sentinel,paste0(\"Table 3. Colocalization results for \",prot,\"-\",SNP)) kable(coloc_df_imported, caption=ktitle)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"pqtl-based-mendelian-randomisation-mr","dir":"Articles","previous_headings":"","what":"pQTL-based Mendelian Randomisation (MR)","title":"An Overview of pQTLtools","text":"function pqtlMR derived Zheng et al. (2020). attractive feature multiple pQTLs can used together conducting MR list outcomes MR-Base. generic applications run_TwoSampleMR() function can used. Table 4. ABO/LIFR variants CHD/FEV1 (instruments) Table 4. ABO/LIFR variants CHD/FEV1 (result) Table 4. ABO/LIFR variants CHD/FEV1 (single)","code":"f <- file.path(system.file(package=\"pQTLtools\"),\"tests\",\"Ins.csv\") ivs <- format_data(read.csv(f)) caption4 <- \"Table 4. ABO/LIFR variants and CHD/FEV1\" kable(ivs, caption=paste(caption4,\"(instruments)\")) ids <- c(\"ieu-a-7\",\"ebi-a-GCST007432\") pqtlMR(ivs, ids) #> API: public: http://gwas-api.mrcieu.ac.uk/ #> Extracting data for 2 SNP(s) from 2 GWAS(s) #> Harmonising ABO (dU3C0x) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) #> Harmonising LIFR (YmGdhW) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) #> Harmonising ABO (dU3C0x) and Coronary heart disease || id:ieu-a-7 (ieu-a-7) #> Harmonising LIFR (YmGdhW) and Coronary heart disease || id:ieu-a-7 (ieu-a-7) #> Analysing 'dU3C0x' on 'ebi-a-GCST007432' #> Analysing 'dU3C0x' on 'ieu-a-7' #> Analysing 'YmGdhW' on 'ebi-a-GCST007432' #> Analysing 'YmGdhW' on 'ieu-a-7' result <- read.delim(\"pQTL-combined-result.txt\",header=TRUE) kable(result,caption=paste(caption4, \"(result)\")) single <- read.delim(\"pQTL-combined-single.txt\",header=TRUE) kable(subset(single,!grepl(\"All\",SNP)), caption=paste(caption4, \"(single)\")) invisible(sapply(c(\"harmonise\",\"result\",\"single\"),                  function(x) unlink(paste0(\"pQTL-combined-\",x,\".txt\"))))"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"run_twosamplemr","dir":"Articles","previous_headings":"","what":"run_TwoSampleMR","title":"An Overview of pQTLtools","text":"function similiarity Dimou Tsilidis (2018). documentation example quoted , Two-sample MR Two-sample MR Two-sample MR Two-sample MR output contained individual .txt files, together scatter, forest, funnel leave-one-plots. Table 5. MMP.10 variants FEV1 (result) Table 5. MMP.10 variants FEV1 (heterogeneity) Table 5. MMP.10 variants FEV1 (pleiotropy) Table 5. MMP.10 variants FEV1 (single) Table 5. MMP.10 variants FEV1 (loo)","code":"outcomes <- \"ebi-a-GCST007432\" prot <- \"MMP.10\" type <- \"cis\" f <- paste0(prot,\"-\",type,\".mrx\") d <- read.table(file.path(system.file(package=\"pQTLtools\"),\"tests\",f),                 header=TRUE) exposure <- format_data(within(d,{P=10^logP}), phenotype_col=\"prot\", snp_col=\"rsid\",                         chr_col=\"Chromosome\", pos_col=\"Posistion\",                         effect_allele_col=\"Allele1\", other_allele_col=\"Allele2\",                         eaf_col=\"Freq1\", beta_col=\"Effect\", se_col=\"StdErr\",                         pval_col=\"P\", log_pval=FALSE,                         samplesize_col=\"N\") clump <- clump_data(exposure) #> Please look at vignettes for options on running this locally if you need to run many instances of this command. #> Clumping ZoHewj, 1106 variants, using EUR population reference #> Removing 1102 of 1106 variants due to LD with other variants or absence from LD reference panel outcome <- extract_outcome_data(snps=exposure$SNP,outcomes=outcomes) #> Extracting data for 1106 SNP(s) from 1 GWAS(s) #> Finding proxies for 155 SNPs in outcome ebi-a-GCST007432 #> Extracting data for 155 SNP(s) from 1 GWAS(s) harmonise <- harmonise_data(clump,outcome) #> Harmonising MMP.10 (ZoHewj) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) prefix <- paste(outcomes,prot,type,sep=\"-\") run_TwoSampleMR(harmonise, mr_plot=\"pQTLtools\", prefix=prefix) #> Analysing 'ZoHewj' on 'ebi-a-GCST007432'"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"mr-using-cis-trans-and-cistrans-pan-instruments","dir":"Articles","previous_headings":"","what":"MR using cis, trans and cis+trans (pan) instruments","title":"An Overview of pQTLtools","text":"illustrated IL-12B. Table 6. MR IL-12B variants MR cis, trans cis+trans variants IL-12B","code":"efo <- read.delim(file.path(\"~\",\"pQTLtools\",\"tests\",\"efo.txt\")) %>%        dplyr::mutate(x=1:n()) %>%        dplyr::select(MRBASEID,trait,x) d3 <- read.delim(file.path(\"~\",\"pQTLtools\",\"tests\",\"efo-result.txt\")) %>%       dplyr::filter(exposure==\"IL.12B\") %>%       dplyr::mutate(MRBASEID=unlist(lapply(strsplit(outcome,\"id:\"),\"[\",2)),y=b) %>%       dplyr::select(-outcome,-method) %>%       left_join(efo) %>%       dplyr::arrange(cistrans) #> Joining, by = \"MRBASEID\" kable(head(d3[c(\"MRBASEID\",\"trait\",\"cistrans\",\"nsnp\",\"b\",\"se\",\"pval\")],29),caption=\"Table 6. MR with IL-12B variants\") p <- ggplot2::ggplot(d3,aes(y = trait, x = y))+      ggplot2::theme_bw()+      ggplot2::geom_point()+      ggplot2::facet_wrap(~cistrans,ncol=3,scales=\"free_x\")+      ggplot2::geom_segment(aes(x = b-1.96*se, xend = b+1.96*se, yend = trait))+      ggplot2::geom_vline(lty=2, aes(xintercept=0), colour = 'red')+      ggplot2::xlab(\"Effect size\")+      ggplot2::ylab(\"\") p"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"gsmr-forest-plots","dir":"Articles","previous_headings":"","what":"GSMR forest plots","title":"An Overview of pQTLtools","text":"based GSMR results TNFB range immune-mediated traits, Table 7. GSMR results TNFB immune-mediated traits Forest plots based MR results TNFB","code":"mr_forestplot(tnfb,colgap.forest.left=\"0.05cm\", fontsize=14,               leftcols=c(\"studlab\"), leftlabs=c(\"Outcome\"),               plotwidth=\"5inch\", sm=\"OR\", sortvar=tnfb[[\"Effect\"]],               rightcols=c(\"effect\",\"ci\",\"pval\"), rightlabs=c(\"OR\",\"95%CI\",\"GSMR P\"),               digits=3, digits.pval=2, scientific.pval=TRUE,               common=FALSE, random=FALSE, print.I2=FALSE, print.pval.Q=FALSE, print.tau2=FALSE,               addrow=TRUE, backtransf=TRUE, spacing=1.6) #> Loading required namespace: meta"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"literature-on-pqtls","dir":"Articles","previous_headings":"","what":"Literature on pQTLs","title":"An Overview of pQTLtools","text":"identified Sun et al. (2018) Suhre, McCarthy, Schwenk (2020) included EndNote libraries now part pQTLdata package.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"uniprot-ids","dir":"Articles","previous_headings":"","what":"UniProt IDs","title":"An Overview of pQTLtools","text":"function uniprot2ids converts UniProt IDs others.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"mendelian-randomization-analysis","dir":"Articles","previous_headings":"","what":"Mendelian randomization analysis","title":"A snakemake showcase","text":"required files available snakemake subdirectory inside installed package inst/snakemake directory source package. Steps set environment outlined , MendelianRandomization v0.6.0 used together bug fix workflow/r/MR_functions.R. workflow heavily edited simplicity, efficiency generality. Currently input/ contains data CD40, OPG heart failures – imitate additional trait, HF statistics duplicated HF2. code chunks gives output/MR_HF.csv (MR results) Obs_HF.csv (meta-analysis results based observational studies) similarly HF2. Figure 1. Dependency graph rules Figure 2. Directed Acyclic Graph (DAG)","code":"module load miniconda3/4.5.1 export csd3path=/rds/project/jmmh2/rds-jmmh2-projects/olink_proteomics/scallop source ${csd3path}/miniconda37/bin/activate # 1. a dry run (-n). snakemake --dry-run # 2. run (-c on [all] available cores without --use-conda option as local packages are more up-to-date) snakemake --cores # 3. contrast with original output for OPG # grep OPG output/MR_HF.csv | diff - <(grep OPG ${csd3path}/cvd1-hf/results/res_MR_aggregate.csv) # 4. Some ancillary work in place. snakemake --rulegraph | dot -Tsvg > output/rulegraph.svg snakemake --dag | dot -Tsvg > output/dag.svg"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"A snakemake showcase","text":"introduction, https://ucdavis-bioinformatics-training.github.io/2020-Genome_Assembly_Workshop/snakemake/snakemake_intro. csd3, https://cambridge-ceu.github.io/csd3/applications/snakemake.html. snakemake--R, https://github.com/fritzbayer/snakemake--R. snakemake-workflows, https://github.com/snakemake-workflows/. Edwards D (2022). Plant Bioinformatics-Methods Protocols, 3e. https://link.springer.com/book/10.1007/978-1-0716-2067-0. Chapter 11; Chapter 9.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"github","dir":"Articles","previous_headings":"Appendix: Installation","what":"GitHub","title":"A snakemake showcase","text":"GitHub (documentation, stable) Note following source instead conda used activate.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"anaconda3","dir":"Articles","previous_headings":"Appendix: Installation","what":"Anaconda3","title":"A snakemake showcase","text":"https://www.anaconda.com/ remove option useful resolving compatibility issues.","code":"wget https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh bash Anaconda3-2020.07-Linux-x86_64.sh # snakemake conda create -n anaconda conda remove -n anaconda snakemake conda install -c bioconda snakemake source activate snakemake conda update -n anaconda snakemake"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"miniconda3","dir":"Articles","previous_headings":"Appendix: Installation","what":"Miniconda3","title":"A snakemake showcase","text":"https://docs.conda.io/en/latest/miniconda.html","code":"wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh bash Miniconda3-latest-Linux-x86_64.sh conda config --add channels bioconda conda config --add channels conda-forge conda create -y --name miniconda python=3.7 source activate miniconda conda install -c bioconda fastqc"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"a-slurm-example","dir":"Articles","previous_headings":"Appendix: Installation","what":"A SLURM example","title":"A snakemake showcase","text":"Caprion project, https://jinghuazhao.github.io/Caprion/, experiments workflow/config.yaml follows, whose driver routine follows, use --unlock necessary. specification can alternatively done via JSON. permenant configuration can also done. call conda slurm, respectively.","code":"cluster:   mkdir -p logs/{rule} &&   sbatch     --account={resources.account}     --partition={resources.partition}     --qos={resources.qos}     --cpus-per-task={threads}     --mem={resources.mem_mb}     --time={resources.runtime}     --job-name={rule}-{wildcards}     --error=logs/{rule}/{wildcards}-prune.err     --output=logs/{rule}/{wildcards}-prune.out default-resources:   - account=CARDIO-SL0-CPU   - partition=cardio   - qos=cardio   - mem_mb=10000   - runtime='12:00:00'   - threads=1 restart-times: 3 max-jobs-per-second: 10 max-status-checks-per-second: 1 local-cores: 1 latency-wait: 60 jobs: 1 keep-going: True rerun-incomplete: True printshellcmds: True scheduler: greedy use-conda: True # module load miniconda3/4.5.1 export csd3path=/rds/project/jmmh2/rds-jmmh2-projects/olink_proteomics/scallop/miniconda37 source ${csd3path}/bin/activate # snakemake -s workflow/rules/cojo.smk -j1 snakemake -s workflow/rules/report.smk -j1 snakemake -s workflow/rules/cojo.smk -c --profile workflow # all users # sudo ln -s /usr/local/Cluster-Apps/miniconda3/4.5.1/etc/profile.d/conda.sh /etc/profile.d/conda.sh # current user echo \". /usr/local/Cluster-Apps/miniconda3/4.5.1/etc/profile.d/conda.sh\" >> ~/.bashrc # conda's base (root) environment on PATH conda activate # the base environment on PATH permanently echo \"conda activate\" >> ~/.bashrc # A user profile mkdir $HOME/.config/Snakemake/slurm cp slurm.yaml $HOME/.config/Snakemake/slurm touch $HOME/.config/Snakemake/slurm/slurm.yaml snakemake --j4 --use-conda snakemake --profile slurm"},{"path":"https://jinghuazhao.github.io/pQTLtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jing Hua Zhao. Author, maintainer.            0000-0003-4930-3582 Jimmy Peters. Author.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhao J, Peters J (2023). pQTLtools: Protein Quantitative Trait Locus Toolkit. R package version 0.2, https://github.com/jinghuazhao/pQTLtools.","code":"@Manual{,   title = {pQTLtools: A Protein Quantitative Trait Locus Toolkit},   author = {Jing Hua Zhao and Jimmy Peters},   year = {2023},   note = {R package version 0.2},   url = {https://github.com/jinghuazhao/pQTLtools}, }"},{"path":"https://jinghuazhao.github.io/pQTLtools/index.html","id":"a-protein-quantitative-trait-locus-toolkit","dir":"","previous_headings":"","what":"A protein Quantitative Trait Locus toolkit","title":"Protein Quantitative Trait Locus tools","text":"seeds collection data utilities pQTL analysis. early stage, repository contains 1. Articles linking functions cis/trans classification, 2d Manhattan plots, 2d/3d-plotly plots, forest plots among others available gap; 2. Query genes, regions, SNPs via PhenoScanner, adding functionality check replication across platforms; 3. Downstream analysis colocalization, pQTL-Mendelian Randomization via TwoSampleMR, linkage UniProt IDs resources; 4. Bioconductor notes showcase snakemake workflow. Aspects involving data ongoing project simplified use files pQTLtools/testswhich can made public appropriate.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Protein Quantitative Trait Locus tools","text":"latest version pQTLtools can installed usual: Install R Install GitHub repository Dependencies detailed DECRIPTION file package GitHub.","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\") remotes::install_github(\"jinghuazhao/pQTLdata\") git clone https://github.com/jinghuazhao/pQTLdata R CMD INSTALL pQTLdata"},{"path":"https://jinghuazhao.github.io/pQTLtools/index.html","id":"a-summary-of-functions","dir":"","previous_headings":"","what":"A summary of functions","title":"Protein Quantitative Trait Locus tools","text":"can seen R ","code":"library(help=pQTLtools) library(pQTLtools) ?pQTLtools"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/blank_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — blank_plot","title":"FUNCTION_TITLE — blank_plot","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/blank_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — blank_plot","text":"","code":"blank_plot(message)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/blank_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — blank_plot","text":"message PARAM_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/blank_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — blank_plot","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/blank_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FUNCTION_TITLE — blank_plot","text":"DETAILS","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/clump_data.args.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — clump_data.args","title":"FUNCTION_TITLE — clump_data.args","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/clump_data.args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — clump_data.args","text":"","code":"clump_data.args(   dat = NULL,   clump_kb = 10000,   clump_r2 = 0.001,   clump_p1 = 1,   clump_p2 = 1,   pop = \"EUR\" )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/clump_data.args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — clump_data.args","text":"dat PARAM_DESCRIPTION, Default: NULL clump_kb PARAM_DESCRIPTION, Default: 10000 clump_r2 PARAM_DESCRIPTION, Default: 0.001 clump_p1 PARAM_DESCRIPTION, Default: 1 clump_p2 PARAM_DESCRIPTION, Default: 1 pop PARAM_DESCRIPTION, Default: 'EUR'","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/clump_data.args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — clump_data.args","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/clump_data.args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FUNCTION_TITLE — clump_data.args","text":"DETAILS","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/extract_outcome_data.args.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — extract_outcome_data.args","title":"FUNCTION_TITLE — extract_outcome_data.args","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/extract_outcome_data.args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — extract_outcome_data.args","text":"","code":"extract_outcome_data.args(   snps = NULL,   outcomes = NULL,   proxies = TRUE,   rsq = 0.8,   align_alleles = 1,   palindromes = 1,   maf_threshold = 0.3,   access_token = ieugwasr::check_access_token(),   splitsize = 10000,   proxy_splitsize = 500 )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/extract_outcome_data.args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — extract_outcome_data.args","text":"snps PARAM_DESCRIPTION, Default: NULL outcomes PARAM_DESCRIPTION, Default: NULL proxies PARAM_DESCRIPTION, Default: TRUE rsq PARAM_DESCRIPTION, Default: 0.8 align_alleles PARAM_DESCRIPTION, Default: 1 palindromes PARAM_DESCRIPTION, Default: 1 maf_threshold PARAM_DESCRIPTION, Default: 0.3 access_token PARAM_DESCRIPTION, Default: ieugwasr::check_access_token() splitsize PARAM_DESCRIPTION, Default: 10000 proxy_splitsize PARAM_DESCRIPTION, Default: 500","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/extract_outcome_data.args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — extract_outcome_data.args","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/extract_outcome_data.args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FUNCTION_TITLE — extract_outcome_data.args","text":"DETAILS","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/format_data.args.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — format_data.args","title":"FUNCTION_TITLE — format_data.args","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/format_data.args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — format_data.args","text":"","code":"format_data.args(   dat = NULL,   type = \"exposure\",   snps = NULL,   header = TRUE,   phenotype_col = \"Phenotype\",   snp_col = \"SNP\",   beta_col = \"beta\",   se_col = \"se\",   eaf_col = \"eaf\",   effect_allele_col = \"effect_allele\",   other_allele_col = \"other_allele\",   pval_col = \"pval\",   units_col = \"units\",   ncase_col = \"ncase\",   ncontrol_col = \"ncontrol\",   samplesize_col = \"samplesize\",   gene_col = \"gene\",   id_col = \"id\",   min_pval = 1e-200,   z_col = \"z\",   info_col = \"info\",   chr_col = \"chr\",   pos_col = \"pos\",   log_pval = FALSE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/format_data.args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — format_data.args","text":"dat PARAM_DESCRIPTION, Default: NULL type PARAM_DESCRIPTION, Default: 'exposure' snps PARAM_DESCRIPTION, Default: NULL header PARAM_DESCRIPTION, Default: TRUE phenotype_col PARAM_DESCRIPTION, Default: 'Phenotype' snp_col PARAM_DESCRIPTION, Default: 'SNP' beta_col PARAM_DESCRIPTION, Default: 'beta' se_col PARAM_DESCRIPTION, Default: 'se' eaf_col PARAM_DESCRIPTION, Default: 'eaf' effect_allele_col PARAM_DESCRIPTION, Default: 'effect_allele' other_allele_col PARAM_DESCRIPTION, Default: 'other_allele' pval_col PARAM_DESCRIPTION, Default: 'pval' units_col PARAM_DESCRIPTION, Default: 'units' ncase_col PARAM_DESCRIPTION, Default: 'ncase' ncontrol_col PARAM_DESCRIPTION, Default: 'ncontrol' samplesize_col PARAM_DESCRIPTION, Default: 'samplesize' gene_col PARAM_DESCRIPTION, Default: 'gene' id_col PARAM_DESCRIPTION, Default: 'id' min_pval PARAM_DESCRIPTION, Default: 1e-200 z_col PARAM_DESCRIPTION, Default: 'z' info_col PARAM_DESCRIPTION, Default: 'info' chr_col PARAM_DESCRIPTION, Default: 'chr' pos_col PARAM_DESCRIPTION, Default: 'pos' log_pval PARAM_DESCRIPTION, Default: FALSE","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/format_data.args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — format_data.args","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":null,"dir":"Reference","previous_headings":"","what":"phenoscanner genequeries in batches — genequeries","title":"phenoscanner genequeries in batches — genequeries","text":"R/phenoscanner allows certain number items supplied. simple function return large number calls batches well generating SNPIDs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phenoscanner genequeries in batches — genequeries","text":"","code":"genequeries(   genelist,   catalogue = \"pQTL\",   proxies = \"EUR\",   p = 5e-08,   r2 = 0.8,   build = 37,   wait = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phenoscanner genequeries in batches — genequeries","text":"genelist list SNPs. catalogue \"None\",\"eQTL\",\"mQTL\",\"methQTL\",\"pQTL\",\"GWAS\". proxies \"None\", \"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\". p p value threshold. r2 r2 LD. build 37, 38. wait flag wait 1hr every 50 genes.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phenoscanner genequeries in batches — genequeries","text":"returned value list containing genes results.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"phenoscanner genequeries in batches — genequeries","text":"Batches generated queries combined one.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"phenoscanner genequeries in batches — genequeries","text":"Sun BB, et al. (2018). Genomic atlas human plasma proteome. Nature 558: 73-79.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phenoscanner genequeries in batches — genequeries","text":"","code":"if (FALSE) { # single gene   genequeries(\"TNFRSF11B\") }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":null,"dir":"Reference","previous_headings":"","what":"Limit of detection analysis — get.prop.below.LLOD","title":"Limit of detection analysis — get.prop.below.LLOD","text":"function obtains lower limit detection proteomic analysis.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limit of detection analysis — get.prop.below.LLOD","text":"","code":"get.prop.below.LLOD(eset, flagged = \"OUT\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limit of detection analysis — get.prop.below.LLOD","text":"eset ExpressionSet object. flagged flag indicator sample exclusion.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limit of detection analysis — get.prop.below.LLOD","text":"updated ExpressionSet object.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Limit of detection analysis — get.prop.below.LLOD","text":"James Peters","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limit of detection analysis — get.prop.below.LLOD","text":"","code":"suppressMessages(library(Biobase)) data(sample.ExpressionSet) exampleSet <- sample.ExpressionSet fData(exampleSet) #> data frame with 0 columns and 500 rows fData(exampleSet)$lod.max <- apply(exprs(exampleSet),1,quantile,runif(nrow(exampleSet))) lod <- get.prop.below.LLOD(exampleSet) x <- dplyr::arrange(fData(lod),desc(pc.belowLOD.new)) knitr::kable(head(lod)) #>  #>  #> |   | AFFX.MurIL2_at| AFFX.MurIL10_at| AFFX.MurIL4_at| AFFX.MurFAS_at| AFFX.BioB.5_at| AFFX.BioB.M_at|sex    |type    | score| #> |:--|--------------:|---------------:|--------------:|--------------:|--------------:|--------------:|:------|:-------|-----:| #> |A  |       192.7420|        97.13700|       45.81920|       22.54450|        96.7875|        89.0730|Female |Control |  0.75| #> |B  |        85.7533|       126.19600|        8.83135|        3.60093|        30.4380|        25.8461|Male   |Case    |  0.40| #> |C  |       176.7570|        77.92160|       33.06320|       14.68830|        46.1271|        57.2033|Male   |Control |  0.73| #> |D  |       135.5750|        93.37130|       28.70720|       12.33970|        70.9319|        69.9766|Male   |Case    |  0.42| #> |E  |        64.4939|        24.39860|        5.94492|       36.86630|        56.1744|        49.5822|Female |Case    |  0.93| #> |F  |        76.3569|        85.50880|       28.29250|       11.25680|        42.6756|        26.1262|Male   |Control |  0.22| #> |G  |       160.5050|        98.90860|       30.96940|       23.00340|        86.5156|        75.0083|Male   |Case    |  0.96| #> |H  |        65.9631|        81.69320|       14.79230|       16.21340|        30.7927|        42.3352|Male   |Case    |  0.79| #> |I  |        56.9039|        97.80150|       14.23990|       12.03750|        19.7183|        41.1207|Female |Case    |  0.37| #> |J  |       135.6080|        90.48380|       34.48740|        4.54978|        46.3520|        91.5307|Male   |Control |  0.63| #> |K  |        63.4432|        70.57330|       20.35210|        8.51782|        39.1326|        39.9136|Male   |Case    |  0.26| #> |L  |        78.2126|        94.54180|       14.15540|       27.28520|        41.7698|        49.8397|Female |Control |  0.36| #> |M  |        83.0943|        75.34550|       20.62510|       10.16160|        80.2197|        63.4794|Male   |Case    |  0.41| #> |N  |        89.3372|        68.58270|       15.92310|       20.24880|        36.4903|        24.7007|Male   |Case    |  0.80| #> |O  |        91.0615|        87.40500|       20.15790|       15.78490|        36.4021|        47.4641|Female |Case    |  0.10| #> |P  |        95.9377|        84.45810|       27.81390|       14.32760|        35.3054|        47.3578|Female |Control |  0.41| #> |Q  |       179.8450|        87.68060|       32.79110|       15.94880|        58.6239|        58.1331|Female |Case    |  0.16| #> |R  |       152.4670|       108.03200|       33.52920|       14.67530|       114.0620|       104.1220|Male   |Control |  0.72| #> |S  |       180.8340|       134.26300|       19.81720|       -7.91911|        93.4402|       115.8310|Male   |Case    |  0.17| #> |T  |        85.4146|        91.40310|       20.41900|       12.88750|        22.5168|        58.1224|Female |Case    |  0.74| #> |U  |       157.9890|        -8.68811|       26.87200|       11.91860|        48.6462|        73.4221|Male   |Control |  0.35| #> |V  |       146.8000|        85.02120|       31.14880|       12.83240|        90.2215|        64.6066|Female |Control |  0.77| #> |W  |        93.8829|        79.29980|       22.34200|       11.13900|        42.0053|        40.3068|Male   |Control |  0.27| #> |X  |       103.8550|        71.65520|       19.01350|        7.55564|        57.5738|        41.8209|Male   |Control |  0.98| #> |Y  |        64.4340|        64.23690|       12.16860|       19.98490|        44.8216|        46.1087|Female |Case    |  0.94| #> |Z  |       175.6150|        78.70680|       17.37800|        8.96849|        61.7044|        49.4122|Female |Case    |  0.32| plot(x[,2], main=\"Random quantile cut off\", ylab=\"<lod%\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/harmonise_data.args.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — harmonise_data.args","title":"FUNCTION_TITLE — harmonise_data.args","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/harmonise_data.args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — harmonise_data.args","text":"","code":"harmonise_data.args(exposure_dat = NULL, outcome_dat = NULL, action = 2)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/harmonise_data.args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — harmonise_data.args","text":"exposure_dat PARAM_DESCRIPTION, Default: NULL outcome_dat PARAM_DESCRIPTION, Default: NULL action PARAM_DESCRIPTION, Default: 2","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/harmonise_data.args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — harmonise_data.args","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":null,"dir":"Reference","previous_headings":"","what":"Import OpenGWAS — import_OpenGWAS","title":"Import OpenGWAS — import_OpenGWAS","text":"function imports OpenGWAS.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import OpenGWAS — import_OpenGWAS","text":"","code":"import_OpenGWAS(   opengwas_id,   region,   method = \"TwoSampleMR\",   verbose = TRUE,   ... )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import OpenGWAS — import_OpenGWAS","text":"opengwas_id OpenGWAS id. region chr:start-end. method Method extract GWAS data. verbose Extra information. ... Parameters pass TwoSampleMR outcome extraction.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import OpenGWAS — import_OpenGWAS","text":"summary statistic object. method=\"TwoSampleMR\" result TwoSampleMR outcome format.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import OpenGWAS — import_OpenGWAS","text":"function derived SCALLOP/INF work. default, method=\"TwoSampleMR\" work cases also controls variant filtering. VCF file known exist, one can specify method=\"gwasvcf\" extract chunk data.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import OpenGWAS — import_OpenGWAS","text":"Adapted function.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import OpenGWAS — import_OpenGWAS","text":"Lyon M, Andrews SJ, Elsworth B, Gaunt TR, Hemani G, Marcora E. variant call format provides efficient robust storage GWAS summary statistics. bioRxiv 2020.05.29.115824; doi: https://doi.org/10.1101/2020.05.29.115824","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import OpenGWAS — import_OpenGWAS","text":"","code":"if (FALSE) { options(width=200) library(pQTLtools) # method=\"TwoSampleMR\" # GSMR data preparation for Crohn's disease in the LTA region opengwas_id <- \"ebi-a-GCST004132\" region <- \"6:30539831-32542101\" n <- 2/(1/12194 + 1/28072) require(dplyr) od <- import_OpenGWAS(opengwas_id,region) %>%       dplyr::distinct() %>%       dplyr::mutate(snpid=gap::chr_pos_a1_a2(chr,pos,effect_allele.outcome,other_allele.outcome),                     effect_allele.outcome=toupper(effect_allele.outcome),                     other_allele.outcome=toupper(other_allele.outcome)) %>%       dplyr::select(snpid,effect_allele.outcome,other_allele.outcome,eaf.outcome,                     beta.outcome,se.outcome,pval.outcome,samplesize.outcome) %>%       setNames(c(\"SNP\",\"A1\",\"A2\",\"freq\",\"b\",\"se\",\"p\",\"N\")) %>%       dplyr::group_by(SNP) %>%       dplyr::slice(which.min(p)) %>%       data.frame() od[is.na(od$N),\"N\"] <- n write.table(od,quote=FALSE,row.names=FALSE) # method=\"gwasvcf\" gwasvcf::set_bcftools(path=file.path(HPC_WORK,\"bin\",\"bcftools\")) # MPV ARHGEF3 region opengwas_id <- \"ebi-a-GCST004599\" region <- \"3:56649749-57049749\" mpv_ARHGEF3 <- import_OpenGWAS(opengwas_id,region,method=\"gwasvcf\") # all immune-related INF <- Sys.getenv(\"INF\") HPC_WORK <- Sys.getenv(\"HPC_WORK\") opengwas_ids <- scan(file.path(INF,\"OpenGWAS\",\"ieu.list\"),what=\"\") unavail <- c(\"ieu-b-18\",\"finn-a-M13_SLE\",\"finn-a-D3_SARCOIDOSIS\") opengwas_ids <- subset(opengwas_ids,!opengwas_ids %in% unavail) region <- \"1:100-2000000\" summary_list = purrr::map(opengwas_ids[1:2], ~import_OpenGWAS(., region, method=\"gwasvcf\")) }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":null,"dir":"Reference","previous_headings":"","what":"Import eQTL Catalogue — import_eQTLCatalogue","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"adopted function imports eQTL Catalogue.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"","code":"import_eQTLCatalogue(   ftp_path,   region,   selected_gene_id,   column_names,   verbose = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"ftp_path URL. region chr:start-end. selected_gene_id Ensembl gene ID. column_names Column names dataset. verbose Extra information.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"summary statistic object.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"function based eQTL-Catalogue-resources.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"Adapted function.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"Kerimov N., et al. (2020). \"eQTL Catalogue: compendium uniformly processed human gene expression splicing QTLs\", bioRxiv: 2020.2001.2029.924266, https://www.ebi.ac.uk/eqtl/.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"","code":"if (FALSE) { library(pQTLtools) invisible(lapply(c(\"dplyr\", \"ggplot2\", \"readr\", \"coloc\", \"GenomicRanges\",\"seqminer\"),                  require, character.only = TRUE)) ftp <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths.tsv\") tabix_paths <- read.delim(ftp, sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE) %>%                dplyr::as_tibble() tfpi <- file.path(find.package(\"pQTLtools\", lib.loc=.libPaths()),\"eQTL-Catalogue\",                  \"tabix_ftp_paths_gtex.tsv\") imported_tabix_paths <- read.delim(tfpi, sep = \"\\t\", stringsAsFactors = FALSE) %>%                         dplyr::as_tibble()  # MPV association at the ARHGEF3 locus region <- \"3:56615721-57015721\" ensGene <- \"ENSG00000163947\" platelet_df <- dplyr::filter(tabix_paths, study == \"CEDAR\", tissue_label == \"platelet\") hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\") column_names <- names(read.delim(hdr)) summary_stats <- import_eQTLCatalogue(platelet_df$ftp_path, region,                                       selected_gene_id = ensGene, column_names) summary_stats ggplot(summary_stats, aes(x = position, y = -log(pvalue, 10))) + geom_point() # gwasvcf::set_bcftools(path=file.path(HPC_WORK,\"bin\",\"bcftools\")) # GWAS sumstat from the same region # manually download and parse with gwasvcf # wget https://gwas.mrcieu.ac.uk/files/ebi-a-GCST004599/ebi-a-GCST004599.vcf.gz # wget https://gwas.mrcieu.ac.uk/files/ebi-a-GCST004599/ebi-a-GCST004599.vcf.gz.tbi # gwas_stats <- gwasvcf::query_gwas(\"ebi-a-GCST004599.vcf.gz\", chrompos = \"3:56649749-57049749\") # gwas_stats <- gwasvcf::vcf_to_granges(gwas_stats) %>%                 keepSeqlevels(\"3\") %>%                 renameSeqlevels(\"chr3\") # via import_OpenGWAS opengwas_id <- \"ebi-a-GCST004599\" region <- \"3:56649749-57049749\" gwas_stats <- import_OpenGWAS(opengwas_id,region) %>%               keepSeqlevels(\"3\") %>%               renameSeqlevels(\"chr3\") f <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\") chain <- rtracklayer::import.chain(f) gwas_stats_hg38 <- rtracklayer::liftOver(gwas_stats, chain) %>%   unlist() %>%   renameSeqlevels(\"3\") %>%   dplyr::as_tibble() %>%   dplyr::transmute(chromosome = seqnames,                    position = start, REF, ALT, AF, ES, SE, LP, SS) %>%   dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%   dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%   dplyr::group_by(id) %>%   dplyr::mutate(row_count = n()) %>%   dplyr::ungroup() %>%   dplyr::filter(row_count == 1) ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point() # Colocalisation res <- run_coloc(summary_stats, gwas_stats_hg38)  # a. all other eQTL datasets microarray_df <- dplyr::filter(tabix_paths, quant_method == \"microarray\") %>%                  dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\")) ftp_path_list <- setNames(as.list(microarray_df$ftp_path), microarray_df$qtl_id[1]) hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\") column_names <- names(read.delim(hdr)) summary_list <- purrr::map(ftp_path_list, ~import_eQTLCatalogue(., region,                            selected_gene_id = ensGene, column_names)) coloc_df_microarray <- purrr::map_df(summary_list, ~run_coloc(., gwas_stats_hg38),                                      .id = \"qtl_id\")  # b. Uniformly processed RNA-seq datasets rnaseq_df <- dplyr::filter(tabix_paths, quant_method == \"ge\") %>%              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\")) ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id) hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\") column_names <- names(read.delim(hdr)) safe_import <- purrr::safely(import_eQTLCatalogue) summary_list <- purrr::map(ftp_path_list, ~safe_import(., region,                            selected_gene_id = ensGene, column_names)) result_list <- purrr::map(summary_list, ~.$result) result_list <- result_list[!unlist(purrr::map(result_list, is.null))] coloc_df_rnaseq <- purrr::map_df(result_list, ~run_coloc(., gwas_stats_hg38),                                  .id = \"qtl_id\")  # c. GTEx_v8 imported eQTL datasets rnaseq_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\")) ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id) hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\") column_names <- names(read.delim(hdr)) safe_import <- purrr::safely(import_eQTLCatalogue) summary_list <- purrr::map(ftp_path_list, ~safe_import(., region,                            selected_gene_id = ensGene, column_names)) result_list <- purrr::map(summary_list, ~.$result) result_list <- result_list[!unlist(purrr::map(result_list, is.null))] result_filtered <- purrr::map(result_list, ~dplyr::filter(., !is.na(se))) coloc_df_imported <- purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38),                                    .id = \"qtl_id\")  coloc_df = dplyr::bind_rows(coloc_df_microarray, coloc_df_rnaseq, coloc_df_imported) dplyr::arrange(coloc_df, -PP.H4.abf) ggplot(coloc_df, aes(x = PP.H4.abf)) + geom_histogram() }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":null,"dir":"Reference","previous_headings":"","what":"A call to expressionSet class — make_ExpressionSet","title":"A call to expressionSet class — make_ExpressionSet","text":"really direct call Bioconductor/Biobase class.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A call to expressionSet class — make_ExpressionSet","text":"","code":"make_ExpressionSet(   assayData,   phenoData = Biobase::annotatedDataFrameFrom(assayData, byrow = FALSE),   featureData = Biobase::annotatedDataFrameFrom(assayData, byrow = TRUE),   experimentData = Biobase::MIAME(),   annotation = character(),   protocolData = Biobase::annotatedDataFrameFrom(assayData, byrow = FALSE),   ... )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A call to expressionSet class — make_ExpressionSet","text":"assayData Expression data. phenoData Phenotype. featureData featureData. experimentData Information data source. annotation Annotation information. protocolData protocol information. ... options.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A call to expressionSet class — make_ExpressionSet","text":"ExpressionSet object.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A call to expressionSet class — make_ExpressionSet","text":"explicit call make easier handle proteomic data downstream analyses.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A call to expressionSet class — make_ExpressionSet","text":"Adapted Bioconductor/Biobase following number proteomic pilot studies.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A call to expressionSet class — make_ExpressionSet","text":"","code":"dataDirectory <- system.file(\"extdata\", package=\"Biobase\") exprsFile <- file.path(dataDirectory, \"exprsData.txt\") exprs <- as.matrix(read.table(exprsFile, header=TRUE, sep=\"\\t\", row.names=1, as.is=TRUE)) pDataFile <- file.path(dataDirectory, \"pData.txt\") pData <- read.table(pDataFile, row.names=1, header=TRUE, sep=\"\\t\") all(rownames(pData)==colnames(exprs)) #> [1] TRUE metadata <- data.frame(labelDescription=                        c(\"Patient gender\",                          \"Case/control status\",                          \"Tumor progress on XYZ scale\"),                        row.names=c(\"gender\", \"type\", \"score\")) suppressMessages(library(Biobase)) suppressMessages(library(pQTLtools)) phenoData <- new(\"AnnotatedDataFrame\", data=pData, varMetadata=metadata) experimentData <- new(\"MIAME\",   name=\"Pierre Fermat\",   lab=\"Francis Galton Lab\",   contact=\"pfermat@lab.not.exist\",   title=\"Smoking-Cancer Experiment\",   abstract=\"An example ExpressionSet\",   url=\"www.lab.not.exist\",   other=list(notes=\"Created from text files\")) exampleSet <- make_ExpressionSet(exprs,phenoData,experimentData=experimentData,                                  annotation=\"hgu95av2\") data(sample.ExpressionSet) identical(exampleSet,sample.ExpressionSet) #> [1] FALSE invisible(esApply(exampleSet,2,hist))                           lm(score~gender+X31739_at,data=exampleSet) #>  #> Call: #> lm(formula = score ~ gender + X31739_at, data = exampleSet) #>  #> Coefficients: #> (Intercept)   genderMale    X31739_at   #>   0.6006673    0.0108515   -0.0003012   #>"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_forest_plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"MR forest plot — mr_forest_plot2","title":"MR forest plot — mr_forest_plot2","text":"Adaptation TwoSampleMR::mr_forest_plot()","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_forest_plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MR forest plot — mr_forest_plot2","text":"","code":"mr_forest_plot2(singlesnp_results, exponentiate = FALSE, alpha = 0.05)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_forest_plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MR forest plot — mr_forest_plot2","text":"singlesnp_results Results based single variants. exponentiate Logic variable indicate exponentiation, Default: FALSE. alpha Confidence level, Default: 0.05.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_forest_plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MR forest plot — mr_forest_plot2","text":"graphic object.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_funnel_plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"MR funnel plot — mr_funnel_plot2","title":"MR funnel plot — mr_funnel_plot2","text":"Adaptation TwoSampleMR::mr_funnel_plot()","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_funnel_plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MR funnel plot — mr_funnel_plot2","text":"","code":"mr_funnel_plot2(singlesnp_results)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_funnel_plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MR funnel plot — mr_funnel_plot2","text":"singlesnp_results Results based single variants.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_funnel_plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MR funnel plot — mr_funnel_plot2","text":"graphic object.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_leaveoneout_plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"MR leave-one-out analysis — mr_leaveoneout_plot2","title":"MR leave-one-out analysis — mr_leaveoneout_plot2","text":"Adapatation TwoSampleMR::mr_leaveoneout_plot()","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_leaveoneout_plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MR leave-one-out analysis — mr_leaveoneout_plot2","text":"","code":"mr_leaveoneout_plot2(leaveoneout_results, alpha = 0.05)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_leaveoneout_plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MR leave-one-out analysis — mr_leaveoneout_plot2","text":"leaveoneout_results Results leave-one-analysis. alpha PARAM_DESCRIPTION, Default: 0.05.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_leaveoneout_plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MR leave-one-out analysis — mr_leaveoneout_plot2","text":"graphic object.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_scatter_plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"MR scatter plot — mr_scatter_plot2","title":"MR scatter plot — mr_scatter_plot2","text":"Adaptation TwoSampleMR::mr_scatter_plot()","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_scatter_plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MR scatter plot — mr_scatter_plot2","text":"","code":"mr_scatter_plot2(mr_results, dat, alpha = 0.05)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_scatter_plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MR scatter plot — mr_scatter_plot2","text":"mr_results MR results. dat data. alpha Confidentce level, Default: 0.05.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_scatter_plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MR scatter plot — mr_scatter_plot2","text":"graphic object.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/novelty_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Locus novelty check — novelty_check","title":"Locus novelty check — novelty_check","text":"function checks novelty list loci pQTLs published list. known_loci query_loci variables: chr, pos, uniprot, rsid, prot.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/novelty_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locus novelty check — novelty_check","text":"","code":"novelty_check(   known_loci,   query_loci,   flanking = 1e+06,   pop = \"EUR\",   verbose = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/novelty_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locus novelty check — novelty_check","text":"known_loci data.frame published loci. query_loci data.frame loci whose novelties unclear. flanking flanking distance. pop reference population ieugwasr::ld_matrix(). verbose flag show nonexistent variants.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/novelty_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locus novelty check — novelty_check","text":"data.frame containing nonnovel loci.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/novelty_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locus novelty check — novelty_check","text":"","code":"if (FALSE) {   options(width=2000)  suppressMessages(require(dplyr))  # SCALLOP-INF list  METAL <- read.delim(\"~/pQTLtools/tests/INF1.METAL\") %>%           mutate(prot_rsid=paste0(uniprot,\"-\",rsid),pos=Position)  # UKB_PPP list  require(openxlsx)  url <- \"~/rds/results/public/proteomics/UKB-PPP/sun22.xlsx\"  ST10 <- read.xlsx(url,\"ST10\",startRow=3) %>%          mutate(uniprot=Target.UniProt,rsid=rsID,prot=Assay.Target) %>%          mutate(prot_rsid=paste0(uniprot,\"-\",rsid))  sentinels <- left_join(METAL,ST10,by=\"prot_rsid\") %>%               select(prot_rsid,cis.trans,rsID) %>%               filter(!is.na(rsID))  inf1 <- c(with(pQTLtools::inf1,uniprot),with(METAL,uniprot)) %>%          unique()  overlap <- filter(ST10,uniprot %in% inf1)  dim(overlap)  UKB_PPP <- mutate(overlap,             chrpos=strsplit(overlap[[\"Variant.ID.(CHROM:GENPOS.(hg37):A0:A1:imp:v1)\"]],\":\"),             chr=lapply(chrpos,\"[[\",1),             pos=lapply(chrpos,\"[[\",2),             chrpos=paste(chr,pos,sep=\":\"))  suppressMessages(require(GenomicRanges))  b <- novelty_check(UKB_PPP,METAL)  replication <- filter(b,r2>=0.8)  # Mutual uses of pQTLtools/SCALLOP-INF  write.table(replication,file=\"~/INF/work/UKB-PPP.txt\",row.names=FALSE,quote=FALSE,sep=\"\\t\")  load(\"~/pQTLtools/tests/novel_data.rda\")  prot_rsid <- with(novel_data,paste0(prot,\"-\",rsid))  prot_rsid_repl <- with(replication,paste0(query.prot,\"-\",query.rsid))  left <- setdiff(prot_rsid,prot_rsid_repl) }"},{"path":[]},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pQTLtools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A summary of functions — pQTLtools-package","text":"Jing Hua Zhao collaboration colleagues","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic pQTL-MR analysis — pqtlMR","title":"Basic pQTL-MR analysis — pqtlMR","text":"function takes data intrumental variables produced format_data() used perform MR analysis list outcomes MR-Base.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic pQTL-MR analysis — pqtlMR","text":"","code":"pqtlMR(ivs, ids, mr_plot = FALSE, prefix = \"pQTL-combined-\", reverse = FALSE)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic pQTL-MR analysis — pqtlMR","text":"ivs Instrumental variables format_data(). ids list MR-Base IDs. mr_plot produce plots. prefix prefix output files. reverse TRUE, perform reverse MR.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic pQTL-MR analysis — pqtlMR","text":"value returned several files.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic pQTL-MR analysis — pqtlMR","text":"function based TwoSampleMR.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Basic pQTL-MR analysis — pqtlMR","text":"Adapted script Jie Zheng.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Basic pQTL-MR analysis — pqtlMR","text":"Zheng J, et al. (2020). Phenome-wide Mendelian randomization mapping influence plasma proteome complex diseases. Nature Genetics 52(10): 1122-1131.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic pQTL-MR analysis — pqtlMR","text":"","code":"library(TwoSampleMR) #> TwoSampleMR version 0.5.6  #> [>] New: Option to use non-European LD reference panels for clumping etc #> [>] Some studies temporarily quarantined to verify effect allele #> [>] See news(package='TwoSampleMR') and https://gwas.mrcieu.ac.uk for further details library(pQTLtools) # Original examples f <- file.path(find.package(\"pQTLtools\",lib.loc=.libPaths()),\"tests\",\"Ins.csv\") ivs <- format_data(read.csv(f)) ids <- c(\"ieu-a-7\",\"ebi-a-GCST007432\") pqtlMR(ivs, ids, mr_plot=FALSE) #> Extracting data for 2 SNP(s) from 2 GWAS(s) #> Harmonising ABO (Mw1uPE) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) #> Harmonising LIFR (utHapW) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) #> Harmonising ABO (Mw1uPE) and Coronary heart disease || id:ieu-a-7 (ieu-a-7) #> Harmonising LIFR (utHapW) and Coronary heart disease || id:ieu-a-7 (ieu-a-7) #> Analysing 'Mw1uPE' on 'ebi-a-GCST007432' #> Analysing 'Mw1uPE' on 'ieu-a-7' #> Analysing 'utHapW' on 'ebi-a-GCST007432' #> Analysing 'utHapW' on 'ieu-a-7' # A bidirectional analysis f <- file.path(find.package(\"pQTLtools\",lib.loc=.libPaths()),\"tests\",\"ms.ins\") ivs <- format_data(read.table(f, header=TRUE), samplesize_col=\"N\") ids <- \"ieu-b-18\" # MR pqtlMR(ivs, ids, prefix=\"MS-\") #> Extracting data for 2 SNP(s) from 1 GWAS(s) #> Finding proxies for 1 SNPs in outcome ieu-b-18 #> Extracting data for 1 SNP(s) from 1 GWAS(s) #> Harmonising TNFB (qWSaJO) and multiple sclerosis || id:ieu-b-18 (ieu-b-18) #> Analysing 'qWSaJO' on 'ieu-b-18' # reverse MR pqtlMR(ivs, ids, ,prefix=\"MS_rev-\",reverse=TRUE) #> Extracting data for 2 SNP(s) from 1 GWAS(s) #> Finding proxies for 1 SNPs in outcome ieu-b-18 #> Extracting data for 1 SNP(s) from 1 GWAS(s) #> Harmonising TNFB (qWSaJO) and multiple sclerosis || id:ieu-b-18 (ieu-b-18) #> Analysing 'ieu-b-18' on 'qWSaJO'"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/qtl_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"QTL lookup — qtl_lookup","title":"QTL lookup — qtl_lookup","text":"function takes MR results (involving pQTL/QTL) look QTLs trait GWASs given P value linkage disequilibrium (LD) cutoffs. rationale pQTL may necessarily strong LD QTL independent signal region. interest lands association signals given P value (p_threshold) given LD (r2_threshold) thresholds.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/qtl_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTL lookup — qtl_lookup","text":"","code":"qtl_lookup(   d,   dat,   panel = \"1000Genomes\",   p_threshold = 0.001,   r2_threshold = 0.8,   pop = \"EUR\",   plink_bin = NULL,   r = NULL,   r2 = NULL,   xlsx = NULL )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/qtl_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTL lookup — qtl_lookup","text":"d directory `dat` () held. dat MR results (`protein`, `id`, `pqtl`,`p`, `qtl`, `p_qtl`) whose `proxy`, `p_proxy` `rsq` variables updated. panel reference panel. p_threshold cutoff QTL association trait GWASs. r2_threshold cutoff r^2. pop reference population 1000Genomes LD calculation. plink_bin PLINK executable file whose binary files indicated `bfile` variable `dat`. r specified, LD(r) output. r2 specified, LD(r^2) output. xlsx non-null specification indicates name output Excel workbook.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/qtl_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTL lookup — qtl_lookup","text":"data.frame containing looked loci.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/qtl_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTL lookup — qtl_lookup","text":"","code":"if (FALSE) { options(width=200) INF <- Sys.getenv(\"INF\") suppressMessages(library(dplyr)) d <- file.path(INF,\"mr\",\"gsmr\",\"trait\") inf1 <- select(gap.datasets::inf1,prot,target.short) gsmr_efo <- read.delim(file.path(INF,\"mr\",\"gsmr\",\"gsmr-efo.txt\")) %>%             left_join(inf1,by=c('protein'='target.short')) %>%             mutate(file_gwas=paste(prot,id,\"rsid.txt\",sep=\"-\"),                    bfile=file.path(INF,\"INTERVAL\",\"per_chr\",                                    paste0(\"interval.imputed.olink.chr_\",chr)),                    proxy=NA,p_proxy=NA,rsq=NA) proxies <- qtl_lookup(gsmr_efo,plink_bin=\"/rds/user/jhz22/hpc-work/bin/plink\",                       xlsx=file.path(INF,\"mr\",\"gsmr\",\"r2_INTERVAL.xlsx\")) %>%            select(protein,id,Disease,fdr,pqtl,p,qtl,p_qtl,proxy,p_proxy,rsq) write.table(proxies,file=file.path(INF,\"mr\",\"gsmr\",\"r2_INTERVAL.tsv\"),             row.names=FALSE,quote=FALSE,sep=\"\\t\") }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":null,"dir":"Reference","previous_headings":"","what":"phenoscanner regionqueries in batches — regionqueries","title":"phenoscanner regionqueries in batches — regionqueries","text":"R/phenoscanner allows certain number items supplied. simple function return large number calls batches well generating SNPIDs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phenoscanner regionqueries in batches — regionqueries","text":"","code":"regionqueries(   regionlist,   catalogue = \"pQTL\",   proxies = \"EUR\",   p = 5e-08,   r2 = 0.8,   build = 37,   wait = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phenoscanner regionqueries in batches — regionqueries","text":"regionlist list SNPs catalogue \"None\",\"eQTL\",\"mQTL\",\"methQTL\",\"pQTL\",\"GWAS\". proxies \"None\", \"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\". p p value threshold. r2 r2 LD. build 37, 38. wait flag wait 1hr every 50 regions.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phenoscanner regionqueries in batches — regionqueries","text":"returned value list containing tiles, regions results.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"phenoscanner regionqueries in batches — regionqueries","text":"Batches generated queries combined one.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"phenoscanner regionqueries in batches — regionqueries","text":"adapted custom codings","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"phenoscanner regionqueries in batches — regionqueries","text":"Sun BB, et al. (2018). Genomic atlas human plasma proteome. Nature 558: 73-79.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phenoscanner regionqueries in batches — regionqueries","text":"","code":"if (FALSE) { # single region regionqueries(\"chr17:26691290-26700110\")  # SCALLOP -- SomaLogic lookup from PhenoScanner INF <- Sys.getenv(\"INF\") INF1_merge <- merge(inf1,                   read.delim(file.path(INF,\"work\",\"INF1.merge-rsid\"),as.is=TRUE),                   by=\"prot\") INF1_merge_uniprot <- with(INF1_merge,unique(uniprot)) SomaLogic_INF1_merge <- subset(SomaLogic160410,UniProt %in% INF1_merge_uniprot) regions <- subset(INF1_merge,uniprot %in% with(SomaLogic_INF1_merge,UniProt)) singletons <- with(regions, Start-End<=2) flank <- 5e+2 regions[singletons,\"Start\"] <- regions[singletons,\"Start\"] - flank regions[singletons,\"End\"] <- regions[singletons,\"End\"] + flank reset <- with(regions,Start < 0) regions[reset,\"Start\"] <- 0 r <- regionqueries(with(regions,paste0(Chrom,\":\",Start,\"-\",End))) save(r,file=\"INF1_merge.rda\",compress='xz') r2 <- with(r, {  region_ext <- cbind(tiles,regions)  results_ext <- merge(region_ext,results,by=\"region\")  ord <- with(results_ext,order(group))  results_ext[ord,] }) results <- subset(r2,pmid==\"29875488\") grp <- names(table(with(results,group))) sink(\"INF1_merge.txt\") options(width=250) for(g in as.numeric(grp)) {   uniprot <- regions[g,\"uniprot\"]   SNP <- regions[g,\"SNP\"]   print(regions[g,])   s <- subset(results,group==g&rsid==SNP)   vars <- c(\"region\",\"group\",\"rsid\",\"hg19_coordinates\",\"hgnc\",\"beta\",\"se\",\"p\",\"snpid\")    if(nrow(s)>1) print(s[vars]) } sink() }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic TwoSampleMR analysis — run_TwoSampleMR","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"Given harmonised data, function conducts two-sample MR analysis.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"","code":"run_TwoSampleMR(TwoSampleMRinput, mr_plot = \"None\", prefix = \"\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"TwoSampleMRinput Harmonised data. mr_plot one \"None\", \"TwoSampleMR\", \"pQTLtools\" , original revised plots, respectively. prefix prefix output files.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"value returned several files.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"TwoSampleMR faces seemingly perplexing options, function intends simplify various steps two-sample MR. particularly useful large numbher MRs necessary, e.g., multiple proteins cis/trans regions need examined, case prefix direct output various directories.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"Adapted script Dimou NL, Tsilidis KK.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"Dimou NL, Tsilidis KK. Primer Mendelian Randomization Methodology Focus Utilizing Published Summary Association Data. Evangelos Evangelou (ed.), Genetic Epidemiology: Methods Protocols, Methods Molecular Biology, vol. 1793, https://doi.org/10.1007/978-1-4939-7868-7_13, Springer Science+Business Media, LLC, part Springer Nature 2018","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"","code":"library(TwoSampleMR) library(pQTLtools) outcomes <- \"ebi-a-GCST007432\" prot <- \"MMP.10\" type <- \"cis\" f <- paste0(prot,\"-\",type,\".mrx\") d <- read.table(file.path(find.package(\"pQTLtools\",lib.loc=.libPaths()),\"tests\",f),                 header=TRUE) exposure <- TwoSampleMR::format_data(within(d,{P=10^logP}), phenotype_col=\"prot\", snp_col=\"rsid\",                                      chr_col=\"Chromosome\", pos_col=\"Posistion\",                                      effect_allele_col=\"Allele1\", other_allele_col=\"Allele2\",                                      eaf_col=\"Freq1\", beta_col=\"Effect\", se_col=\"StdErr\",                                      pval_col=\"P\", log_pval=FALSE,                                      samplesize_col=\"N\") clump <- TwoSampleMR::clump_data(exposure) #> Please look at vignettes for options on running this locally if you need to run many instances of this command. #> Clumping euVw2p, 1106 variants, using EUR population reference #> Removing 1102 of 1106 variants due to LD with other variants or absence from LD reference panel outcome <- TwoSampleMR::extract_outcome_data(snps=exposure$SNP,outcomes=outcomes) #> Extracting data for 1106 SNP(s) from 1 GWAS(s) #> Finding proxies for 155 SNPs in outcome ebi-a-GCST007432 #> Extracting data for 155 SNP(s) from 1 GWAS(s) harmonise <- TwoSampleMR::harmonise_data(clump,outcome) #> Harmonising MMP.10 (euVw2p) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) prefix <- paste(outcomes,prot,type,sep=\"-\") run_TwoSampleMR(harmonise, mr_plot=\"pQTLtools\", prefix=prefix) #> Analysing 'euVw2p' on 'ebi-a-GCST007432'  #> Warning: Removed 1 rows containing missing values (`geom_errorbarh()`). #> Warning: Removed 1 rows containing missing values (`geom_point()`).   #> Warning: Removed 1 rows containing missing values (`geom_errorbarh()`). #> Warning: Removed 1 rows containing missing values (`geom_point()`).  caption <- \"Table. MMP.10 variants and FEV1\" knitr::kable(read.delim(paste0(prefix,\"-result.txt\"),header=TRUE),              caption=paste(caption, \"(result)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (result) #>  #> |id.exposure |id.outcome       |outcome                               |exposure |method                    | nsnp|         b|      se|  pval| #> |:-----------|:----------------|:-------------------------------------|:--------|:-------------------------|----:|---------:|-------:|-----:| #> |euVw2p      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |MR Egger                  |    4| -0.000577| 0.01001| 0.959| #> |euVw2p      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |Weighted median           |    4|  0.002002| 0.00615| 0.745| #> |euVw2p      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |Inverse variance weighted |    4|  0.002067| 0.00594| 0.728| #> |euVw2p      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |Simple mode               |    4|  0.004152| 0.00969| 0.697| #> |euVw2p      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |Weighted mode             |    4|  0.001134| 0.00702| 0.882| knitr::kable(read.delim(paste0(prefix,\"-heterogeneity.txt\"),header=TRUE),              caption=paste(caption,\"(heterogeneity)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (heterogeneity) #>  #> |id.exposure |id.outcome       |outcome                               |exposure |method                    |     Q| Q_df| Q_pval| #> |:-----------|:----------------|:-------------------------------------|:--------|:-------------------------|-----:|----:|------:| #> |euVw2p      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |MR Egger                  | 0.114|    2|  0.944| #> |euVw2p      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |Inverse variance weighted | 0.222|    3|  0.974| knitr::kable(read.delim(paste0(prefix,\"-pleiotropy.txt\"),header=TRUE),              caption=paste(caption,\"(pleiotropy)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (pleiotropy) #>  #> |id.exposure |id.outcome       |outcome                               |exposure | egger_intercept|      se|  pval| #> |:-----------|:----------------|:-------------------------------------|:--------|---------------:|-------:|-----:| #> |euVw2p      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |         0.00143| 0.00434| 0.774| knitr::kable(read.delim(paste0(prefix,\"-single.txt\"),header=TRUE),              caption=paste(caption,\"(single)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (single) #>  #> |exposure |outcome                               |id.exposure |id.outcome       | samplesize|SNP                             |         b|      se|     p| #> |:--------|:-------------------------------------|:-----------|:----------------|----------:|:-------------------------------|---------:|-------:|-----:| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|rs11225354                      |  0.006425| 0.01217| 0.598| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|rs142915220                     | -0.003993| 0.02856| 0.889| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|rs17099622                      |  0.004360| 0.02229| 0.845| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|rs17860955                      |  0.000616| 0.00739| 0.934| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|All - Inverse variance weighted |  0.002067| 0.00594| 0.728| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|All - MR Egger                  | -0.000577| 0.01001| 0.959| knitr::kable(read.delim(paste0(prefix,\"-loo.txt\"),header=TRUE),              caption=paste(caption,\"(loo)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (loo) #>  #> |exposure |outcome                               |id.exposure |id.outcome       | samplesize|SNP         |        b|      se|     p| #> |:--------|:-------------------------------------|:-----------|:----------------|----------:|:-----------|--------:|-------:|-----:| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|rs11225354  | 0.000703| 0.00681| 0.918| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|rs142915220 | 0.002341| 0.00608| 0.700| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|rs17099622  | 0.001891| 0.00617| 0.759| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|rs17860955  | 0.004730| 0.01001| 0.636| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |euVw2p      |ebi-a-GCST007432 |     321047|All         | 0.002067| 0.00594| 0.728| for (x in c(\"result\",\"heterogeneity\",\"pleiotropy\",\"single\",\"loo\"))     unlink(paste0(prefix,\"-\",x,\".txt\"))"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":null,"dir":"Reference","previous_headings":"","what":"Colocalisation analysis — run_coloc","title":"Colocalisation analysis — run_coloc","text":"function takes eQTL GWAS summary statistics colocalisation analysis..","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colocalisation analysis — run_coloc","text":"","code":"run_coloc(eqtl_sumstats, gwas_sumstats, harmonise = TRUE)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colocalisation analysis — run_coloc","text":"eqtl_sumstats eQTL summary data. gwas_sumstats GWAS summary data. harmonise flag harmonise data.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colocalisation analysis — run_coloc","text":"Summary coloc.abf.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":null,"dir":"Reference","previous_headings":"","what":"phenoscanner snpqueries in batches — snpqueries","title":"phenoscanner snpqueries in batches — snpqueries","text":"R/phenoscanner allows certain number items supplied. simple function return large number calls batches well generating SNPIDs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phenoscanner snpqueries in batches — snpqueries","text":"","code":"snpqueries(   snplist,   catalogue = \"pQTL\",   proxies = \"EUR\",   p = 5e-08,   r2 = 0.8,   build = 37,   wait = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phenoscanner snpqueries in batches — snpqueries","text":"snplist list SNPs. catalogue \"None\",\"eQTL\",\"mQTL\",\"methQTL\",\"pQTL\",\"GWAS\". proxies \"None\", \"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\". p p value threshold. r2 r2 LD. build 37, 38. wait flag wait 1hr every 500 SNPs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phenoscanner snpqueries in batches — snpqueries","text":"returned value list containing snps results:","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"phenoscanner snpqueries in batches — snpqueries","text":"Batches generated queries combined one.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"phenoscanner snpqueries in batches — snpqueries","text":"adapted custom codings","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"phenoscanner snpqueries in batches — snpqueries","text":"Sun BB, et al. (2018). Genomic atlas human plasma proteome. Nature 558: 73-79.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phenoscanner snpqueries in batches — snpqueries","text":"","code":"if (FALSE) {  # single SNP  snpqueries(\"rs704\")  # SCALLOP/INF INF <- Sys.getenv(\"INF\") rsid <- scan(paste(INF,'work','INF1.merge.snp',sep='/'),\"\") r <- snpqueries(rsid,catalogue='pQTL',p=1e-11) INTERVAL_Olink <- subset(with(r,results),efo=='EFO_0004747' & pmid=='29875488') save(INTERVAL_Olink,file='INTERVAL_Olink.rda',compress='xz') # --- query intersect proteins --- # SomaLogic intersect SomaLogic_overlap_list <- subset(st4,UniProt %in% intersect_list) r <- snpqueries(SomaLogic_overlap_list[,6],catalogue='pQTL',p=1e-11) SomaLogic_overlap <- subset(with(r,results),efo=='EFO_0004747' & pmid=='29875488') save(SomaLogic_overlap_list,SomaLogic_overlap,file='SomaLogic_overlap.rda',compress='xz') SomaLogic_result <- merge(SomaLogic_overlap_list,SomaLogic_overlap,                           by.x=\"Sentinel.variant*\",by.y=\"snp\") # Olink intersect INF1_merge_rsid <- read.delim(paste(INF,\"work\",\"INF1.merge-rsid\",sep=\"/\")) INF1_merge_rsid_uniprot <- merge(INF1_merge_rsid,inf1,by=\"prot\") Olink_overlap_list <- subset(INF1_merge_rsid_uniprot,uniprot %in% intersect_list) r <- snpqueries(with(Olink_overlap_list,MarkerName),catalogue='pQTL',p=1e-11) Olink_overlap <- subset(with(r,results),efo=='EFO_0004747' & pmid=='29875488') save(Olink_overlap_list,Olink_overlap,file='Olink_overlap.rda',compress='xz') Olink_result <- merge(Olink_overlap_list,Olink_overlap,by.x=\"MarkerName\",by.y=\"snp\") }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/swap.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — swap","title":"FUNCTION_TITLE — swap","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/swap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — swap","text":"","code":"swap(x, y)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/swap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — swap","text":"x PARAM_DESCRIPTION y PARAM_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/swap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — swap","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":null,"dir":"Reference","previous_headings":"","what":"UniProt IDs to others — uniprot2ids","title":"UniProt IDs to others — uniprot2ids","text":"function converts UniProt IDs others.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UniProt IDs to others — uniprot2ids","text":"","code":"uniprot2ids(uniprotid = \"ACC+ID\", to, query)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UniProt IDs to others — uniprot2ids","text":"uniprotid Source IDs. IDs. query query.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UniProt IDs to others — uniprot2ids","text":"UniProt-ID mapping","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UniProt IDs to others — uniprot2ids","text":"function based Python3 script UniProt.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"UniProt IDs to others — uniprot2ids","text":"Adapted script UniProt","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"UniProt IDs to others — uniprot2ids","text":"See https://www.uniprot.org/help/api_idmapping","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UniProt IDs to others — uniprot2ids","text":"","code":"if (FALSE) { uniprotid <- \"ACC+ID\" to <- \"CHEMBL_ID\" query <- noquote(inf1[[\"uniprot\"]]) query <- paste(query,collapse=\" \") r <- pQTLtools::uniprot2ids(uniprotid,to,query) cat(r,file=\"INF1.merge.chembl\") }"},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"landmarks-by-date-0-2","dir":"Changelog","previous_headings":"","what":"Landmarks by date","title":"pQTLtools 0.2","text":"2022.12. new package pQTLdata created hold panel meta data. 2022.06. passes CRAN checks warning. 2021.02. web-driven documentation now available, https://jinghuazhao.github.io/pQTLtools/","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"accumulated-changes-0-2","dir":"Changelog","previous_headings":"","what":"Accumulated changes","title":"pQTLtools 0.2","text":"First release. Depends R (>=3.5.0), pQTLdata Import dplyr, gap, ggplot2 importFrom utils read.table tail. Import lmm template, use save(,compress=‘xz’). Suggest htmlwidgets, plotly. Suggest cowplot, gap.datasets, httr, plyr, rmarkdown, Biobase, stringr. Suggest circlize, openxlsx, knitr add HTML vignette (biomaRt, regioneR). cis/trans-classification/ideogram/mhtplot2d examples. Suggest GenomicRanges & IRanges handle >1MB region regionqueries wait=option. Replace ChangeLog NEWS.md generate vignette/articles pkgdown. Invoke Roxygen2 documentation. Add GitHub action Add inst/Bioconductor/. Add inst/STRING/change_STRING_colors.py. Add inst/UniProt|PPI/README.md. Add inst/snakemake Add pQTLtools.Rmd, bioconductor.Rmd, es.Rmd, snakemake.Rmd SCALLOP-INF.Rmd articles. Add LICENSE.md README.md. Add listed publications pQTLs Sun et al. (2018) Suhre et al. (2020). Add run_TwoSampleMR(), make_ExpressionSet(), novelty_check(), qtl_lookup(). Add pqtlMR() based TwoSampleMR. Add run_coloc() based coloc. Add import_OpenGWAS therefore suggests gwasvcf, ieugwasr, rtracklayer, VariantAnnotation. Add import_eQTLCatalogue eQTL-Catalogue-resources suggesting seqminer. Add genequries, regionqueries, snpqueries. Add uniprot2ids() based UniProt.","code":""}]

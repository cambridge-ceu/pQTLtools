[{"path":"https://jinghuazhao.github.io/pQTLtools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020-2021 Jing Hua Zhao Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-INF.html","id":"colocalisation","dir":"Articles","previous_headings":"","what":"Colocalisation","title":"SCALLOP-INF scripts","text":"actual script cis-pQTL colocalisation analysis SCALLOP-INF. driver Bash. corresponding coloc.R contains minor modification documentation example options protein GWAS, microarray, RNA-Seq available respect variant-flanking gene regions. results generated, problem dplyr::arrange(df_gtex, -PP.H4.abf);p <- ggplot(df_gtex, aes(x = PP.H4.abf)) + geom_histogram(). furnished keep results follows, .e., PP3+PP4>=0.9 PP4/PP3>=3.","code":"#!/usr/bin/bash  for r in {1..59} do    export r=${r}    export cvt=${INF}/work/INF1.merge.cis.vs.trans    read prot MarkerName < \\                         <(awk -vFS=\",\" '$14==\"cis\"' ${cvt} | \\                           awk -vFS=\",\" -vr=${r} 'NR==r{print $2,$5}')    echo ${r} - ${prot} - ${MarkerName}    export prot=${prot}    export MarkerName=${MarkerName}    if [ ! -f ${INF}/coloc/${prot}-${MarkerName}.pdf ] || \\       [ ! -f ${INF}/coloc/${prot}-${MarkerName}.RDS ]; then      cd ${INF}/coloc      R --no-save < ${INF}/rsid/coloc.R 2>&1 | \\      tee ${prot}-${MarkerName}.log #    ls *tbi | xargs -I {} bash -c \"rm {}\"      cd -    fi done liftRegion <- function(x,chain,flanking=1e6) {   require(GenomicRanges)   gr <- with(x,GenomicRanges::GRanges(seqnames=chr,IRanges::IRanges(start,end))+flanking)   seqlevelsStyle(gr) <- \"UCSC\"   gr38 <- rtracklayer::liftOver(gr, chain)   chr <- gsub(\"chr\",\"\",colnames(table(seqnames(gr38))))   start <- min(unlist(start(gr38)))   end <- max(unlist(end(gr38)))   invisible(list(chr=chr,start=start,end=end,region=paste0(chr,\":\",start,\"-\",end))) }  sumstats <- function(prot,chr,region37) {   cat(\"GWAS sumstats\\n\")   vcf <- file.path(INF,\"METAL/gwas2vcf\",paste0(prot,\".vcf.gz\"))   gwas_stats <- gwasvcf::query_gwas(vcf, chrompos = region37)   gwas_stats <- gwasvcf::vcf_to_granges(gwas_stats) %>%                 keepSeqlevels(chr) %>%                 renameSeqlevels(paste0(\"chr\",chr))   gwas_stats_hg38 <- rtracklayer::liftOver(gwas_stats, chain) %>%     unlist() %>%     renameSeqlevels(chr) %>%     dplyr::as_tibble() %>%     dplyr::transmute(chromosome = seqnames, position = start, AF, ES, SE, LP, SS) %>%     dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%     dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%     dplyr::group_by(id) %>%     dplyr::mutate(row_count = n()) %>%     dplyr::ungroup() %>%     dplyr::filter(row_count == 1) }  microarray <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"a. eQTL datasets\\n\")   microarray_df <- dplyr::filter(tabix_paths, quant_method == \"microarray\") %>%                    dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(microarray_df$ftp_path), microarray_df$qtl_id[1])   hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\")   column_names <- names(read.delim(hdr))   summary_list <- purrr::map(ftp_path_list, ~import_eQTLCatalogue(., region38,                              selected_gene_id = ensGene, column_names))   purrr::map_df(summary_list[lapply(summary_list,nrow)!=0],                 ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  rnaseq <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"b. Uniformly processed RNA-seq datasets\\n\")   rnaseq_df <- dplyr::filter(tabix_paths, quant_method == \"ge\") %>%                dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id)   hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list, ~safe_import(., region38,                              selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list[lapply(result_list,nrow)!=0], ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   purrr::map_df(result_list, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  gtex <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"c. GTEx_v8 imported eQTL datasets\\n\")   rnaseq_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%                dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id)   hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list,                              ~safe_import(., region38, selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  coloc <- function(prot,chr,ensGene,chain,region37,region38,out,run_all=FALSE) {   gwas_stats_hg38 <- sumstats(prot,chr,region37)   if (run_all)   {     df_microarray <- microarray(gwas_stats_hg38,ensGene,region38)     df_rnaseq <- rnaseq(gwas_stats_hg38,ensGene,region38)     df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)     if (exists(\"df_microarray\") & exits(\"df_rnaseq\") & exists(\"df_gtex\"))     {       coloc_df = dplyr::bind_rows(df_microarray, df_rnaseq, df_gtex)       saveRDS(coloc_df, file=paste0(out,\".RDS\"))       dplyr::arrange(coloc_df, -PP.H4.abf)       p <- ggplot(coloc_df, aes(x = PP.H4.abf)) + geom_histogram()     }   } else {     df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)     if (exists(\"df_gtex\"))     {       saveRDS(df_gtex,file=paste0(out,\".RDS\"))       dplyr::arrange(df_gtex, -PP.H4.abf)       p <- ggplot(df_gtex, aes(x = PP.H4.abf)) + geom_histogram()     }   }   s <- ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point()   ggsave(plot = s, filename = paste0(out, \"-assoc.pdf\"), path = \"\", device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300)   ggsave(plot = p, filename = paste0(out, \"-hist.pdf\"), path = \"\", device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300) }  single_run <- function(r) {   sentinel <- sentinels[r,]   isnpid <- within(gap::inv_chr_pos_a1_a2(sentinel[[\"SNP\"]]),   {     chr <- gsub(\"chr\",\"\",chr)     pos <- as.integer(pos)     start <- pos-M     if (start<0) start <- 0     end <- pos+M   })   chr <- with(isnpid,chr)   region37 <- with(isnpid, paste0(chr,\":\",start,\"-\",end))   ensRegion37 <- with(subset(inf1,prot==sentinel[[\"prot\"]]),                       {                         start <- start-M                         if (start<0) start <- 0                         end <- end+M                         paste0(chr,\":\",start,\"-\",end)                       })   region38 <- with(liftRegion(isnpid,chain),region)   ensGene <- subset(inf1,prot==sentinel[[\"prot\"]])[[\"ensembl_gene_id\"]]   ensRegion38 <- with(liftRegion(subset(inf1,prot==sentinel[[\"prot\"]]),chain),region)   f <- file.path(INF,\"coloc\",with(sentinel,paste0(prot,\"-\",SNP)))   cat(chr,region37,region38,ensGene,ensRegion37,ensRegion38,\"\\n\") # coloc(sentinel[[\"prot\"]],chr,ensGene,chain,region37,region38,f)   coloc(sentinel[[\"prot\"]],chr,ensGene,chain,ensRegion37,ensRegion38,f) }  # slow with the following loop: loop <- function() for (r in 1:nrow(sentinels)) single_run(r)  library(pQTLtools) f <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\") chain <- rtracklayer::import.chain(f) pkgs <- c(\"dplyr\", \"ggplot2\", \"readr\", \"coloc\", \"GenomicRanges\",\"seqminer\") invisible(lapply(pkgs, require, character.only = TRUE)) HPC_WORK <- Sys.getenv(\"HPC_WORK\") gwasvcf::set_bcftools(file.path(HPC_WORK,\"bin\",\"bcftools\")) f <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths.tsv\") tabix_paths <- read.delim(f, stringsAsFactors = FALSE) %>% dplyr::as_tibble() HOME <- Sys.getenv(\"HOME\") f <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_imported.tsv\") imported_tabix_paths <- within(read.delim(f, stringsAsFactors = FALSE) %>% dplyr::as_tibble(),       {ftp_path <- gsub(\"ftp://ftp.ebi.ac.uk/pub/databases/spot/eQTL/csv/GTEx_V8/ge\",                         paste0(HOME,\"/rds/public_databases/GTEx/csv\"),ftp_path)}) options(width=200) library(dplyr) INF <- Sys.getenv(\"INF\") M <- 1e6 sentinels <- subset(read.csv(file.path(INF,\"work\",\"INF1.merge.cis.vs.trans\")),cis) cvt_rsid <- file.path(INF,\"work\",\"INF1.merge.cis.vs.trans-rsid\") prot_rsid <- subset(read.delim(cvt_rsid,sep=\" \"),cis,select=c(prot,SNP)) # Faster with parallel Bash runs. r <- as.integer(Sys.getenv(\"r\")) single_run(r) collect <- function() {   df_coloc <- data.frame()   for(r in 1:nrow(sentinels))   {     prot <- sentinels[[\"prot\"]][r]     snpid <- sentinels[[\"SNP\"]][r]     rsid <- prot_rsid[[\"SNP\"]][r]     f <- file.path(INF,\"coloc\",paste0(prot,\"-\",snpid,\".RDS\"))     if (!file.exists(f)) next     cat(prot,\"-\",rsid,\"\\n\")     rds <- readRDS(f)     if (nrow(rds)==0) next     df_coloc <- rbind(df_coloc,data.frame(prot=prot,rsid=rsid,snpid=snpid,rds))   }   df_coloc <- within(df_coloc,{qtl_id <- gsub(\"GTEx_V8_\",\"\",qtl_id)}) %>%               rename(H0=PP.H0.abf,H1=PP.H1.abf,H2=PP.H2.abf,H3=PP.H3.abf,H4=PP.H4.abf)   write.table(subset(df_coloc,H3+H4>=0.9 & H4/H3>=3),               file=file.path(INF,\"coloc\",\"GTEx.tsv\"),               quote=FALSE,row.names=FALSE,sep=\"\\t\") } collect()"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"data-frame","dir":"Articles","previous_headings":"","what":"data.frame","title":"ExpressionSet","text":"great benefit use object directly data.frame.","code":"lm.result <- esApply(exampleSet,1,function(x) lm(score~gender+x)) beta.x <- unlist(lapply(lapply(lm.result,coef),\"[\",3)) beta.x[1] #> AFFX-MurIL2_at.x  #>    -0.0001907472 lm(score~gender+AFFX.MurIL2_at,data=exampleSet) #>  #> Call: #> lm(formula = score ~ gender + AFFX.MurIL2_at, data = exampleSet) #>  #> Coefficients: #>    (Intercept)      genderMale  AFFX.MurIL2_at   #>      0.5531725       0.0098932      -0.0001907"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"composite-plots","dir":"Articles","previous_headings":"","what":"Composite plots","title":"ExpressionSet","text":"wish examine distribution feature via histogram, scatter boxplot. One resort esApply simplicity nicer add feature name title. expression set indexed using feature name(s).","code":"invisible(esApply(exampleSet[1:2],1,function(x){par(mfrow=c(3,1));boxplot(x);hist(x);plot(x)})) f <- featureNames(exampleSet[1:2]) invisible(sapply(f,function(x) {                      d <- t(exprs(exampleSet[x]))                      fn <- featureNames(exampleSet[x])                      par(mfrow=c(3,1))                      hist(d,main=\"\",xlab=fn); plot(d, ylab=fn); boxplot(d,ylab=fn)                    }           ) )"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"data-transformation","dir":"Articles","previous_headings":"","what":"Data transformation","title":"ExpressionSet","text":"Suppose wish use log2 greater zero set negative values missing.","code":"log2.na <- function(x) log2(ifelse(x>0, x, NA)) exprs(exampleSet) <- log2.na(exprs(exampleSet))"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/es.html","id":"limit-of-detection-lod","dir":"Articles","previous_headings":"","what":"Limit of detection (LOD)","title":"ExpressionSet","text":"generate lod.max ~ U[0,1] variable experiment  quantity shown big impact protein abundance therefore pQTL detection shown real example.","code":"fData(exampleSet) #> data frame with 0 columns and 500 rows fData(exampleSet)$lod.max <- apply(exprs(exampleSet),1,quantile,runif(nrow(exampleSet))) lod <- get.prop.below.LLOD(exampleSet) x <- dplyr::arrange(fData(lod),desc(pc.belowLOD.new)) knitr::kable(head(lod)) plot(x[,2], main=\"Random quantile cut off\", ylab=\"<lod%\") rm(list=ls()) HOME <- Sys.getenv(\"HOME\") dir <- paste0(HOME,\"/rds/post_qc_data/interval/phenotype/olink_proteomics/post-qc/\") rds <- readRDS(paste0(dir,\"eset.inf1.flag.out.outlier.in.rds\")) x <- get.prop.below.LLOD(rds) annot <- fData(x) annot$MissDataProp <- as.numeric( gsub(\"\\\\%$\", \"\", annot$MissDataProp) ) plot(annot$MissDataProp, annot$pc.belowLOD.new, xlab=\"% <LLOD in Original\",      ylab=\"% <LLOD in post QC dataset\", pch=19) # get the proteins with no pQTL INF <- Sys.getenv(\"INF\") np <- read.table(paste(INF, \"work\", \"INF1.merge.nosig\", sep=\"/\"), head=F,                  col.names = c(\"prot\", \"uniprot.id\")) annot$pQTL <- rep(NA, nrow(annot)) no.pQTL.ind <- which(annot$uniprot.id %in% np$uniprot) annot$pQTL[no.pQTL.ind] <- \"red\" annot$pQTL[-no.pQTL.ind] <- \"blue\" annot <- annot[order(annot$pc.belowLOD.new, decreasing = T),] annot <- annot[-grep(\"^BDNF$\", annot$ID),] par(mar=c(5,4,1,1)) plot(annot$pc.belowLOD.new, col=annot$pQTL, las=1,      ylab = \"% samples with very low abundance per protein\", xaxt= 'n',      xlab = \"ordered proteins\", cex=0.8, pch=19) axis(side=1, at = seq(from=0, to=nrow(annot), by=20)) legend(\"topright\", legend= c(\"no pQTL\", \"pQTL\"), col= c(\"red\",\"blue\"), pch = 19) options(width=120) knitr::kable(annot,row.names=FALSE)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"cistrans-classification","dir":"Articles","previous_headings":"","what":"cis/trans classification","title":"An Overview of pQTLtools","text":"Table 1. cis/trans classification cis/trans classification used generate 2d-pQTL plot 2d pQTL plot whose result can also viewed 2-d plotly style, 2d pQTL plotly 3-d counterpart 3d pQTL plotly ideogram (biomaRt always include plot ) Karyoplot","code":"options(width=200) require(gap) #> Loading required package: gap #> Loading required package: gap.datasets #> gap version 1.2.3-2 INF <- Sys.getenv(\"INF\") f <- file.path(INF,\"work\",\"INF1.merge\") clumped <- read.delim(f,as.is=TRUE) hits <- merge(clumped[c(\"CHR\",\"POS\",\"MarkerName\",\"prot\",\"log10p\")],               inf1[c(\"prot\",\"uniprot\")],by=\"prot\") names(hits) <- c(\"prot\",\"Chr\",\"bp\",\"SNP\",\"log10p\",\"uniprot\") cistrans <- cis.vs.trans.classification(hits,inf1,\"uniprot\") cis.vs.trans <- with(cistrans,data) knitr::kable(with(cistrans,table),caption=\"Table 1. cis/trans classification\") with(cistrans,total) #> [1] 180 circos.cis.vs.trans.plot(hits=f,inf1,\"uniprot\") INF <- Sys.getenv(\"INF\") d <- read.csv(file.path(INF,\"work\",\"INF1.merge.cis.vs.trans\"),as.is=TRUE) t2d <- pqtl2dplot(d) fig2d <- pqtl2dplotly(d) fig2d # We can save the figure for a browser independently htmlwidgets::saveWidget(fig2d,file=\"fig2d.html\") fig3d <- pqtl3dplotly(d,zmax=300) fig3d # We can save the figure for a browser independently htmlwidgets::saveWidget(fig3d,file=\"fig3d.html\") INF <- Sys.getenv(\"INF\") f <- file.path(INF,\"work\",\"INF1.merge\") INF1_merge <- read.delim(f)[c(\"Chrom\",\"Start\",\"End\",\"prot\",\"MarkerName\")] cvt <- read.csv(file.path(INF,\"work\",\"/INF1.merge.cis.vs.trans\"),as.is=TRUE) INF1_merge_cvt <- merge(INF1_merge,cvt,by.x=c(\"prot\",\"MarkerName\"),by.y=c(\"prot\",\"SNP\")) ord <- with(INF1_merge_cvt,order(Chr,bp)) INF1_merge_cvt <- INF1_merge_cvt[ord,]  library(httr) set_config(config(ssl_verifypeer = 0L)) library(biomaRt) mart <- useMart(biomart = \"ensembl\", dataset = \"hsapiens_gene_ensembl\") attrs <- c(\"hgnc_symbol\", \"chromosome_name\", \"start_position\", \"end_position\", \"band\") hgnc <- vector(\"character\",180) for(i in 1:180) {   v <- with(INF1_merge_cvt[i,],paste0(Chr,\":\",bp,\":\",bp))   g <- subset(getBM(attributes = attrs, filters=\"chromosomal_region\", values=v, mart=mart),!is.na(hgnc_symbol))   hgnc[i] <- paste(g[[\"hgnc_symbol\"]],collapse=\";\")   cat(i,g[[\"hgnc_symbol\"]],hgnc[i],\"\\n\") } INF1_merge_cvt <- within(INF1_merge_cvt,{   hgnc <- hgnc   hgnc[cis] <- p.gene[cis] })  library(regioneR) with(INF1_merge_cvt, { # png(\"karyoplot.png\",res= 300, units=\"in\", width=12, height=20)   sentinels <- toGRanges(Chr,bp-1,bp,labels=hgnc)   cis.regions <- toGRanges(Chr,cis.start,cis.end)   loci <- toGRanges(Chr,Start,End)   colors <- c(\"red\",\"blue\")   seqlevelsStyle(sentinels) <- \"UCSC\"   library(karyoploteR)   kp <- plotKaryotype(genome=\"hg19\",chromosomes=levels(seqnames(sentinels)))   kpAddBaseNumbers(kp)   kpPlotRegions(kp,data=loci,r0=0.05,r1=0.15,border=\"black\")   kpPlotMarkers(kp, data=sentinels, labels=hgnc, text.orientation=\"vertical\",                 cex=0.5, y=0.3*seq_along(hgnc)/length(hgnc), srt=30,                 ignore.chromosome.ends=TRUE,                 adjust.label.position=TRUE, label.color=colors[2-cis], label.dist=0.002,                 cex.axis=3, cex.lab=3)   legend(\"bottomright\", bty=\"n\", pch=c(19,19), col=colors, pt.cex=0.4,          legend=c(\"cis\", \"trans\"), text.col=colors, cex=0.8, horiz=FALSE) # panel <- toGRanges(p.chr,p.start,p.end,labels=p.gene) # kpPlotLinks(kp, data=loci, data2=panel, col=colors[2-cis]) # dev.off() })"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"genomic-regions-enrichment-analysis","dir":"Articles","previous_headings":"","what":"Genomic regions enrichment analysis","title":"An Overview of pQTLtools","text":"now considerably easier Genomic Regions Enrichment Annotations Tool (GREAT). GREAT plots GREAT plots GREAT plots GREAT plots top terms Binomial p=1e-5 extracted follows, Table 2. GREAT results (IL12B-KITLG-TNFSF10) Table 2. GREAT results (regions)","code":"post <- function(regions) {   library(rGREAT)   job <- submitGreatJob(get(regions), species=\"hg19\", version=\"3.0.0\")   et <- getEnrichmentTables(job,download_by = 'tsv')   tb <- do.call('rbind',et)   write.table(tb,file=paste0(regions,\".tsv\"),quote=FALSE,row.names=FALSE,sep=\"\\t\")   invisible(list(job=job,tb=tb)) }  library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union M <- 1e+6 INF1_merge <- read.delim(file.path(INF,\"work\",\"INF1.merge\")) %>%               mutate(chr=Chrom, start=POS-M, end=POS+M) %>%               mutate(start=if_else(start<0,0,start)) %>%               select(prot,MarkerName,chr,start,end) cistrans <- INF1_merge %>% select(chr,start,end) %>% arrange(chr,start,end) %>% distinct() # All regions cistrans.post <- post(\"cistrans\") #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #> Loading required package: parallel #>  #> Attaching package: 'BiocGenerics' #> The following objects are masked from 'package:parallel': #>  #>     clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, clusterExport, clusterMap, parApply, parCapply, parLapply, parLapplyLB, parRapply, parSapply, parSapplyLB #> The following objects are masked from 'package:dplyr': #>  #>     combine, intersect, setdiff, union #> The following objects are masked from 'package:stats': #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from 'package:base': #>  #>     anyDuplicated, append, as.data.frame, basename, cbind, colnames, dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect, is.unsorted, lapply, #>     Map, mapply, match, mget, order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply, union, unique, unsplit, #>     which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: 'S4Vectors' #> The following objects are masked from 'package:dplyr': #>  #>     first, rename #> The following objects are masked from 'package:base': #>  #>     expand.grid, I, unname #> Loading required package: IRanges #>  #> Attaching package: 'IRanges' #> The following objects are masked from 'package:dplyr': #>  #>     collapse, desc, slice #> Loading required package: GenomeInfoDb #>  #> ------------------ #> Note: On Aug 19 2019 GREAT released version 4 where it supports `hg38` genome and removes some ontologies such pathways. `submitGreatJob()` still takes `hg19` as default. `hg38` #> can be specified by the `species = 'hg38'` argument. To use the older versions such as 3.0.0, specify as `submitGreatJob(..., version = '3.0.0')`. #> ------------------ job <- with(cistrans.post,job) plotRegionGeneAssociationGraphs(job,type=c(1,3)) availableOntologies(job) # plot of the top term par(mfcol=c(3,1)) plotRegionGeneAssociationGraphs(job, ontology=\"GO Molecular Function\",                                 termID=\"GO:0005126\", type=c(1,3)) plotRegionGeneAssociationGraphs(job, ontology=\"GO Biological Process\",                                 termID=\"GO:0009611\", type=c(1,3)) plotRegionGeneAssociationGraphs(job, ontology=\"GO Cellular Component\",                                 termID=\"GO:0005615\", type=c(1,3)) # Specific regions IL12B <- filter(INF1_merge,prot==\"IL.12B\") %>% select(chr,start,end) KITLG <- filter(INF1_merge,prot==\"SCF\") %>% select(chr,start,end) TNFSF10 <- filter(INF1_merge,prot==\"TRAIL\") %>% select(chr,start,end) tb_all <- data.frame() for (r in c(\"IL12B\",\"KITLG\",\"TNFSF10\")) {   r.post <- post(r)   tb_all <- rbind(tb_all,data.frame(gene=r,with(r.post,tb))) } #> Don't make too frequent requests. The time break is 60s. #> Please wait for 52s for the next request. #> The time break can be set by `request_interval` argument. #> Don't make too frequent requests. The time break is 60s. #> Please wait for 57s for the next request. #> The time break can be set by `request_interval` argument. #>  #> Don't make too frequent requests. The time break is 60s. #> Please wait for 57s for the next request. #> The time break can be set by `request_interval` argument. write.table(tb_all,file=\"IL12B-KITLG-TNFSF10.tsv\",quote=FALSE,row.names=FALSE,sep=\"\\t\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"eqtl-catalogue-for-colocalization-analysis","dir":"Articles","previous_headings":"","what":"eQTL Catalogue for colocalization analysis","title":"An Overview of pQTLtools","text":"See example associated import_eQTLCatalogue. related function import_OpenGWAS used fetch data OpenGWAS. cis-pQTLs 1e+6 flanking regions considered data actually fetched files stored locally. illustration, first sentinel used. Association plot Association plot Table 4. Colocalisation results OPG-chr8:120081031_C_T function sumstats() obtained meta-analysis summary statistics (build 37 therefore lifted build 38) used colocalisation analysis. output saved .RDS files.","code":"library(pQTLtools) #>  #> Attaching package: 'pQTLtools' #> The following object is masked from 'package:gap': #>  #>     hg19 #> The following object is masked from 'package:gap.datasets': #>  #>     inf1 f <- file.path(system.file(package=\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\") chain <- rtracklayer::import.chain(f) pkgs <- c(\"dplyr\", \"ggplot2\", \"readr\", \"coloc\", \"GenomicRanges\",\"seqminer\") invisible(lapply(pkgs, require, character.only = TRUE)) #> Loading required package: ggplot2 #> Loading required package: readr #> Loading required package: coloc #> This is a new update to coloc. #> Loading required package: seqminer HPC_WORK <- Sys.getenv(\"HPC_WORK\") gwasvcf::set_bcftools(file.path(HPC_WORK,\"bin\",\"bcftools\")) f <- file.path(system.file(package=\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_gtex.tsv\") tabix_paths <- read.delim(f, sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE) %>%                dplyr::as_tibble() HOME <- Sys.getenv(\"HOME\") f <- file.path(system.file(package=\"pQTLtools\"),\"eQTL-Catalogue\",                \"tabix_ftp_paths_gtex.tsv\") imported_tabix_paths <- within(read.delim(f, stringsAsFactors = FALSE) %>%                         dplyr::as_tibble(),       {ftp_path <- gsub(\"ftp://ftp.ebi.ac.uk/pub/databases/spot/eQTL/csv/GTEx_V8/ge\",                         paste0(HOME,\"/rds/public_databases/GTEx/csv\"),ftp_path)}) INF <- Sys.getenv(\"INF\") M <- 1e6 sentinels <- subset(read.csv(file.path(INF,\"work\",\"INF1.merge.cis.vs.trans\")),cis)  liftRegion <- function(x,chain,flanking=1e6) {   require(GenomicRanges)   gr <- with(x,GenomicRanges::GRanges(seqnames=chr,IRanges::IRanges(start,end))+flanking)   seqlevelsStyle(gr) <- \"UCSC\"   gr38 <- rtracklayer::liftOver(gr, chain)   chr <- colnames(table(seqnames(gr38)))   chr <- gsub(\"chr\",\"\",chr)   start <- min(unlist(start(gr38)))   end <- max(unlist(end(gr38)))   invisible(list(chr=chr,start=start,end=end,region=paste0(chr,\":\",start,\"-\",end))) }  sumstats <- function(prot,chr,region37) {   cat(\"GWAS sumstats\\n\")   f <- file.path(INF,\"METAL/gwas2vcf\",paste0(prot,\".vcf.gz\"))   gwas_stats <- gwasvcf::query_gwas(f, chrompos = region37)   gwas_stats <- gwasvcf::vcf_to_granges(gwas_stats) %>%                 keepSeqlevels(chr) %>%                 renameSeqlevels(paste0(\"chr\",chr))   gwas_stats_hg38 <- rtracklayer::liftOver(gwas_stats, chain) %>%                      unlist() %>%                      renameSeqlevels(chr) %>%                      dplyr::as_tibble() %>%                      dplyr::transmute(chromosome = seqnames,                                       position = start, AF, ES, SE, LP, SS) %>%                      dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%                      dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%                      dplyr::group_by(id) %>%                      dplyr::mutate(row_count = n()) %>%                      dplyr::ungroup() %>%                      dplyr::filter(row_count == 1) }  coloc <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"c. GTEx_v8 imported eQTL datasets\\n\")   rnaseq_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%                dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id)   hdr <- file.path(system.file(package=\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list, ~safe_import(., region38,                              selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  sentinel <- sentinels[1,] isnpid <- within(gap::inv_chr_pos_a1_a2(sentinel[[\"SNP\"]]), {     chr <- gsub(\"chr\",\"\",chr)     pos <- as.integer(pos)     start <- pos-M     if (start<0) start <- 0     end <- pos+M }) chr <- with(isnpid,chr) region37 <- with(isnpid, paste0(chr,\":\",start,\"-\",end)) ensRegion37 <- with(subset(inf1,prot==sentinel[[\"prot\"]]),paste0(chr,\":\",start,\"-\",end)) region38 <- with(liftRegion(isnpid,chain),region) ensGene <- subset(inf1,prot==sentinel[[\"prot\"]])[[\"ensembl_gene_id\"]] ensRegion38 <- with(liftRegion(subset(inf1,prot==sentinel[[\"prot\"]]),chain),region) f <- with(sentinel,paste0(prot,\"-\",SNP,\".RDS\")) gwas_stats_hg38 <- sumstats(sentinel[[\"prot\"]],chr,region37) coloc_df_imported <- coloc(gwas_stats_hg38,ensGene,region38) saveRDS(coloc_df_imported,file=f) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`."},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"pqtl-based-mendelian-randomization-mr","dir":"Articles","previous_headings":"","what":"pQTL-based Mendelian Randomization (MR)","title":"An Overview of pQTLtools","text":"function pqtlMR derived Zheng et al. (2020). attractive feature multiple pQTLs can used together conducting MR list outcomes MR-Base. generic applications run_TwoSampleMR() function can used. Table 3. ABO/LIFR variants CHD/FEV1 (instruments) Table 3. ABO/LIFR variants CHD/FEV1 (result) Table 3. ABO/LIFR variants CHD/FEV1 (single)","code":"library(TwoSampleMR) #> TwoSampleMR version 0.5.6  #> [>] New: Option to use non-European LD reference panels for clumping etc #> [>] Some studies temporarily quarantined to verify effect allele #> [>] See news(package='TwoSampleMR') and https://gwas.mrcieu.ac.uk for further details #>  #> Attaching package: 'TwoSampleMR' #> The following object is masked from 'package:GenomicRanges': #>  #>     trim #> The following object is masked from 'package:IRanges': #>  #>     trim f <- file.path(system.file(package=\"pQTLtools\"),\"tests\",\"Ins.csv\") ivs <- format_data(read.csv(f)) caption2 <- \"Table 3. ABO/LIFR variants and CHD/FEV1\" knitr::kable(ivs, caption=paste(caption2,\"(instruments)\")) ids <- c(\"ieu-a-7\",\"ebi-a-GCST007432\") pqtlMR(ivs, ids) #> API: public: http://gwas-api.mrcieu.ac.uk/ #> Extracting data for 2 SNP(s) from 2 GWAS(s) #> Harmonising ABO (dU3C0x) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) #> Harmonising LIFR (YmGdhW) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) #> Harmonising ABO (dU3C0x) and Coronary heart disease || id:ieu-a-7 (ieu-a-7) #> Harmonising LIFR (YmGdhW) and Coronary heart disease || id:ieu-a-7 (ieu-a-7) #> Analysing 'dU3C0x' on 'ebi-a-GCST007432' #> Analysing 'dU3C0x' on 'ieu-a-7' #> Analysing 'YmGdhW' on 'ebi-a-GCST007432' #> Analysing 'YmGdhW' on 'ieu-a-7' result <- read.delim(\"pQTL-combined-result.txt\",header=TRUE) knitr::kable(result,caption=paste(caption2, \"(result)\")) single <- read.delim(\"pQTL-combined-single.txt\",header=TRUE) knitr::kable(subset(single,!grepl(\"All\",SNP)), caption=paste(caption2, \"(single)\")) invisible(sapply(c(\"harmonise\",\"result\",\"single\"),                  function(x) unlink(paste0(\"pQTL-combined-\",x,\".txt\"))))"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"run_twosamplemr","dir":"Articles","previous_headings":"","what":"run_TwoSampleMR","title":"An Overview of pQTLtools","text":"function similiarity Dimou Tsilidis (2018). documentation example quoted , Two-sample MR Two-sample MR Two-sample MR Two-sample MR output contained individual .txt files, together scatter, forest, funnel leave-one-plots. Table 5. MMP.10 variants FEV1 (result) Table 5. MMP.10 variants FEV1 (heterogeneity) Table 5. MMP.10 variants FEV1 (pleiotropy) Table 5. MMP.10 variants FEV1 (single) Table 5. MMP.10 variants FEV1 (loo)","code":"library(TwoSampleMR) outcomes <- \"ebi-a-GCST007432\" prot <- \"MMP.10\" type <- \"cis\" f <- paste0(prot,\"-\",type,\".mrx\") d <- read.table(file.path(system.file(package=\"pQTLtools\"),\"tests\",f),                 header=TRUE) exposure <- format_data(within(d,{P=10^logP}), phenotype_col=\"prot\", snp_col=\"rsid\",                         chr_col=\"Chromosome\", pos_col=\"Posistion\",                         effect_allele_col=\"Allele1\", other_allele_col=\"Allele2\",                         eaf_col=\"Freq1\", beta_col=\"Effect\", se_col=\"StdErr\",                         pval_col=\"P\", log_pval=FALSE,                         samplesize_col=\"N\") clump <- clump_data(exposure) #> Please look at vignettes for options on running this locally if you need to run many instances of this command. #> Clumping ZoHewj, 1106 variants, using EUR population reference #> Removing 1102 of 1106 variants due to LD with other variants or absence from LD reference panel outcome <- extract_outcome_data(snps=exposure$SNP,outcomes=outcomes) #> Extracting data for 1106 SNP(s) from 1 GWAS(s) #> Finding proxies for 155 SNPs in outcome ebi-a-GCST007432 #> Extracting data for 155 SNP(s) from 1 GWAS(s) harmonise <- harmonise_data(clump,outcome) #> Harmonising MMP.10 (ZoHewj) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) prefix <- paste(outcomes,prot,type,sep=\"-\") run_TwoSampleMR(harmonise, mr_plot=\"pQTLtools\", prefix=prefix) #> Analysing 'ZoHewj' on 'ebi-a-GCST007432'"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"mr-using-cis-trans-and-cistrans-pan-instruments","dir":"Articles","previous_headings":"","what":"MR using cis, trans and cis+trans (pan) instruments","title":"An Overview of pQTLtools","text":"illustrated IL-12B. Table 6. MR IL-12B variants MR cis, trans cis+trans variants IL-12B","code":"library(dplyr) efo <- read.delim(file.path(INF,\"rsid\",\"efo.txt\")) %>%        mutate(x=1:n()) %>%        select(MRBASEID,trait,x) d3 <- read.delim(file.path(INF,\"mr\",\"efo-result.txt\")) %>%       filter(exposure==\"IL.12B\") %>%       mutate(MRBASEID=unlist(lapply(strsplit(outcome,\"id:\"),\"[\",2)),y=b) %>%       select(-outcome,-method) %>%       left_join(efo) %>%       arrange(cistrans) #> Joining, by = \"MRBASEID\" knitr::kable(head(d3[c(\"MRBASEID\",\"trait\",\"cistrans\",\"nsnp\",\"b\",\"se\",\"pval\")],29),caption=\"Table 6. MR with IL-12B variants\") p <- ggplot(d3,aes(y = trait, x = y))+ theme_bw()+ geom_point()+ facet_wrap(~cistrans,ncol=3,scales=\"free_x\")+ geom_segment(aes(x = b-1.96*se, xend = b+1.96*se, yend = trait))+ geom_vline(lty=2, aes(xintercept=0), colour = 'red')+ xlab(\"Effect size\")+ ylab(\"\") p"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"literature-on-pqtls","dir":"Articles","previous_headings":"","what":"Literature on pQTLs","title":"An Overview of pQTLtools","text":"identified Sun et al. (2018) Suhre, McCarthy, Schwenk (2020) included EndNote libraries.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"uniprot-ids","dir":"Articles","previous_headings":"","what":"UniProt IDs","title":"An Overview of pQTLtools","text":"function uniprot2ids converts UniProt IDs others.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jing hua Zhao. Maintainer.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhao JH (2022). pQTLtools: pQTL Tools. R package version 0.1, https://github.com/jinghuazhao/pQTLtools.","code":"@Manual{,   title = {pQTLtools: pQTL Tools},   author = {Jing Hua Zhao},   year = {2022},   note = {R package version 0.1},   url = {https://github.com/jinghuazhao/pQTLtools}, }"},{"path":[]},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Protein Quantitative Trait Locus tools","text":"latest version pQTLtools can installed usual:","code":"install.packages(\"remotes\") remotes::install_github(\"jinghuazhao/pQTLtools\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/index.html","id":"february-2021-update","dir":"","previous_headings":"","what":"February 2021 update","title":"Protein Quantitative Trait Locus tools","text":"web-driven documentation now available https://jinghuazhao.github.io/pQTLtools/","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":null,"dir":"Reference","previous_headings":"","what":"phenoscanner genequeries in batches — genequeries","title":"phenoscanner genequeries in batches — genequeries","text":"R/phenoscanner allows certain number items supplied. simple function return large number calls batches well generating SNPIDs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phenoscanner genequeries in batches — genequeries","text":"","code":"genequeries(   genelist,   catalogue = \"pQTL\",   proxies = \"EUR\",   p = 5e-08,   r2 = 0.8,   build = 37,   wait = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phenoscanner genequeries in batches — genequeries","text":"genelist list SNPs. catalogue \"None\",\"eQTL\",\"mQTL\",\"methQTL\",\"pQTL\",\"GWAS\". proxies \"None\", \"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\". p p value threshold. r2 r2 LD. build 37, 38. wait flag wait 1hr every 50 genes.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phenoscanner genequeries in batches — genequeries","text":"returned value list containing genes results.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"phenoscanner genequeries in batches — genequeries","text":"Batches generated queries combined one.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"phenoscanner genequeries in batches — genequeries","text":"Sun BB, et al. (2018). Genomic atlas human plasma proteome. Nature 558: 73-79.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phenoscanner genequeries in batches — genequeries","text":"","code":"if (FALSE) { # single gene   genequeries(\"TNFRSF11B\") }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":null,"dir":"Reference","previous_headings":"","what":"Limit of detection analysis — get.prop.below.LLOD","title":"Limit of detection analysis — get.prop.below.LLOD","text":"function obtains lower limit detection proteomic analysis.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limit of detection analysis — get.prop.below.LLOD","text":"","code":"get.prop.below.LLOD(eset, flagged = \"OUT\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limit of detection analysis — get.prop.below.LLOD","text":"eset ExpressionSet object. flagged flag indicator sample exclusion.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limit of detection analysis — get.prop.below.LLOD","text":"updated ExpressionSet object.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limit of detection analysis — get.prop.below.LLOD","text":"","code":"library(Biobase) #> Loading required package: BiocGenerics #> Loading required package: parallel #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:parallel’: #>  #>     clusterApply, clusterApplyLB, clusterCall, clusterEvalQ, #>     clusterExport, clusterMap, parApply, parCapply, parLapply, #>     parLapplyLB, parRapply, parSapply, parSapplyLB #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. data(sample.ExpressionSet) exampleSet <- sample.ExpressionSet fData(exampleSet) #> data frame with 0 columns and 500 rows fData(exampleSet)$lod.max <- apply(exprs(exampleSet),1,quantile,runif(nrow(exampleSet))) lod <- get.prop.below.LLOD(exampleSet) #> Loading required namespace: stringr x <- dplyr::arrange(fData(lod),desc(pc.belowLOD.new)) knitr::kable(head(lod)) #>  #>  #> |   | AFFX.MurIL2_at| AFFX.MurIL10_at| AFFX.MurIL4_at| AFFX.MurFAS_at| AFFX.BioB.5_at| AFFX.BioB.M_at|sex    |type    | score| #> |:--|--------------:|---------------:|--------------:|--------------:|--------------:|--------------:|:------|:-------|-----:| #> |A  |       192.7420|        97.13700|       45.81920|       22.54450|        96.7875|        89.0730|Female |Control |  0.75| #> |B  |        85.7533|       126.19600|        8.83135|        3.60093|        30.4380|        25.8461|Male   |Case    |  0.40| #> |C  |       176.7570|        77.92160|       33.06320|       14.68830|        46.1271|        57.2033|Male   |Control |  0.73| #> |D  |       135.5750|        93.37130|       28.70720|       12.33970|        70.9319|        69.9766|Male   |Case    |  0.42| #> |E  |        64.4939|        24.39860|        5.94492|       36.86630|        56.1744|        49.5822|Female |Case    |  0.93| #> |F  |        76.3569|        85.50880|       28.29250|       11.25680|        42.6756|        26.1262|Male   |Control |  0.22| #> |G  |       160.5050|        98.90860|       30.96940|       23.00340|        86.5156|        75.0083|Male   |Case    |  0.96| #> |H  |        65.9631|        81.69320|       14.79230|       16.21340|        30.7927|        42.3352|Male   |Case    |  0.79| #> |I  |        56.9039|        97.80150|       14.23990|       12.03750|        19.7183|        41.1207|Female |Case    |  0.37| #> |J  |       135.6080|        90.48380|       34.48740|        4.54978|        46.3520|        91.5307|Male   |Control |  0.63| #> |K  |        63.4432|        70.57330|       20.35210|        8.51782|        39.1326|        39.9136|Male   |Case    |  0.26| #> |L  |        78.2126|        94.54180|       14.15540|       27.28520|        41.7698|        49.8397|Female |Control |  0.36| #> |M  |        83.0943|        75.34550|       20.62510|       10.16160|        80.2197|        63.4794|Male   |Case    |  0.41| #> |N  |        89.3372|        68.58270|       15.92310|       20.24880|        36.4903|        24.7007|Male   |Case    |  0.80| #> |O  |        91.0615|        87.40500|       20.15790|       15.78490|        36.4021|        47.4641|Female |Case    |  0.10| #> |P  |        95.9377|        84.45810|       27.81390|       14.32760|        35.3054|        47.3578|Female |Control |  0.41| #> |Q  |       179.8450|        87.68060|       32.79110|       15.94880|        58.6239|        58.1331|Female |Case    |  0.16| #> |R  |       152.4670|       108.03200|       33.52920|       14.67530|       114.0620|       104.1220|Male   |Control |  0.72| #> |S  |       180.8340|       134.26300|       19.81720|       -7.91911|        93.4402|       115.8310|Male   |Case    |  0.17| #> |T  |        85.4146|        91.40310|       20.41900|       12.88750|        22.5168|        58.1224|Female |Case    |  0.74| #> |U  |       157.9890|        -8.68811|       26.87200|       11.91860|        48.6462|        73.4221|Male   |Control |  0.35| #> |V  |       146.8000|        85.02120|       31.14880|       12.83240|        90.2215|        64.6066|Female |Control |  0.77| #> |W  |        93.8829|        79.29980|       22.34200|       11.13900|        42.0053|        40.3068|Male   |Control |  0.27| #> |X  |       103.8550|        71.65520|       19.01350|        7.55564|        57.5738|        41.8209|Male   |Control |  0.98| #> |Y  |        64.4340|        64.23690|       12.16860|       19.98490|        44.8216|        46.1087|Female |Case    |  0.94| #> |Z  |       175.6150|        78.70680|       17.37800|        8.96849|        61.7044|        49.4122|Female |Case    |  0.32| plot(x[,2], main=\"Random quantile cut off\", ylab=\"<lod%\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":null,"dir":"Reference","previous_headings":"","what":"Import OpenGWAS — import_OpenGWAS","title":"Import OpenGWAS — import_OpenGWAS","text":"function imports OpenGWAS.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import OpenGWAS — import_OpenGWAS","text":"","code":"import_OpenGWAS(opengwas_id, region, verbose = TRUE)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import OpenGWAS — import_OpenGWAS","text":"opengwas_id OpenGWAS id. region chr:start-end. verbose Extra information","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import OpenGWAS — import_OpenGWAS","text":"summary statistic object","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import OpenGWAS — import_OpenGWAS","text":"function derived SCALLOP/INF work.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import OpenGWAS — import_OpenGWAS","text":"Adapted function.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import OpenGWAS — import_OpenGWAS","text":"Lyon M, Andrews SJ, Elsworth B, Gaunt TR, Hemani G, Marcora E. variant call format provides efficient robust storage GWAS summary statistics. bioRxiv 2020.05.29.115824; doi: https://doi.org/10.1101/2020.05.29.115824","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import OpenGWAS — import_OpenGWAS","text":"","code":"if (FALSE) { options(width=200) gwasvcf::set_bcftools(path=file.path(HPC_WORK,\"bin\",\"bcftools\")) # MPV ARHGEF3 region opengwas_id <- \"ebi-a-GCST004599\" region <- \"3:56649749-57049749\" mpv_ARHGEF3 <- import_OpenGWAS(opengwas_id,region) # all immune-related INF <- Sys.getenv(\"INF\") HPC_WORK <- Sys.getenv(\"HPC_WORK\") opengwas_ids <- scan(file.path(INF,\"OpenGWAS\",\"ieu.list\"),what=\"\") unavail <-c(\"ieu-b-18\",\"finn-a-M13_SLE\",\"finn-a-D3_SARCOIDOSIS\") opengwas_ids <- subset(opengwas_ids,!opengwas_ids %in% unavail) region <- \"1:100-2000000\" library(pQTLtools) summary_list = purrr::map(opengwas_ids[1:2], ~import_OpenGWAS(., region)) }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":null,"dir":"Reference","previous_headings":"","what":"Import eQTL Catalogue — import_eQTLCatalogue","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"adopted function imports eQTL Catalogue.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"","code":"import_eQTLCatalogue(   ftp_path,   region,   selected_gene_id,   column_names,   verbose = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"ftp_path URL. region chr:start-end. selected_gene_id Ensembl gene ID. column_names Column names dataset. verbose Extra information.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"summary statistic object.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"function based eQTL-Catalogue-resources.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"Adapted function.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"Kerimov N., et al. (2020). \"eQTL Catalogue: compendium uniformly processed human gene expression splicing QTLs\", bioRxiv: 2020.2001.2029.924266, https://www.ebi.ac.uk/eqtl/.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"","code":"if (FALSE) { library(pQTLtools) invisible(lapply(c(\"dplyr\", \"ggplot2\", \"readr\", \"coloc\", \"GenomicRanges\",\"seqminer\"),                  require, character.only = TRUE)) ftp <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths.tsv\") tabix_paths <- read.delim(ftp, sep = \"\\t\", header = TRUE, stringsAsFactors = FALSE) %>%                dplyr::as_tibble() tfpi <- file.path(find.package(\"pQTLtools\", lib.loc=.libPaths()),\"eQTL-Catalogue\",                  \"tabix_ftp_paths_imported.tsv\") imported_tabix_paths <- read.delim(tfpi, sep = \"\\t\", stringsAsFactors = FALSE) %>%                         dplyr::as_tibble()  # MPV association at the ARHGEF3 locus region <- \"3:56615721-57015721\" ensGene <- \"ENSG00000163947\" platelet_df <- dplyr::filter(tabix_paths, study == \"CEDAR\", tissue_label == \"platelet\") hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\") column_names <- names(read.delim(hdr)) summary_stats <- import_eQTLCatalogue(platelet_df$ftp_path, region,                                       selected_gene_id = ensGene, column_names) summary_stats ggplot(summary_stats, aes(x = position, y = -log(pvalue, 10))) + geom_point() # gwasvcf::set_bcftools(path=file.path(HPC_WORK,\"bin\",\"bcftools\")) # GWAS sumstat from the same region # manually download and parse with gwasvcf # wget https://gwas.mrcieu.ac.uk/files/ebi-a-GCST004599/ebi-a-GCST004599.vcf.gz # wget https://gwas.mrcieu.ac.uk/files/ebi-a-GCST004599/ebi-a-GCST004599.vcf.gz.tbi # gwas_stats <- gwasvcf::query_gwas(\"ebi-a-GCST004599.vcf.gz\", chrompos = \"3:56649749-57049749\") # gwas_stats <- gwasvcf::vcf_to_granges(gwas_stats) %>% keepSeqlevels(\"3\") %>% renameSeqlevels(\"chr3\") # via import_OpenGWAS opengwas_id <- \"ebi-a-GCST004599\" region <- \"3:56649749-57049749\" gwas_stats <- import_OpenGWAS(opengwas_id,region) %>% keepSeqlevels(\"3\") %>%               renameSeqlevels(\"chr3\") f <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\") chain <- rtracklayer::import.chain(f) gwas_stats_hg38 <- rtracklayer::liftOver(gwas_stats, chain) %>%   unlist() %>%   renameSeqlevels(\"3\") %>%   dplyr::as_tibble() %>%   dplyr::transmute(chromosome = seqnames, position = start, AF, ES, SE, LP, SS) %>%   dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%   dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%   dplyr::group_by(id) %>%   dplyr::mutate(row_count = n()) %>%   dplyr::ungroup() %>%   dplyr::filter(row_count == 1) ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point() # Colocalisation res <- run_coloc(summary_stats, gwas_stats_hg38)  # a. all other eQTL datasets microarray_df <- dplyr::filter(tabix_paths, quant_method == \"microarray\") %>%                  dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\")) ftp_path_list <- setNames(as.list(microarray_df$ftp_path), microarray_df$qtl_id[1]) hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\") column_names <- names(read.delim(hdr)) summary_list <- purrr::map(ftp_path_list, ~import_eQTLCatalogue(., region,                            selected_gene_id = ensGene, column_names)) coloc_df_microarray <- purrr::map_df(summary_list, ~run_coloc(., gwas_stats_hg38),                                      .id = \"qtl_id\")  # b. Uniformly processed RNA-seq datasets rnaseq_df <- dplyr::filter(tabix_paths, quant_method == \"ge\") %>%              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\")) ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id) hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\") column_names <- names(read.delim(hdr)) safe_import <- purrr::safely(import_eQTLCatalogue) summary_list <- purrr::map(ftp_path_list, ~safe_import(., region,                            selected_gene_id = ensGene, column_names)) result_list <- purrr::map(summary_list, ~.$result) result_list <- result_list[!unlist(purrr::map(result_list, is.null))] coloc_df_rnaseq <- purrr::map_df(result_list, ~run_coloc(., gwas_stats_hg38),                                  .id = \"qtl_id\")  # c. GTEx_v8 imported eQTL datasets rnaseq_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\")) ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id) hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\") column_names <- names(read.delim(hdr)) safe_import <- purrr::safely(import_eQTLCatalogue) summary_list <- purrr::map(ftp_path_list, ~safe_import(., region,                            selected_gene_id = ensGene, column_names)) result_list <- purrr::map(summary_list, ~.$result) result_list <- result_list[!unlist(purrr::map(result_list, is.null))] result_filtered <- purrr::map(result_list, ~dplyr::filter(., !is.na(se))) coloc_df_imported <- purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38),                                    .id = \"qtl_id\")  coloc_df = dplyr::bind_rows(coloc_df_microarray, coloc_df_rnaseq, coloc_df_imported) dplyr::arrange(coloc_df, -PP.H4.abf) ggplot(coloc_df, aes(x = PP.H4.abf)) + geom_histogram() }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":null,"dir":"Reference","previous_headings":"","what":"A call to expressionSet class — make_ExpressionSet","title":"A call to expressionSet class — make_ExpressionSet","text":"really direct call Bioconductor/Biobase class.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A call to expressionSet class — make_ExpressionSet","text":"","code":"make_ExpressionSet(   assayData,   phenoData = Biobase::annotatedDataFrameFrom(assayData, byrow = FALSE),   featureData = Biobase::annotatedDataFrameFrom(assayData, byrow = TRUE),   experimentData = Biobase::MIAME(),   annotation = character(),   protocolData = Biobase::annotatedDataFrameFrom(assayData, byrow = FALSE),   ... )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A call to expressionSet class — make_ExpressionSet","text":"assayData Expression data. phenoData Phenotype. featureData featureData. experimentData Information data source. annotation Annotation information. protocolData protocol information. ... options.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A call to expressionSet class — make_ExpressionSet","text":"ExpressionSet object.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A call to expressionSet class — make_ExpressionSet","text":"explicit call make easier handle proteomic data downstream analyses.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A call to expressionSet class — make_ExpressionSet","text":"Adapted Bioconductor/Biobase following number proteomic pilot studies.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A call to expressionSet class — make_ExpressionSet","text":"","code":"dataDirectory <- system.file(\"extdata\", package=\"Biobase\") exprsFile <- file.path(dataDirectory, \"exprsData.txt\") exprs <- as.matrix(read.table(exprsFile, header=TRUE, sep=\"\\t\", row.names=1, as.is=TRUE)) pDataFile <- file.path(dataDirectory, \"pData.txt\") pData <- read.table(pDataFile, row.names=1, header=TRUE, sep=\"\\t\") all(rownames(pData)==colnames(exprs)) #> [1] TRUE metadata <- data.frame(labelDescription=                        c(\"Patient gender\",                          \"Case/control status\",                          \"Tumor progress on XYZ scale\"),                        row.names=c(\"gender\", \"type\", \"score\")) require(Biobase) require(pQTLtools) phenoData <- new(\"AnnotatedDataFrame\", data=pData, varMetadata=metadata) experimentData <- new(\"MIAME\",   name=\"Pierre Fermat\",   lab=\"Francis Galton Lab\",   contact=\"pfermat@lab.not.exist\",   title=\"Smoking-Cancer Experiment\",   abstract=\"An example ExpressionSet\",   url=\"www.lab.not.exist\",   other=list(notes=\"Created from text files\")) exampleSet <- make_ExpressionSet(exprs,phenoData,experimentData=experimentData,                                  annotation=\"hgu95av2\") data(sample.ExpressionSet) identical(exampleSet,sample.ExpressionSet) #> [1] FALSE invisible(esApply(exampleSet,2,hist))                           lm(score~gender+X31739_at,data=exampleSet) #>  #> Call: #> lm(formula = score ~ gender + X31739_at, data = exampleSet) #>  #> Coefficients: #> (Intercept)   genderMale    X31739_at   #>   0.6006673    0.0108515   -0.0003012   #>"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pQTLtools-internal.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal data/functions for pQTLtools — pQTLtools-internal","title":"Internal data/functions for pQTLtools — pQTLtools-internal","text":"list protein panels: caprion, hg10Tables, Olink_NGS, Olink_qPCR (inf1 edited differs counterpart R/gap), SomaLogic160410, swath_ms. cases incomplete information, datasets called hg19Tables based UCSC biomaRt Ensembl provided.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pQTLtools-internal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal data/functions for pQTLtools — pQTLtools-internal","text":"chr chromosome start Start position end End position gene Gene name UniProt UniProt ID","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pQTLtools-internal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Internal data/functions for pQTLtools — pQTLtools-internal","text":"seeds prototype extensions","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pQTLtools-internal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Internal data/functions for pQTLtools — pQTLtools-internal","text":"","code":"if (FALSE) { # datasets head(biomaRt)  # Olink-SomaLogic panel overlap p <- list(setdiff(inf1$uniprot,\"P23560\"),           setdiff(SomaLogic160410$UniProt[!is.na(SomaLogic160410$UniProt)],\"P23560\")) cnames <- c(\"INF1\",\"SomaLogic\") VennDiagram::venn.diagram(x = p, category.names=cnames,                           filename='os.png', imagetype=\"png\", output=TRUE) m <- merge(inf1,SomaLogic160410,by.x=\"uniprot\",by.y=\"UniProt\") u <- setdiff(with(m,unique(uniprot)),\"P23560\") options(width=220) o <- subset(inf1,uniprot %in% u) dim(o) o vars <- c(\"UniProt\",\"chr\",\"start\",\"end\",\"extGene\",\"Target\",\"TargetFullName\") s <- subset(SomaLogic160410[vars], UniProt %in% u) dim(s) us <- s[!duplicated(s),] dim(us) us  # SCALLOP/INF1 INF <- Sys.getenv(\"INF\") INF1_merge <- merge(inf1,                     read.delim(file.path(INF,\"work\",\"INF1.merge-rsid\"),as.is=TRUE),                     by=\"prot\") INF1_uniprot <- unique(with(INF1_merge,uniprot))  # INTERVAL SomaLogic at box HOME <- Sys.getenv(\"HOME\") box <- read.delim(file.path(HOME,\"SomaLogic\",\"doc\",\"INTERVAL-box.tsv\"),as.is=TRUE) box_INF1 <- subset(box,UniProt %in% INF1_uniprot) box_uniprot <- setdiff(unique(with(box_INF1,UniProt)),\"P23560\") setdiff(INF1_uniprot,box_uniprot)  # Phenoscanner database ps <- merge(subset(read.delim(file.path(INF,\"work\",\"pQTL_2018.txt.gz\"),as.is=TRUE),             pmid==29875488),             box,by.x=\"trait\",by.y=\"TargetFullName\") z <- subset(ps,UniProtgwas %in% INF1_uniprot & p<=1.5e-11)  # ST4 on Nature st4regions <- subset(st4, UniProt %in% INF1_uniprot) unique_uniprot_list <- setdiff(intersect(st4$UniProt,inf1$uniprot),\"P23560\") subset(INF1_merge,uniprot %in% unique_uniprot_list) }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic pQTL-MR analysis — pqtlMR","title":"Basic pQTL-MR analysis — pqtlMR","text":"function takes data intrumental variables produced format_data() used perform MR analysis list outcomes MR-Base.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic pQTL-MR analysis — pqtlMR","text":"","code":"pqtlMR(ivs, ids, mr_plot = FALSE, prefix = \"pQTL-combined-\", reverse = FALSE)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic pQTL-MR analysis — pqtlMR","text":"ivs Instrumental variables format_data(). ids list MR-Base IDs. mr_plot produce plots. prefix prefix output files. reverse TRUE, perform reverse MR.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic pQTL-MR analysis — pqtlMR","text":"value returned several files.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic pQTL-MR analysis — pqtlMR","text":"function based TwoSampleMR.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Basic pQTL-MR analysis — pqtlMR","text":"Adapted script Jie Zheng.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Basic pQTL-MR analysis — pqtlMR","text":"Zheng J, et al. (2020). Phenome-wide Mendelian randomization mapping influence plasma proteome complex diseases. Nature Genetics 52(10): 1122-1131.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic pQTL-MR analysis — pqtlMR","text":"","code":"library(TwoSampleMR) #> TwoSampleMR version 0.5.6  #> [>] New: Option to use non-European LD reference panels for clumping etc #> [>] Some studies temporarily quarantined to verify effect allele #> [>] See news(package='TwoSampleMR') and https://gwas.mrcieu.ac.uk for further details library(pQTLtools) # Original examples f <- file.path(find.package(\"pQTLtools\",lib.loc=.libPaths()),\"tests\",\"Ins.csv\") ivs <- format_data(read.csv(f)) ids <- c(\"ieu-a-7\",\"ebi-a-GCST007432\") pqtlMR(ivs, ids, mr_plot=FALSE) #> API: public: http://gwas-api.mrcieu.ac.uk/ #> Extracting data for 2 SNP(s) from 2 GWAS(s) #> Harmonising ABO (JlX5mT) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) #> Harmonising LIFR (22nSWQ) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) #> Harmonising ABO (JlX5mT) and Coronary heart disease || id:ieu-a-7 (ieu-a-7) #> Harmonising LIFR (22nSWQ) and Coronary heart disease || id:ieu-a-7 (ieu-a-7) #> Analysing '22nSWQ' on 'ebi-a-GCST007432' #> Analysing '22nSWQ' on 'ieu-a-7' #> Analysing 'JlX5mT' on 'ebi-a-GCST007432' #> Analysing 'JlX5mT' on 'ieu-a-7' # A bidirectional analysis f <- file.path(find.package(\"pQTLtools\",lib.loc=.libPaths()),\"tests\",\"ms.ins\") ivs <- format_data(read.table(f, header=TRUE), samplesize_col=\"N\") ids <- \"ieu-b-18\" # MR pqtlMR(ivs, ids, prefix=\"MS-\") #> Extracting data for 2 SNP(s) from 1 GWAS(s) #> Finding proxies for 1 SNPs in outcome ieu-b-18 #> Extracting data for 1 SNP(s) from 1 GWAS(s) #> Harmonising TNFB (b2ABCm) and multiple sclerosis || id:ieu-b-18 (ieu-b-18) #> Analysing 'b2ABCm' on 'ieu-b-18' # reverse MR pqtlMR(ivs, ids, ,prefix=\"MS_rev-\",reverse=TRUE) #> Extracting data for 2 SNP(s) from 1 GWAS(s) #> Finding proxies for 1 SNPs in outcome ieu-b-18 #> Extracting data for 1 SNP(s) from 1 GWAS(s) #> Harmonising TNFB (b2ABCm) and multiple sclerosis || id:ieu-b-18 (ieu-b-18) #> Analysing 'ieu-b-18' on 'b2ABCm'"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":null,"dir":"Reference","previous_headings":"","what":"phenoscanner regionqueries in batches — regionqueries","title":"phenoscanner regionqueries in batches — regionqueries","text":"R/phenoscanner allows certain number items supplied. simple function return large number calls batches well generating SNPIDs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phenoscanner regionqueries in batches — regionqueries","text":"","code":"regionqueries(   regionlist,   catalogue = \"pQTL\",   proxies = \"EUR\",   p = 5e-08,   r2 = 0.8,   build = 37,   wait = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phenoscanner regionqueries in batches — regionqueries","text":"regionlist list SNPs catalogue \"None\",\"eQTL\",\"mQTL\",\"methQTL\",\"pQTL\",\"GWAS\". proxies \"None\", \"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\". p p value threshold. r2 r2 LD. build 37, 38. wait flag wait 1hr every 50 regions.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phenoscanner regionqueries in batches — regionqueries","text":"returned value list containing tiles, regions results.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"phenoscanner regionqueries in batches — regionqueries","text":"Batches generated queries combined one.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"phenoscanner regionqueries in batches — regionqueries","text":"adapted custom codings","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"phenoscanner regionqueries in batches — regionqueries","text":"Sun BB, et al. (2018). Genomic atlas human plasma proteome. Nature 558: 73-79.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phenoscanner regionqueries in batches — regionqueries","text":"","code":"if (FALSE) { # single region regionqueries(\"chr17:26691290-26700110\")  # SCALLOP -- SomaLogic lookup from PhenoScanner INF <- Sys.getenv(\"INF\") INF1_merge <- merge(inf1,                   read.delim(file.path(INF,\"work\",\"INF1.merge-rsid\"),as.is=TRUE),                   by=\"prot\") INF1_merge_uniprot <- with(INF1_merge,unique(uniprot)) SomaLogic_INF1_merge <- subset(SomaLogic160410,UniProt %in% INF1_merge_uniprot) regions <- subset(INF1_merge,uniprot %in% with(SomaLogic_INF1_merge,UniProt)) singletons <- with(regions, Start-End<=2) flank <- 5e+2 regions[singletons,\"Start\"] <- regions[singletons,\"Start\"] - flank regions[singletons,\"End\"] <- regions[singletons,\"End\"] + flank reset <- with(regions,Start < 0) regions[reset,\"Start\"] <- 0 r <- regionqueries(with(regions,paste0(Chrom,\":\",Start,\"-\",End))) save(r,file=\"INF1_merge.rda\",compress='xz') r2 <- with(r, {  region_ext <- cbind(tiles,regions)  results_ext <- merge(region_ext,results,by=\"region\")  ord <- with(results_ext,order(group))  results_ext[ord,] }) results <- subset(r2,pmid==\"29875488\") grp <- names(table(with(results,group))) sink(\"INF1_merge.txt\") options(width=250) for(g in as.numeric(grp)) {   uniprot <- regions[g,\"uniprot\"]   SNP <- regions[g,\"SNP\"]   print(regions[g,])   s <- subset(results,group==g&rsid==SNP)   vars <- c(\"region\",\"group\",\"rsid\",\"hg19_coordinates\",\"hgnc\",\"beta\",\"se\",\"p\",\"snpid\")    if(nrow(s)>1) print(s[vars]) } sink() }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic TwoSampleMR analysis — run_TwoSampleMR","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"Given harmonised data, function conducts two-sample MR analysis.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"","code":"run_TwoSampleMR(TwoSampleMRinput, mr_plot = \"None\", prefix = \"\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"TwoSampleMRinput Harmonised data. mr_plot one \"None\", \"TwoSampleMR\", \"pQTLtools\" , original revised plots, respectively. prefix prefix output files.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"value returned several files.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"TwoSampleMR faces seemingly perplexing options, function intends simplify various steps two-sample MR. particularly useful large numbher MRs necessary, e.g., multiple proteins cis/trans regions need examined, case prefix direct output various directories.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"Adapted script Dimou NL, Tsilidis KK.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"Dimou NL, Tsilidis KK. Primer Mendelian Randomization Methodology Focus Utilizing Published Summary Association Data. Evangelos Evangelou (ed.), Genetic Epidemiology: Methods Protocols, Methods Molecular Biology, vol. 1793, https://doi.org/10.1007/978-1-4939-7868-7_13, Springer Science+Business Media, LLC, part Springer Nature 2018","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"","code":"library(TwoSampleMR) library(pQTLtools) outcomes <- \"ebi-a-GCST007432\" prot <- \"MMP.10\" type <- \"cis\" f <- paste0(prot,\"-\",type,\".mrx\") d <- read.table(file.path(find.package(\"pQTLtools\",lib.loc=.libPaths()),\"tests\",f),                 header=TRUE) exposure <- format_data(within(d,{P=10^logP}), phenotype_col=\"prot\", snp_col=\"rsid\",                         chr_col=\"Chromosome\", pos_col=\"Posistion\",                         effect_allele_col=\"Allele1\", other_allele_col=\"Allele2\",                         eaf_col=\"Freq1\", beta_col=\"Effect\", se_col=\"StdErr\",                         pval_col=\"P\", log_pval=FALSE,                         samplesize_col=\"N\") clump <- clump_data(exposure) #> Please look at vignettes for options on running this locally if you need to run many instances of this command. #> Clumping zYf2AC, 1106 variants, using EUR population reference #> Removing 1102 of 1106 variants due to LD with other variants or absence from LD reference panel outcome <- extract_outcome_data(snps=exposure$SNP,outcomes=outcomes) #> Extracting data for 1106 SNP(s) from 1 GWAS(s) #> Finding proxies for 155 SNPs in outcome ebi-a-GCST007432 #> Extracting data for 155 SNP(s) from 1 GWAS(s) harmonise <- harmonise_data(clump,outcome) #> Harmonising MMP.10 (zYf2AC) and FEV1 || id:ebi-a-GCST007432 (ebi-a-GCST007432) prefix <- paste(outcomes,prot,type,sep=\"-\") run_TwoSampleMR(harmonise, mr_plot=\"pQTLtools\", prefix=prefix) #> Analysing 'zYf2AC' on 'ebi-a-GCST007432'  #> Warning: Removed 1 rows containing missing values (geom_errorbarh). #> Warning: Removed 1 rows containing missing values (geom_point).   #> Warning: Removed 1 rows containing missing values (geom_errorbarh). #> Warning: Removed 1 rows containing missing values (geom_point).  caption <- \"Table. MMP.10 variants and FEV1\" knitr::kable(read.delim(paste0(prefix,\"-result.txt\"),header=TRUE),              caption=paste(caption, \"(result)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (result) #>  #> |id.exposure |id.outcome       |outcome                               |exposure |method                    | nsnp|         b|      se|  pval| #> |:-----------|:----------------|:-------------------------------------|:--------|:-------------------------|----:|---------:|-------:|-----:| #> |zYf2AC      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |MR Egger                  |    4| -0.000577| 0.01001| 0.959| #> |zYf2AC      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |Weighted median           |    4|  0.002002| 0.00641| 0.755| #> |zYf2AC      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |Inverse variance weighted |    4|  0.002067| 0.00594| 0.728| #> |zYf2AC      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |Simple mode               |    4|  0.004152| 0.00893| 0.673| #> |zYf2AC      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |Weighted mode             |    4|  0.001134| 0.00718| 0.885| knitr::kable(read.delim(paste0(prefix,\"-heterogeneity.txt\"),header=TRUE),              caption=paste(caption,\"(heterogeneity)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (heterogeneity) #>  #> |id.exposure |id.outcome       |outcome                               |exposure |method                    |     Q| Q_df| Q_pval| #> |:-----------|:----------------|:-------------------------------------|:--------|:-------------------------|-----:|----:|------:| #> |zYf2AC      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |MR Egger                  | 0.114|    2|  0.944| #> |zYf2AC      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |Inverse variance weighted | 0.222|    3|  0.974| knitr::kable(read.delim(paste0(prefix,\"-pleiotropy.txt\"),header=TRUE),              caption=paste(caption,\"(pleiotropy)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (pleiotropy) #>  #> |id.exposure |id.outcome       |outcome                               |exposure | egger_intercept|      se|  pval| #> |:-----------|:----------------|:-------------------------------------|:--------|---------------:|-------:|-----:| #> |zYf2AC      |ebi-a-GCST007432 |FEV1 &#124;&#124; id:ebi-a-GCST007432 |MMP.10   |         0.00143| 0.00434| 0.774| knitr::kable(read.delim(paste0(prefix,\"-single.txt\"),header=TRUE),              caption=paste(caption,\"(single)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (single) #>  #> |exposure |outcome                               |id.exposure |id.outcome       | samplesize|SNP                             |         b|      se|     p| #> |:--------|:-------------------------------------|:-----------|:----------------|----------:|:-------------------------------|---------:|-------:|-----:| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|rs11225354                      |  0.006425| 0.01217| 0.598| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|rs142915220                     | -0.003993| 0.02856| 0.889| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|rs17099622                      |  0.004360| 0.02229| 0.845| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|rs17860955                      |  0.000616| 0.00739| 0.934| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|All - Inverse variance weighted |  0.002067| 0.00594| 0.728| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|All - MR Egger                  | -0.000577| 0.01001| 0.959| knitr::kable(read.delim(paste0(prefix,\"-loo.txt\"),header=TRUE),              caption=paste(caption,\"(loo)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (loo) #>  #> |exposure |outcome                               |id.exposure |id.outcome       | samplesize|SNP         |        b|      se|     p| #> |:--------|:-------------------------------------|:-----------|:----------------|----------:|:-----------|--------:|-------:|-----:| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|rs11225354  | 0.000703| 0.00681| 0.918| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|rs142915220 | 0.002341| 0.00608| 0.700| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|rs17099622  | 0.001891| 0.00617| 0.759| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|rs17860955  | 0.004730| 0.01001| 0.636| #> |MMP.10   |FEV1 &#124;&#124; id:ebi-a-GCST007432 |zYf2AC      |ebi-a-GCST007432 |     321047|All         | 0.002067| 0.00594| 0.728| for (x in c(\"result\",\"heterogeneity\",\"pleiotropy\",\"single\",\"loo\"))     unlink(paste0(prefix,\"-\",x,\".txt\"))"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":null,"dir":"Reference","previous_headings":"","what":"Colocalisation analysis — run_coloc","title":"Colocalisation analysis — run_coloc","text":"function takes eQTL GWAS summary statistics colocalisation analysis..","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colocalisation analysis — run_coloc","text":"","code":"run_coloc(eqtl_sumstats, gwas_sumstats)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colocalisation analysis — run_coloc","text":"eqtl_sumstats eQTL summary data. gwas_sumstats GWAS summary data.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colocalisation analysis — run_coloc","text":"Summary coloc.abf.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":null,"dir":"Reference","previous_headings":"","what":"phenoscanner snpqueries in batches — snpqueries","title":"phenoscanner snpqueries in batches — snpqueries","text":"R/phenoscanner allows certain number items supplied. simple function return large number calls batches well generating SNPIDs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phenoscanner snpqueries in batches — snpqueries","text":"","code":"snpqueries(   snplist,   catalogue = \"pQTL\",   proxies = \"EUR\",   p = 5e-08,   r2 = 0.8,   build = 37,   wait = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phenoscanner snpqueries in batches — snpqueries","text":"snplist list SNPs. catalogue \"None\",\"eQTL\",\"mQTL\",\"methQTL\",\"pQTL\",\"GWAS\". proxies \"None\", \"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\". p p value threshold. r2 r2 LD. build 37, 38. wait flag wait 1hr every 500 SNPs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phenoscanner snpqueries in batches — snpqueries","text":"returned value list containing snps results:","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"phenoscanner snpqueries in batches — snpqueries","text":"Batches generated queries combined one.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"phenoscanner snpqueries in batches — snpqueries","text":"adapted custom codings","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"phenoscanner snpqueries in batches — snpqueries","text":"Sun BB, et al. (2018). Genomic atlas human plasma proteome. Nature 558: 73-79.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phenoscanner snpqueries in batches — snpqueries","text":"","code":"if (FALSE) {  # single SNP  snpqueries(\"rs704\")  # SCALLOP/INF INF <- Sys.getenv(\"INF\") rsid <- scan(paste(INF,'work','INF1.merge.snp',sep='/'),\"\") r <- snpqueries(rsid,catalogue='pQTL',p=1e-11) INTERVAL_Olink <- subset(with(r,results),efo=='EFO_0004747' & pmid=='29875488') save(INTERVAL_Olink,file='INTERVAL_Olink.rda',compress='xz') # --- query intersect proteins --- # SomaLogic intersect SomaLogic_overlap_list <- subset(st4,UniProt %in% intersect_list) r <- snpqueries(SomaLogic_overlap_list[,6],catalogue='pQTL',p=1e-11) SomaLogic_overlap <- subset(with(r,results),efo=='EFO_0004747' & pmid=='29875488') save(SomaLogic_overlap_list,SomaLogic_overlap,file='SomaLogic_overlap.rda',compress='xz') SomaLogic_result <- merge(SomaLogic_overlap_list,SomaLogic_overlap,                           by.x=\"Sentinel.variant*\",by.y=\"snp\") # Olink intersect INF1_merge_rsid <- read.delim(paste(INF,\"work\",\"INF1.merge-rsid\",sep=\"/\")) INF1_merge_rsid_uniprot <- merge(INF1_merge_rsid,inf1,by=\"prot\") Olink_overlap_list <- subset(INF1_merge_rsid_uniprot,uniprot %in% intersect_list) r <- snpqueries(with(Olink_overlap_list,MarkerName),catalogue='pQTL',p=1e-11) Olink_overlap <- subset(with(r,results),efo=='EFO_0004747' & pmid=='29875488') save(Olink_overlap_list,Olink_overlap,file='Olink_overlap.rda',compress='xz') Olink_result <- merge(Olink_overlap_list,Olink_overlap,by.x=\"MarkerName\",by.y=\"snp\") }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":null,"dir":"Reference","previous_headings":"","what":"UniProt IDs to others — uniprot2ids","title":"UniProt IDs to others — uniprot2ids","text":"function converts UniProt IDs others.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UniProt IDs to others — uniprot2ids","text":"","code":"uniprot2ids(uniprotid = \"ACC+ID\", to, query)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UniProt IDs to others — uniprot2ids","text":"uniprotid Source IDs. IDs. query query.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UniProt IDs to others — uniprot2ids","text":"UniProt-ID mapping","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UniProt IDs to others — uniprot2ids","text":"function based Python3 script UniProt.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"UniProt IDs to others — uniprot2ids","text":"Adapted script UniProt","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"UniProt IDs to others — uniprot2ids","text":"See https://www.uniprot.org/help/api_idmapping","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UniProt IDs to others — uniprot2ids","text":"","code":"if (FALSE) { uniprotid <- \"ACC+ID\" to <- \"CHEMBL_ID\" query <- noquote(inf1[[\"uniprot\"]]) query <- paste(query,collapse=\" \") r <- pQTLtools::uniprot2ids(uniprotid,to,query) cat(r,file=\"INF1.merge.chembl\") }"},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"pqtltools-01","dir":"Changelog","previous_headings":"","what":"pQTLtools 0.1","title":"pQTLtools 0.1","text":"… Suggest htmlwidgets, plotly Suggest cowplot, gap.datasets, httr, plyr, rmarkdown, Biobase, rGREAT, stringr Suggest circlize, openxlsx, knitr add HTML vignette (biomaRt, karyoploteR, regioneR) cis/trans-classification/ideogram/mhtplot2d examples Suggest GenomicRanges & IRanges handle >1MB region regionqueries wait= option Add pQTLtools.Rmd, es.Rmd SCALLOP-INF.Rmd articles Add LICENSE.md README.md Add listed publications pQTLs Sun et al. (2018) Suhre et al. (2020) Add run_TwoSampleMR(), make_ExpressionSet Add pqtlMR() based TwoSampleMR Add run_coloc() based coloc Add import_OpenGWAS therefore suggests gwasvcf, rtracklayer, VariantAnnotation Add import_eQTLCatalogue eQTL-Catalogue-resources suggesting seqminer Add genequries, regionqueries, snpqueries Add uniprot2ids() based UniProt Add biomaRt.rda, hg19.rda, hg19Tables.rda, inf1.rda, st4.rda, st6.rda, st18.rda, drop hgTables. Q8NF90 Q8WWJ7 inf1.rda listed UCSC, replaced P12034 P30203 UniProt Tidy various options SomaLogic lookup (panels, box, ST4, ST6) Import ggplot2 Replace ChangeLog NEWS.md document pkgdown. Invoke Roxygen2 documentation Import lmm template, use save(,compress=‘xz’) First release","code":""}]

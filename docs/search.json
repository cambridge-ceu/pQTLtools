[{"path":"https://jinghuazhao.github.io/pQTLtools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020-2023 Jing Hua Zhao Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"a-list-of-plots","dir":"Articles","previous_headings":"1 LocusZoom.js plots","what":"A list of plots","title":"LocusZoom.js","text":"figure starts default updated selected one two alternatives. HTML skeleton (lz.html) takes file named top_hits.json containing menu items, corresponds file GWAS summary statistics shown ","code":"htmltools::tags$iframe(src =\"lz.html\", width = \"100%\", height = \"600px\") [   [\"A1BG\", \"rs145685027\", \"19:58948122\"],   [\"ACE\", \"rs4353\", \"17:61570422\"] ] > d <- jsonlite::fromJSON(\"vignettes/data/ACE-rs4353.json\") > class(d) [1] \"list\" > lapply(d,class) $ppid [1] \"character\"  $data [1] \"data.frame\"  > lapply(d,head,3) $ppid [1] \"ACE-rs4353\"  $data           variant position ref_allele alt_allele_freq    beta log_pvalue 1 17:61322094_G/T 61322094          G          0.0154 -0.1899       0.69 2 17:61322221_G/A 61322221          G          0.1905  0.0190       0.22 3 17:61322307_G/T 61322307          G          0.9682  0.4065       5.65  > j <- jsonlite::toJSON(lapply(d,head,3)) > j {\"ppid\":[\"ACE-rs4353\"],\"data\":[{\"variant\":\"17:61322094_G/T\",\"position\":61322094,\"ref_allele\":\"G\",\"alt_allele_freq\":0.0154,\"beta\":-0.1899,\"log_pvalue\":0.69},{\"variant\":\"17:61322221_G/A\",\"position\":61322221,\"ref_allele\":\"G\",\"alt_allele_freq\":0.1905,\"beta\":0.019,\"log_pvalue\":0.22},{\"variant\":\"17:61322307_G/T\",\"position\":61322307,\"ref_allele\":\"G\",\"alt_allele_freq\":0.9682,\"beta\":0.4065,\"log_pvalue\":5.65}]}"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"stacked-association-plots","dir":"Articles","previous_headings":"1 LocusZoom.js plots","what":"Stacked association plots","title":"LocusZoom.js","text":"figure extends three panels.","code":"htmltools::tags$iframe(src = \"stack.html\", width = \"100%\", style=\"height: 1600px;\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"direct-access","dir":"Articles","previous_headings":"1 LocusZoom.js plots","what":"Direct access","title":"LocusZoom.js","text":"also direct links html files lz.html, https://jinghuazhao.github.io/pQTLtools/articles/lz.html. stack.html, https://jinghuazhao.github.io/pQTLtools/articles/stack.html.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"scallop-analysis","dir":"Articles","previous_headings":"","what":"SCALLOP analysis","title":"LocusZoom.js","text":"section details colocalization pQTL/disease overlap analysis.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"colocalization","dir":"Articles","previous_headings":"2 SCALLOP analysis","what":"Colocalization","title":"LocusZoom.js","text":"actual script cis-pQTL colocalization analysis GTEx v8 SCALLOP-INF.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"data","dir":"Articles","previous_headings":"2 SCALLOP analysis > 2.1 Colocalization","what":"Data","title":"LocusZoom.js","text":"data GWAS summary statistics GRCh37 VCF format, converted gwasvcf. GTEx association statistics GRCh38 downloaded eQTL Catalogue stored locally. Data microarray RNA-Seq remain eQTL Catalogue website.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"coloc-r","dir":"Articles","previous_headings":"2 SCALLOP analysis > 2.1 Colocalization","what":"coloc.R","title":"LocusZoom.js","text":"contains minor modification documentation example, options protein GWAS, microarray, RNA-Seq available respect variant-flanking gene regions. results generated, problem dplyr::arrange(df_gtex, -PP.H4.abf);p <- ggplot(df_gtex, aes(x = PP.H4.abf)) + geom_histogram().","code":"liftRegion <- function(x,chain,flanking=1e6) {   require(GenomicRanges)   gr <- with(x,GenomicRanges::GRanges(seqnames=chr,IRanges::IRanges(start,end))+flanking)   seqlevelsStyle(gr) <- \"UCSC\"   gr38 <- rtracklayer::liftOver(gr, chain)   chr <- gsub(\"chr\",\"\",colnames(table(seqnames(gr38))))   start <- min(unlist(start(gr38)))   end <- max(unlist(end(gr38)))   invisible(list(chr=chr[1],start=start,end=end,region=paste0(chr,\":\",start,\"-\",end))) }  sumstats <- function(prot,chr,region37) {   cat(\"GWAS sumstats\\n\")   vcf <- file.path(INF,\"METAL/gwas2vcf\",paste0(prot,\".vcf.gz\"))   gwas_stats <- gwasvcf::query_gwas(vcf, chrompos = region37) %>%                 gwasvcf::vcf_to_granges() %>%                 keepSeqlevels(chr) %>%                 renameSeqlevels(paste0(\"chr\",chr))   gwas_stats_hg38 <- rtracklayer::liftOver(gwas_stats, chain) %>%     unlist() %>% #   renameSeqlevels(chr) %>%     dplyr::as_tibble() %>%     dplyr::transmute(chromosome = seqnames,                      position = start, REF, ALT, AF, ES, SE, LP, SS) %>%     dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%     dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%     dplyr::group_by(id) %>%     dplyr::mutate(row_count = n()) %>%     dplyr::ungroup() %>%     dplyr::filter(row_count == 1) %>%     mutate(chromosome=gsub(\"chr\",\"\",chromosome)) }  microarray <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"a. eQTL datasets\\n\")   microarray_df <- dplyr::filter(tabix_paths, quant_method == \"microarray\") %>%                    dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(microarray_df$ftp_path), microarray_df$qtl_id[1])   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\")   column_names <- names(read.delim(hdr))   summary_list <- purrr::map(ftp_path_list, ~import_eQTLCatalogue(., region38,                              selected_gene_id = ensGene, column_names))   purrr::map_df(summary_list[lapply(summary_list,nrow)!=0],                 ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  rnaseq <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"b. Uniformly processed RNA-seq datasets\\n\")   rnaseq_df <- dplyr::filter(tabix_paths, quant_method == \"ge\") %>%                dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list, ~safe_import(., region38,                              selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list[lapply(result_list,nrow)!=0], ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   purrr::map_df(result_list, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  gtex <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"c. GTEx_v8 imported eQTL datasets\\n\")   gtex_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(gtex_df$ftp_path), gtex_df$qtl_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list,                              ~safe_import(., region38, selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  coloc <- function(prot,chr,ensGene,chain,region37,region38,out,run_all=FALSE) {   gwas_stats_hg38 <- sumstats(prot,chr,region37)   df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)   if (exists(\"df_gtex\"))   {     saveRDS(df_gtex,file=paste0(out,\".RDS\"))     dplyr::arrange(df_gtex, -PP.H4.abf)     p <- ggplot(df_gtex, aes(x = PP.H4.abf)) + geom_histogram()   }   if (run_all)   {     df_microarray <- microarray(gwas_stats_hg38,ensGene,region38)     df_rnaseq <- rnaseq(gwas_stats_hg38,ensGene,region38)     if (exists(\"df_microarray\") & exits(\"df_rnaseq\") & exists(\"df_gtex\"))     {       coloc_df = dplyr::bind_rows(df_microarray, df_rnaseq, df_gtex)       saveRDS(coloc_df, file=paste0(out,\".RDS\"))       dplyr::arrange(coloc_df, -PP.H4.abf)       p <- ggplot(coloc_df, aes(x = PP.H4.abf)) + geom_histogram()     }   }   s <- ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point()   ggsave(plot = s, filename = paste0(out, \"-assoc.pdf\"), path = \"\", device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300)   ggsave(plot = p, filename = paste0(out, \"-hist.pdf\"), path = \"\", device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300) }  single_run <- function(r) {   sentinel <- sentinels[r,]   chr <- with(sentinel,Chr)   ss <- subset(inf1,prot==sentinel[[\"prot\"]])   ensRegion37 <- with(ss,                       {                         start <- start-M                         if (start<0) start <- 0                         end <- end+M                         paste0(chr,\":\",start,\"-\",end)                       })   ensGene <- ss[[\"ensembl_gene_id\"]]   ensRegion38 <- with(liftRegion(ss,chain),region)   f <- file.path(INF,\"coloc\",with(sentinel,paste0(prot,\"-\",SNP)))   cat(chr,ensGene,ensRegion37,ensRegion38,\"\\n\")   coloc(sentinel[[\"prot\"]],chr,ensGene,chain,ensRegion37,ensRegion38,f) }  # slow with the following loop: loop <- function() for (r in 1:nrow(sentinels)) single_run(r)  library(pQTLtools) f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\") chain <- rtracklayer::import.chain(f) pkgs <- c(\"dplyr\", \"ggplot2\", \"readr\", \"coloc\", \"GenomicRanges\",\"seqminer\") invisible(lapply(pkgs, require, character.only = TRUE)) HPC_WORK <- Sys.getenv(\"HPC_WORK\") gwasvcf::set_bcftools(file.path(HPC_WORK,\"bin\",\"bcftools\")) f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths.tsv\") tabix_paths <- read.delim(f, stringsAsFactors = FALSE) %>% dplyr::as_tibble() HOME <- Sys.getenv(\"HOME\") fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_gtex.tsv\") imported_tabix_paths <- within(read.delim(fp, stringsAsFactors = FALSE) %>% dplyr::as_tibble(),       {          f <- lapply(strsplit(ftp_path,\"/csv/|/ge/\"),\"[\",3)          ftp_path <- paste0(\"~/rds/public_databases/GTEx/csv\"),f)       }) library(dplyr) INF <- Sys.getenv(\"INF\") M <- 1e6 sentinels <- subset(read.csv(file.path(INF,\"work\",\"INF1.merge.cis.vs.trans\")),cis) cvt_rsid <- file.path(INF,\"work\",\"INF1.merge.cis.vs.trans-rsid\") prot_rsid <- subset(read.delim(cvt_rsid,sep=\" \"),cis,select=c(prot,SNP)) # Faster with parallel Bash runs. r <- as.integer(Sys.getenv(\"r\")) single_run(r)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"collection-of-results","dir":"Articles","previous_headings":"2 SCALLOP analysis > 2.1 Colocalization","what":"Collection of results","title":"LocusZoom.js","text":"furnished keep results (.e., PP4>=0.8) follows,","code":"collect <- function() {   df_coloc <- data.frame()   for(r in 1:nrow(sentinels))   {     prot <- sentinels[[\"prot\"]][r]     snpid <- sentinels[[\"SNP\"]][r]     rsid <- prot_rsid[[\"SNP\"]][r]     f <- file.path(INF,\"coloc\",paste0(prot,\"-\",snpid,\".RDS\"))     if (!file.exists(f)) next     cat(prot,\"-\",rsid,\"\\n\")     rds <- readRDS(f)     if (nrow(rds)==0) next     df_coloc <- rbind(df_coloc,data.frame(prot=prot,rsid=rsid,snpid=snpid,rds))   }   df_coloc <- within(df_coloc,{qtl_id <- gsub(\"GTEx_V8_\",\"\",qtl_id)}) %>%               rename(H0=PP.H0.abf,H1=PP.H1.abf,H2=PP.H2.abf,H3=PP.H3.abf,H4=PP.H4.abf)   write.table(subset(df_coloc,H4>=0.8),               file=file.path(INF,\"coloc\",\"GTEx.tsv\"),               quote=FALSE,row.names=FALSE,sep=\"\\t\") } collect()"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"the-driver-program","dir":"Articles","previous_headings":"2 SCALLOP analysis > 2.1 Colocalization","what":"The driver program","title":"LocusZoom.js","text":"Bash.","code":"#!/usr/bin/bash  for r in {1..59} do    export r=${r}    export cvt=${INF}/work/INF1.merge.cis.vs.trans    read prot MarkerName < \\                         <(awk -vFS=\",\" '$14==\"cis\"' ${cvt} | \\                           awk -vFS=\",\" -vr=${r} 'NR==r{print $2,$5}')    echo ${r} - ${prot} - ${MarkerName}    export prot=${prot}    export MarkerName=${MarkerName}    if [ ! -f ${INF}/coloc/${prot}-${MarkerName}.pdf ] || \\       [ ! -f ${INF}/coloc/${prot}-${MarkerName}.RDS ]; then      cd ${INF}/coloc      R --no-save < ${INF}/rsid/coloc.R 2>&1 | \\      tee ${prot}-${MarkerName}.log      cd -    fi done"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"parallel-computing","dir":"Articles","previous_headings":"2 SCALLOP analysis > 2.1 Colocalization","what":"Parallel computing","title":"LocusZoom.js","text":"speed analysis, resort SLURM,","code":"#!/usr/bin/bash  #SBATCH --job-name=_coloc #SBATCH --account CARDIO-SL0-CPU #SBATCH --partition cardio #SBATCH --qos=cardio #SBATCH --array=1-59 #SBATCH --mem=28800 #SBATCH --time=5-00:00:00 #SBATCH --error=/rds/user/jhz22/hpc-work/work/_coloc_%A_%a.err #SBATCH --output=/rds/user/jhz22/hpc-work/work/_coloc_%A_%a.out #SBATCH --export ALL  export trait=$(awk 'NR==ENVIRON[\"SLURM_ARRAY_TASK_ID\"] {print $1}' ${INF}/work/inf1.tmp)  function gtex() {   export r=${SLURM_ARRAY_TASK_ID}   export cvt=${INF}/work/INF1.merge.cis.vs.trans   read prot MarkerName < \\                        <(awk -vFS=\",\" '$14==\"cis\"' ${cvt} | \\                          awk -vFS=\",\" -vr=${r} 'NR==r{print $2,$5}')   echo ${r} - ${prot} - ${MarkerName}   export prot=${prot}   export MarkerName=${MarkerName}   if [ ! -f ${INF}/coloc/${prot}-${MarkerName}.pdf ] || \\      [ ! -f ${INF}/coloc/${prot}-${MarkerName}.RDS ]; then     cd ${INF}/coloc     R --no-save < ${INF}/rsid/coloc.R 2>&1 | \\     tee ${prot}-${MarkerName}.log     cd -   fi }  gtex"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"pqtldisease-overlap","dir":"Articles","previous_headings":"2 SCALLOP analysis","what":"pQTL/disease overlap","title":"LocusZoom.js","text":"ontology traits/disease available Experimental Factor Ontology (EFO)1, can used build lists diseases immune-mediated traits filter search results PhenoScanner2.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"diseases","dir":"Articles","previous_headings":"2 SCALLOP analysis > 2.2 pQTL/disease overlap","what":"Diseases","title":"LocusZoom.js","text":"","code":"library(ontologyIndex) # http://www.ebi.ac.uk/efo/efo.obo INF <- Sys.getenv(\"INF\") file <- file.path(INF,\"ebi\",\"efo-3.26.0\",\"efo.obo\") get_relation_names(file) efo <- get_ontology(file, extract_tags=\"everything\")  id <- function(ontology) {   length(ontology)   length(ontology$id)   inf <- grep(ontology$name,pattern=\"immune|inflammatory\")   data.frame(id=ontology$id[inf],name=ontology$name[inf]) }  goidname <- id(go) efoidname <- id(efo) # all diseases efo_diseases <- get_descendants(efo,\"EFO:0000408\") diseases_name <- efo$name[efo_diseases] diseases <- data.frame(efo_diseases,diseases_name) write.table(diseases,file=file.path(INF,\"ebi\",\"efo-3.26.0\",\"efo_diseases.csv\"),col.names=FALSE,row.names=FALSE,sep=\",\") # immune system diseases (isd) efo_0000540 <- get_descendants(efo,\"EFO:0000540\") efo_0000540name <- efo$name[efo_0000540] isd <- data.frame(efo_0000540,efo_0000540name) library(ontologyPlot) onto_plot(efo,efo_0000540)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"lookup","dir":"Articles","previous_headings":"2 SCALLOP analysis > 2.2 pQTL/disease overlap","what":"Lookup","title":"LocusZoom.js","text":"","code":"suppressMessages(library(dplyr)) suppressMessages(library(gap)) suppressMessages(library(pQTLtools))  inf1_prot <- vector() for(i in 1:92) inf1_prot[inf1[i,\"prot\"]] <- mutate(inf1[i,],target.short=if_else(!is.na(alt_name),alt_name,target.short))[[\"target.short\"]] INF1_metal <- within(read.delim(file.path(find.package(\"pQTLtools\"),\"tests\",\"INF1.METAL\"),as.is=TRUE),{                     hg19_coordinates=paste0(\"chr\",Chromosome,\":\",Position)}) %>%                     rename(INF1_rsid=rsid, Total=N) %>%                     left_join(pQTLdata::inf1[c(\"prot\",\"gene\",\"target.short\",\"alt_name\")]) %>%                     mutate(target.short=if_else(!is.na(alt_name),alt_name,target.short)) %>%                     select(-alt_name) INF1_aggr <- INF1_metal %>%              select(Chromosome,Position,target.short,gene,hg19_coordinates,                     MarkerName,Allele1,Allele2,Freq1,Effect,StdErr,log.P.,cis.trans,INF1_rsid) %>%              group_by(Chromosome,Position,MarkerName,INF1_rsid,hg19_coordinates) %>%              summarise(nprots=n(),                        prots=paste(target.short,collapse=\";\"),                        Allele1=paste(toupper(Allele1),collapse=\";\"),                        Allele2=paste(toupper(Allele2),collapse=\";\"),                        EAF=paste(Freq1,collapse=\";\"),                        Effects=paste(Effect,collapse=\";\"),                        SEs=paste(StdErr,collapse=\";\"),                        log10P=paste(log.P.,collapse=\";\"),                        cistrans=paste(cis.trans,collapse=\";\")) %>%              data.frame() rsid <- INF1_aggr[[\"INF1_rsid\"]] catalogue <- \"GWAS\" proxies <- \"EUR\" p <- 5e-8 r2 <- 0.8 build <- 37  INF <- Sys.getenv(\"INF\") efo_diseases <- read.table(file.path(INF,\"ebi\",\"efo-3.26.0\",\"efo_diseases.csv\"),col.names=c(\"efo\",\"disease\"),as.is=TRUE,sep=\",\") %>%                 mutate(efo=gsub(\":\", \"_\", efo))  r <- snpqueries(rsid, catalogue=catalogue, proxies=proxies, p=p, r2=r2, build=build) lapply(r,dim) snps_results <- with(r,right_join(snps,results)) ps <- subset(snps_results,select=-c(hg38_coordinates,ref_hg38_coordinates,pos_hg38,ref_pos_hg38,dprime)) aggr <- subset(within(INF1_aggr,{HLA <- as.numeric(Chromosome==6 & Position >= 25392021 & Position <= 33392022)}),                select=-c(Chromosome,Position,INF1_rsid)) short <- merge(aggr,ps,by=\"hg19_coordinates\")  gwas <- function() {   short <- merge(aggr,ps,by=\"hg19_coordinates\") %>%            filter(efo %in% pull(efo_diseases,efo)) %>%            left_join(efo_diseases)   v <- c(\"prots\",\"hgnc\",\"MarkerName\",\"cistrans\",\"Effects\",\"Allele1\",\"Allele2\",\"rsid\",\"a1\",\"a2\",\"efo\",          \"ref_rsid\",\"ref_a1\",\"ref_a2\",\"proxy\",\"r2\",          \"HLA\",\"beta\",\"se\",\"p\",\"disease\",\"n_cases\",\"n_controls\",\"unit\",\"ancestry\",\"pmid\",\"study\")   mat <- within(short[v],   {     flag <- (HLA==1)     prefix <- paste0(prots,\"-\",rsid)     prefix[flag] <- paste0(prefix[flag],\"*\")     rsidProts <- paste0(prefix,\" (\",hgnc,\")\")     efoTraits <- gsub(\"\\\\b(^[a-z])\",\"\\\\U\\\\1\",disease,perl=TRUE)     qtl_direction <- sign(as.numeric(beta))   })   combined <- group_by(mat,efoTraits,rsidProts,desc(n_cases)) %>%               summarize(direction=paste(qtl_direction,collapse=\";\"),                         betas=paste(beta,collapse=\";\"),                         units=paste(unit,collapse=\";\"),                         studies=paste(study,collapse=\";\"),                         diseases=paste(disease,collapse=\";\"),                         cases=paste(n_cases,collapse=\";\")                        ) %>%               data.frame()   rxc <- with(combined,table(efoTraits,rsidProts))   for(cn in colnames(rxc)) for(rn in rownames(rxc)) {      cnrn <- subset(combined,efoTraits==rn & rsidProts==cn)      if(nrow(cnrn)==0) next      rxc[rn,cn] <- as.numeric(unlist(strsplit(cnrn[[\"direction\"]],\";\"))[1])   }   write.table(mat,file=file.path(INF,\"work\",\"pQTL-disease-GWAS.csv\"),row.names=FALSE,quote=FALSE,sep=\",\")   write.table(combined,file=file.path(INF,\"work\",\"pQTL-disease-GWAS-combined.csv\"),row.names=FALSE,quote=FALSE,sep=\",\")   rxc }  rxc <- gwas()"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"visualization","dir":"Articles","previous_headings":"2 SCALLOP analysis > 2.2 pQTL/disease overlap","what":"Visualization","title":"LocusZoom.js","text":"Figure 2.1: pQTL-disease overlap","code":"SF <- function(rxc, f=\"SF-pQTL-GWAS.png\", ch=21, cw=21, h=13, w=18) {   library(pheatmap)   col <- colorRampPalette(c(\"#4287f5\",\"#ffffff\",\"#e32222\"))(3)   library(grid)   png(file.path(INF,f),res=300,width=w,height=h,units=\"in\")   setHook(\"grid.newpage\", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name=\"vp\", just=c(\"right\",\"top\"))), action=\"prepend\")   colnames(rxc) <- gsub(\"^[0-9]*-\",\"\",colnames(rxc))   pheatmap(rxc, legend=FALSE, angle_col=\"270\", border_color=\"black\", color=col, cellheight=ch, cellwidth=cw, cluster_rows=TRUE, cluster_cols=FALSE, fontsize=8)   setHook(\"grid.newpage\", NULL, \"replace\")   grid.text(\"Protein(s)-pQTL (gene)\", y=0.03125, gp=gpar(fontsize=12))   grid.text(\"GWAS diseases\", x=-0.0625, rot=90, gp=gpar(fontsize=12))   dev.off() }  SF(rxc,f=\"SF-pQTL-GWAS.png\",ch=8,cw=8,h=11,w=8.6)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"caprion-analysis","dir":"Articles","previous_headings":"","what":"Caprion analysis","title":"LocusZoom.js","text":"Caprion project, https://jinghuazhao.github.io/Caprion/.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"colocalization-1","dir":"Articles","previous_headings":"3 Caprion analysis","what":"Colocalization","title":"LocusZoom.js","text":"coloc.R modified slightly employing basename local files. single_run() called analysis SLURM collect() summary need SLURM.","code":"liftRegion <- function(x, flanking = 1e6) {   gr <- GenomicRanges::GRanges(seqnames = x$chr,                                ranges = IRanges::IRanges(start = x$start - flanking, end = x$end + flanking))   seqlevelsStyle(gr) <- \"UCSC\"   f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\")   chain <- rtracklayer::import.chain(f)   gr38 <- rtracklayer::liftOver(gr, chain)   lifted_chromosomes <- seqnames(gr38)   lifted_start <- min(start(gr38))   lifted_end <- max(end(gr38))   chr <- gsub(\"chr\",\"\",colnames(table(lifted_chromosomes)))   region <- paste0(chr, \":\", lifted_start, \"-\", lifted_end)   invisible(list(chr = chr, start = lifted_start, end = lifted_end, region = region)) }  sumstats <- function(prot,chr,region37,chain) {   cat(\"GWAS sumstats\\n\")   tbl <- file.path(analysis,\"METAL_dr\",paste0(prot,\"_dr-1.tbl.gz\"))   gwas_texts <- seqminer::tabix.read(tbl, tabixRange = region37)   gwas_stats <- read.table(text = gwas_texts, sep = \"\\t\", header = FALSE) %>%                 setNames(c(\"Chromosome\",\"Position\",\"ID\",\"Allele1\",\"Allele2\",\"Freq1\",\"FreqSE\",\"MinFreq\",\"MaxFreq\",                            \"Effect\",\"StdErr\",\"logP\",\"Direction\",\"HetISq\",\"HetChiSq\",\"HetDf\",\"logHetP\",\"N\"))   gwas_granges <- with(gwas_stats,GRanges(seqnames = paste0(\"chr\",dplyr::if_else(Chromosome==23,\"X\",paste(Chromosome))),                        ranges = IRanges(start = Position, end = Position),                        id = ID,REF=Allele2,ALT=Allele1,AF=Freq1,ES=Effect,SE=StdErr,LP=-logP,SS=N))   f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\")   chain <- rtracklayer::import.chain(f)   gwas_stats_hg38 <- rtracklayer::liftOver(gwas_granges, chain) %>%                      unlist() %>%                      dplyr::as_tibble() %>%                      dplyr::transmute(chromosome = seqnames,                                       position = start, REF, ALT, AF, ES, SE, LP, SS) %>%                      dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%                      dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%                      dplyr::group_by(id) %>%                      dplyr::mutate(row_count = n()) %>%                      dplyr::ungroup() %>%                      dplyr::filter(row_count == 1) %>%                      mutate(chromosome=gsub(\"chr\",\"\",chromosome)) }  microarray <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"a. eQTL datasets\\n\")   microarray_df <- dplyr::filter(tabix_paths, quant_method == \"microarray\") %>%                    dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(microarray_df$ftp_path), microarray_df$qtl_id[1])   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\")   column_names <- names(read.delim(hdr))   summary_list <- purrr::map(ftp_path_list, ~import_eQTLCatalogue(., region38,                              selected_gene_id = ensGene, column_names))   purrr::map_df(summary_list[lapply(summary_list,nrow)!=0],                 ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  rnaseq <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"b. Uniformly processed RNA-seq datasets\\n\")   rnaseq_df <- dplyr::filter(tabix_paths, quant_method == \"ge\") %>%                dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list, ~safe_import(., region38,                              selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list[lapply(result_list,nrow)!=0], ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   purrr::map_df(result_list, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  gtex <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"c. GTEx_v8 imported eQTL datasets\\n\")   fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_gtex.tsv\")   imported_tabix_paths <- read.delim(fp, stringsAsFactors = FALSE) %>%                           dplyr::mutate(ftp_path=file.path(\"~/rds/public_databases/GTEx/csv\",basename(ftp_path)))   gtex_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(gtex_df$ftp_path), gtex_df$qtl_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list,                              ~safe_import(., region38, selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   prot <- sentinels[[\"prot\"]][r]   invisible(sapply(1:length(result_filtered), function(i) {       if (!is.null(result_filtered[[i]])) {           prot_name <- names(result_filtered)[i]           if (!is.null(prot_name)) {               f <- file.path(analysis, \"coloc\", \"GTEx\", \"sumstats\", paste0(prot, \"-\", prot_name, \".gz\"))               gz <- gzfile(f, \"w\")               write.table(result_filtered[[i]], file = gz, col.names = TRUE, row.names = FALSE, quote = FALSE, sep = \"\\t\")               close(gz)           } else {               warning(paste(\"Missing name for index\", i))           }       }   }))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  ge <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"d. eQTL datasets\\n\")   fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_ge.tsv\")   imported_tabix_paths <- read.delim(fp, stringsAsFactors = FALSE) %>%                           dplyr::mutate(ftp_path=file.path(\"~/rds/public_databases/eQTLCatalogue\",basename(ftp_path)))   ftp_path_list <- setNames(as.list(imported_tabix_paths$ftp_path), imported_tabix_paths$unique_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list,                              ~safe_import(., region38, selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   prot <- sentinels[[\"prot\"]][r]   invisible(sapply(1:length(result_filtered), function(i) {       if (!is.null(result_filtered[[i]])) {           prot_name <- names(result_filtered)[i]           if (!is.null(prot_name)) {               f <- file.path(analysis, \"coloc\", \"eQTLCatalogue\", \"sumstats\", paste0(prot, \"-\", prot_name, \".gz\"))               gz <- gzfile(f, \"w\")               write.table(result_filtered[[i]], file = gz, col.names = TRUE, row.names = FALSE, quote = FALSE, sep = \"\\t\")               close(gz)           } else {               warning(paste(\"Missing name for index\", i))           }       }   }))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"unique_id\") }  gtex_coloc <- function(prot,chr,ensGene,chain,region37,region38,out) {   gwas_stats_hg38 <- sumstats(prot,chr,region37,chain)   df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)   if (!exists(\"df_gtex\")) return   saveRDS(df_gtex,file=paste0(out,\".rds\"))   p <- ggplot(df_gtex, aes(x = PP.H4.abf)) + geom_histogram()   s <- ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point()   ggplot2::ggsave(plot = s, filename = paste0(out, \".assoc.pdf\"), device = \"pdf\",                   height = 15, width = 15, units = \"cm\", dpi = 300)   ggplot2::ggsave(plot = p, filename = paste0(out, \".hist.pdf\"), device = \"pdf\",                   height = 15, width = 15, units = \"cm\", dpi = 300) }  ge_coloc <- function(prot,chr,ensGene,chain,region37,region38,out) {   gwas_stats_hg38 <- sumstats(prot,chr,region37)   df_ge <- ge(gwas_stats_hg38,ensGene,region38)   if (!exists(\"df_ge\")) return   saveRDS(df_ge,file=paste0(out,\".rds\"))   p <- ggplot(df_ge, aes(x = PP.H4.abf)) + geom_histogram()   s <- ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point()   ggsave(plot = s, filename = paste0(out, \".assoc.pdf\"), device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300)   ggsave(plot = p, filename = paste0(out, \".hist.pdf\"), device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300) }  all_coloc <- function(prot,chr,ensGene,chain,region37,region38,out) {   gwas_stats_hg38 <- sumstats(prot,chr,region37)   df_microarray <- microarray(gwas_stats_hg38,ensGene,region38)   df_rnaseq <- rnaseq(gwas_stats_hg38,ensGene,region38)   df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)   df_ge <- ge(gwas_stats_hg38,ensGene,region38)   if (exists(\"df_microarray\") & exits(\"df_rnaseq\") & exists(\"df_gtex\") & exists(\"df_ge\"))   {     coloc_df = dplyr::bind_rows(df_microarray, df_rnaseq, df_gtex, df_ge)     saveRDS(coloc_df, file=paste0(out,\"-all.rds\"))     p <- ggplot(coloc_df, aes(x = PP.H4.abf)) + geom_histogram()   }   s <- ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point()   ggsave(plot = s, filename = paste0(out, \"-assoc.pdf\"), device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300)   ggsave(plot = p, filename = paste0(out, \"-hist.pdf\"), device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300) }  single_run <- function(r, batch=\"GTEx\") {   sentinel <- sentinels[r,]   prot <- sentinel[[\"prot\"]]   chr <- sentinel[[\"geneChrom\"]]   ensRegion37 <- with(sentinel,                       {                         start <- geneStart-M                         if (start<0) start <- 0                         end <- geneEnd+M                         paste0(chr,\":\",start,\"-\",end)                       })   ss <- subset(pQTLdata::caprion,Protein==paste0(sentinel[[\"prot\"]],\"_HUMAN\"))   ensGene <- ss[[\"ensGenes\"]]   x <- with(sentinel,list(chr=geneChrom,start=geneStart,end=geneEnd))   lr <- liftRegion(x)   ensRegion38 <- with(lr,paste0(chr,\":\",start-M,\"-\",end+M))   cat(chr,ensGene,ensRegion37,ensRegion38,\"\\n\")   f <- file.path(analysis,\"coloc\",batch,with(sentinel,paste0(prot,\"-\",SNP)))   if (batch==\"GTEx\")   {     gtex_coloc(prot,chr,ensGene,chain,ensRegion37,ensRegion38,f)   } else {     ge_coloc(prot,chr,ensGene,chain,ensRegion37,ensRegion38,f)   } }  collect <- function(batch=\"GTEx\") # to collect results when all single runs are done {   df_coloc <- data.frame()   for(r in 1:nrow(sentinels))   {     prot <- sentinels[[\"prot\"]][r]     snpid <- sentinels[[\"SNP\"]][r]     rsid <- prot_rsid[[\"SNP\"]][r]     f <- file.path(analysis,\"coloc\",batch,paste0(prot,\"-\",snpid,\".rds\"))     if (!file.exists(f)) next     cat(prot,\"-\",rsid,\"\\n\")     rds <- readRDS(f)     if (nrow(rds)==0) next     df_coloc <- rbind(df_coloc,data.frame(prot=prot,rsid=rsid,snpid=snpid,rds))   }   f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\")   chain <- rtracklayer::import.chain(f)   gr <- with(arrange(pQTLdata::caprion,Protein), {              GenomicRanges::GRanges(seqnames = chr,                                     ranges = IRanges::IRanges(start = start - M, end = end + M),                                     Protein=Protein,Gene=Gene)              })   seqlevelsStyle(gr) <- \"UCSC\"   gr38 <- rtracklayer::liftOver(gr,chain)   gr38_new <- lapply(gr38, function(gr) {     valid_start <- start(gr)[!is.na(start(gr))]     valid_end <- end(gr)[!is.na(end(gr))]     if (length(valid_start) > 0 && length(valid_end) > 0) {       min_start <- min(valid_start)       min_end <- min(valid_end)       new_gr <- GRanges(         seqnames = seqnames(gr)[1],         ranges = IRanges(start = min_start, end = min_end),         strand = strand(gr)[1],         Protein = ifelse(length(mcols(gr)$Protein) > 0, unique(mcols(gr)$Protein)[1], NA),         Gene = ifelse(length(mcols(gr)$Gene) > 0, unique(mcols(gr)$Gene)[1], NA)       )       return(new_gr)     } else {       return(NULL)     }   })   gr38_new <- gr38_new[!sapply(gr38_new, is.null)]   df38 <- do.call(rbind, lapply(gr38_new, function(gr) {              data.frame(                 seqnames = as.character(seqnames(gr)),                 start = start(gr),                 end = end(gr),                 strand = as.character(strand(gr)),                 Protein = mcols(gr)$Protein,                 Gene = mcols(gr)$Gene              )              })) %>%           mutate(range38=paste0(gsub(\"chr\",\"\",seqnames),\":\",start,\"-\",end)) %>%           select(Protein,Gene,range38)   caprion_upd <- pQTLdata::caprion %>%                  mutate(prot=gsub(\"_HUMAN\",\"\",Protein),gene=Gene) %>%                  left_join(df38)   df <- dplyr::rename(df_coloc,H0=PP.H0.abf,H1=PP.H1.abf,H2=PP.H2.abf,H3=PP.H3.abf,H4=PP.H4.abf) %>%         dplyr::left_join(caprion_upd[c(\"prot\",\"gene\",\"range38\")])   if (batch==\"GTEx\") {     df_coloc <- within(df,{qtl_id <- gsub(\"GTEx_V8_\",\"\",qtl_id)})     write.table(subset(df,H4>=0.8),file=file.path(analysis,\"coloc\",\"GTEx.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")     write.table(df,file=file.path(analysis,\"coloc\",\"GTEx-all.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")     coloc <- merge(df_coloc,caprion_upd[c(\"prot\",\"gene\",\"range38\")]) %>%              mutate(prot,                     H0=round(H0,2),                     H1=round(H1,2),                     H2=round(H2,2),                     H3=round(H3,2),                     H4=round(H4,2)) %>%              setNames(c(\"Protein\",\"Gene\",\"RSid\",\"SNPid\",\"Tissue\",\"nSNP\",\"H0\",\"H1\",\"H2\",\"H3\",\"H4\")) %>%              select(Protein,Gene,RSid,Tissue,nSNP,H0,H1,H2,H3,H4)     write.table(coloc,file=file.path(analysis,\"coloc\",\"GTEx-ST.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")   } else {     write.table(subset(df,H4>=0.8),file=file.path(analysis,\"coloc\",\"eQTLCatalogue.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")     write.table(df,file=file.path(analysis,\"coloc\",\"eQTLCatalogue-all.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")     eQTLCatalogue <- left_join(df,caprion_upd[c(\"prot\",\"gene\",\"range38\")]) %>%                      mutate(prot,                             H0=round(H0,2),                             H1=round(H1,2),                             H2=round(H2,2),                             H3=round(H3,2),                             H4=round(H4,2)) %>%                      setNames(c(\"Protein\",\"Gene\",\"RSid\",\"SNPid\",\"Study\",\"nSNP\",\"H0\",\"H1\",\"H2\",\"H3\",\"H4\")) %>%                      select(Protein,Gene,RSid,Study,nSNP,H0,H1,H2,H3,H4)     write.table(eQTLCatalogue,file=file.path(analysis,\"coloc\",\"eQTLCatalogue-ST.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")   } }  loop_slowly <- function() for (r in 1:nrow(sentinels)) single_run(r)  # Environmental variables  pkgs <- c(\"dplyr\", \"gap\", \"ggplot2\", \"readr\", \"coloc\", \"GenomicRanges\",\"pQTLtools\",\"rtracklayer\",\"seqminer\") invisible(suppressMessages(lapply(pkgs, require, character.only = TRUE)))  HOME <- Sys.getenv(\"HOME\") HPC_WORK <- Sys.getenv(\"HPC_WORK\") analysis <- Sys.getenv(\"analysis\") M <- 1e6 psum <- file.path(analysis,\"coloc\",\"sumstats\") if (!dir.exists(psum)) dir.create(psum) gsum <- file.path(analysis,\"coloc\",\"GTEx\",\"sumstats\") if (!dir.exists(gsum)) dir.create(gsum) esum <- file.path(analysis,\"coloc\",\"eQTLCatalogue\",\"sumstats\") if (!dir.exists(esum)) dir.create(esum)  sevens <- \" ENSG00000131142 - CCL25 19 8052318 8062660 ENSG00000125735 - TNFSF14 19 6661253 6670588 ENSG00000275302 - CCL4 17 36103827 36105621 ENSG00000274736 - CCL23 17 36013056 36017972 ENSG00000013725 - CD6 11 60971680 61020377 ENSG00000138675 - FGF5 4 80266639 80336680 ENSG00000277632 - CCL3 17 36088256 36090169 \" updates <- as.data.frame(scan(file=textConnection(sevens),what=list(\"\",\"\",\"\",0,0,0))) %>%            setNames(c(\"ensGenes\",\"dash\",\"gene\",\"chromosome\",\"start38\",\"end38\")) caprion <- left_join(pQTLdata::caprion,updates) sentinels <- subset(read.csv(file.path(analysis,\"work\",\"caprion_dr.cis.vs.trans\")),cis) f <- file.path(analysis,\"work\",\"snpid_dr.lst\") prot_rsid <- select(sentinels,prot,SNP) %>%              dplyr::left_join(read.table(f,header=TRUE),by=c('SNP'='snpid')) %>%              transmute(prot,SNP=dplyr::if_else(is.na(rsid)|rsid==\".\",SNP,rsid)) fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths.tsv\") tabix_paths <- read.delim(fp, stringsAsFactors = FALSE) %>% dplyr::as_tibble()  r <- as.integer(Sys.getenv(\"r\")) single_run(r) single_run(r,batch=\"eQTLCatalogue\")  collect() collect(batch=\"eQTLCatalogue\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/LocusZoom.js.html","id":"locuszoom-js","dir":"Articles","previous_headings":"3 Caprion analysis","what":"LocusZoom.js","title":"LocusZoom.js","text":"actually involves liftOver back GRCh37 done follows GTEx data. Note compressed json (.json.gz) used.","code":"awk 'NR>1{print $1,$2,$3,$4}' ${analysis}/coloc/GTEx.tsv | \\ parallel -C ' ' ' export prot={1} export rsid={2} export snpid={3} export tissue={4} Rscript -e \"   suppressMessages(library(dplyr))   suppressMessages(library(jsonlite))   suppressMessages(library(rtracklayer))   analysis <- Sys.getenv(\\\"analysis\\\")   hpc_work <- Sys.getenv(\\\"HPC_WORK\\\")   prot <- Sys.getenv(\\\"prot\\\")   rsid <- Sys.getenv(\\\"rsid\\\")   snpid <- Sys.getenv(\\\"snpid\\\")   tissue <- Sys.getenv(\\\"tissue\\\")   print(paste0(prot,\\\"-\\\",tissue))   f <- file.path(hpc_work,\\\"bin\\\",\\\"hg38ToHg19.over.chain\\\")   chain <- rtracklayer::import.chain(f)   liftOver <- function(gwas_stats)   {   gwas_granges <- with(gwas_stats,GRanges(seqnames = paste0(\\\"chr\\\",dplyr::if_else(chromosome==23,\\\"X\\\",paste(chromosome))),                        ranges = IRanges(start = position, end = position),                        chromosome = chromosome, position = position,                        ref_allele=ref_allele,alt_allele=alt_allele,alt_allele_freq=alt_allele_freq,                        log_pvalue=log_pvalue,beta=beta,se=se))   gwas_stats_hg37 <- rtracklayer::liftOver(gwas_granges, chain) %>%                      unlist() %>%                      dplyr::as_tibble() %>%                      dplyr::transmute(chromosome = seqnames, position = start,                                       variant = paste0(chromosome,\\\":\\\",position,\\\"_\\\",ref_allele,\\\"/\\\",alt_allele),                                       ref_allele,alt_allele,alt_allele_freq,log_pvalue,beta,se) %>%                      dplyr::mutate(id = paste(chromosome, position, sep = \\\":\\\")) %>%                      dplyr::group_by(id) %>%                      dplyr::mutate(row_count = n()) %>%                      dplyr::ungroup() %>%                      dplyr::filter(row_count == 1) %>%                      mutate(chromosome=gsub(\\\"chr\\\",\\\"\\\",chromosome))   }   pGWAS_sumstats <- read.delim(file.path(analysis,\\\"coloc\\\",\\\"sumstats\\\",paste0(prot,\\\"-\\\",snpid,\\\".gz\\\"))) %>%                     dplyr::mutate(REF=toupper(REF),ALT=toupper(ALT),variant=paste0(chromosome,\\\":\\\",position,\\\"_\\\",REF,\\\"/\\\",ALT)) %>%                     dplyr::mutate(log_pvalue=LP,ref_allele=REF,alt_allele=ALT,alt_allele_freq=AF,beta=ES,se=SE) %>%                     dplyr::select(chromosome,position,variant,ref_allele,alt_allele,alt_allele_freq,log_pvalue,beta,se) %>%                     liftOver()   GTEx_sumstats <- read.delim(file.path(analysis,\\\"coloc\\\",\\\"GTEx\\\",\\\"sumstats\\\",paste0(prot,\\\"-\\\",tissue,\\\".gz\\\"))) %>%                    dplyr::mutate(REF=toupper(ref),ALT=toupper(alt),variant=paste0(chromosome,\\\":\\\",position,\\\"_\\\",REF,\\\"/\\\",ALT)) %>%                    dplyr::mutate(log_pvalue=-log10(pvalue),ref_allele=REF,alt_allele=ALT,alt_allele_freq=ac/an) %>%                    dplyr::select(chromosome,position,variant,ref_allele,alt_allele,alt_allele_freq,log_pvalue,beta,se) %>%                    liftOver()   j <- gzfile(file.path(analysis,\\\"json\\\",\\\"pqtleqtl\\\",paste0(prot,\\\"-\\\",tissue,\\\".json.gz\\\")))   combined_json <- jsonlite::toJSON(list(pqtl=pGWAS_sumstats,eqtl=GTEx_sumstats),auto_unbox=TRUE,pretty=TRUE)   write(combined_json,file=j)   close(j) \" '"},{"path":[]},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"pqtldisease-overlap","dir":"Articles","previous_headings":"1 SCALLOP analysis","what":"pQTL/disease overlap","title":"SCALLOP-Caprion scripts","text":"ontology traits/disease available Experimental Factor Ontology (EFO)1, can used build lists diseases immune-mediated traits filter search results PhenoScanner2.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"diseases","dir":"Articles","previous_headings":"1 SCALLOP analysis > 1.1 pQTL/disease overlap","what":"Diseases","title":"SCALLOP-Caprion scripts","text":"","code":"library(ontologyIndex) # http://www.ebi.ac.uk/efo/efo.obo INF <- Sys.getenv(\"INF\") file <- file.path(INF,\"ebi\",\"efo-3.26.0\",\"efo.obo\") get_relation_names(file) efo <- get_ontology(file, extract_tags=\"everything\")  id <- function(ontology) {   length(ontology)   length(ontology$id)   inf <- grep(ontology$name,pattern=\"immune|inflammatory\")   data.frame(id=ontology$id[inf],name=ontology$name[inf]) }  goidname <- id(go) efoidname <- id(efo) # all diseases efo_diseases <- get_descendants(efo,\"EFO:0000408\") diseases_name <- efo$name[efo_diseases] diseases <- data.frame(efo_diseases,diseases_name) write.table(diseases,file=file.path(INF,\"ebi\",\"efo-3.26.0\",\"efo_diseases.csv\"),col.names=FALSE,row.names=FALSE,sep=\",\") # immune system diseases (isd) efo_0000540 <- get_descendants(efo,\"EFO:0000540\") efo_0000540name <- efo$name[efo_0000540] isd <- data.frame(efo_0000540,efo_0000540name) library(ontologyPlot) onto_plot(efo,efo_0000540)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"lookup","dir":"Articles","previous_headings":"1 SCALLOP analysis > 1.1 pQTL/disease overlap","what":"Lookup","title":"SCALLOP-Caprion scripts","text":"","code":"options(width=200)  suppressMessages(library(dplyr)) suppressMessages(library(gap)) suppressMessages(library(pQTLtools))  inf1_prot <- vector() for(i in 1:92) inf1_prot[inf1[i,\"prot\"]] <- mutate(inf1[i,],target.short=if_else(!is.na(alt_name),alt_name,target.short))[[\"target.short\"]] INF1_metal <- within(read.delim(file.path(find.package(\"pQTLtools\"),\"tests\",\"INF1.METAL\"),as.is=TRUE),{                     hg19_coordinates=paste0(\"chr\",Chromosome,\":\",Position)}) %>%                     rename(INF1_rsid=rsid, Total=N) %>%                     left_join(pQTLdata::inf1[c(\"prot\",\"gene\",\"target.short\",\"alt_name\")]) %>%                     mutate(target.short=if_else(!is.na(alt_name),alt_name,target.short)) %>%                     select(-alt_name) INF1_aggr <- INF1_metal %>%              select(Chromosome,Position,target.short,gene,hg19_coordinates,                     MarkerName,Allele1,Allele2,Freq1,Effect,StdErr,log.P.,cis.trans,INF1_rsid) %>%              group_by(Chromosome,Position,MarkerName,INF1_rsid,hg19_coordinates) %>%              summarise(nprots=n(),                        prots=paste(target.short,collapse=\";\"),                        Allele1=paste(toupper(Allele1),collapse=\";\"),                        Allele2=paste(toupper(Allele2),collapse=\";\"),                        EAF=paste(Freq1,collapse=\";\"),                        Effects=paste(Effect,collapse=\";\"),                        SEs=paste(StdErr,collapse=\";\"),                        log10P=paste(log.P.,collapse=\";\"),                        cistrans=paste(cis.trans,collapse=\";\")) %>%              data.frame() rsid <- INF1_aggr[[\"INF1_rsid\"]] catalogue <- \"GWAS\" proxies <- \"EUR\" p <- 5e-8 r2 <- 0.8 build <- 37  INF <- Sys.getenv(\"INF\") efo_diseases <- read.table(file.path(INF,\"ebi\",\"efo-3.26.0\",\"efo_diseases.csv\"),col.names=c(\"efo\",\"disease\"),as.is=TRUE,sep=\",\") %>%                 mutate(efo=gsub(\":\", \"_\", efo))  r <- snpqueries(rsid, catalogue=catalogue, proxies=proxies, p=p, r2=r2, build=build) lapply(r,dim) snps_results <- with(r,right_join(snps,results)) ps <- subset(snps_results,select=-c(hg38_coordinates,ref_hg38_coordinates,pos_hg38,ref_pos_hg38,dprime)) aggr <- subset(within(INF1_aggr,{HLA <- as.numeric(Chromosome==6 & Position >= 25392021 & Position <= 33392022)}),                select=-c(Chromosome,Position,INF1_rsid)) short <- merge(aggr,ps,by=\"hg19_coordinates\")  gwas <- function() {   short <- merge(aggr,ps,by=\"hg19_coordinates\") %>%            filter(efo %in% pull(efo_diseases,efo)) %>%            left_join(efo_diseases)   v <- c(\"prots\",\"hgnc\",\"MarkerName\",\"cistrans\",\"Effects\",\"Allele1\",\"Allele2\",\"rsid\",\"a1\",\"a2\",\"efo\",          \"ref_rsid\",\"ref_a1\",\"ref_a2\",\"proxy\",\"r2\",          \"HLA\",\"beta\",\"se\",\"p\",\"disease\",\"n_cases\",\"n_controls\",\"unit\",\"ancestry\",\"pmid\",\"study\")   mat <- within(short[v],   {     flag <- (HLA==1)     prefix <- paste0(prots,\"-\",rsid)     prefix[flag] <- paste0(prefix[flag],\"*\")     rsidProts <- paste0(prefix,\" (\",hgnc,\")\")     efoTraits <- gsub(\"\\\\b(^[a-z])\",\"\\\\U\\\\1\",disease,perl=TRUE)     qtl_direction <- sign(as.numeric(beta))   })   combined <- group_by(mat,efoTraits,rsidProts,desc(n_cases)) %>%               summarize(direction=paste(qtl_direction,collapse=\";\"),                         betas=paste(beta,collapse=\";\"),                         units=paste(unit,collapse=\";\"),                         studies=paste(study,collapse=\";\"),                         diseases=paste(disease,collapse=\";\"),                         cases=paste(n_cases,collapse=\";\")                        ) %>%               data.frame()   rxc <- with(combined,table(efoTraits,rsidProts))   for(cn in colnames(rxc)) for(rn in rownames(rxc)) {      cnrn <- subset(combined,efoTraits==rn & rsidProts==cn)      if(nrow(cnrn)==0) next      rxc[rn,cn] <- as.numeric(unlist(strsplit(cnrn[[\"direction\"]],\";\"))[1])   }   write.table(mat,file=file.path(INF,\"work\",\"pQTL-disease-GWAS.csv\"),row.names=FALSE,quote=FALSE,sep=\",\")   write.table(combined,file=file.path(INF,\"work\",\"pQTL-disease-GWAS-combined.csv\"),row.names=FALSE,quote=FALSE,sep=\",\")   rxc }  rxc <- gwas()"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"visualization","dir":"Articles","previous_headings":"1 SCALLOP analysis > 1.1 pQTL/disease overlap","what":"Visualization","title":"SCALLOP-Caprion scripts","text":"Figure 1.1: pQTL-disease overlap","code":"SF <- function(rxc, f=\"SF-pQTL-GWAS.png\", ch=21, cw=21, h=13, w=18) {   library(pheatmap)   col <- colorRampPalette(c(\"#4287f5\",\"#ffffff\",\"#e32222\"))(3)   library(grid)   png(file.path(INF,f),res=300,width=w,height=h,units=\"in\")   setHook(\"grid.newpage\", function() pushViewport(viewport(x=1,y=1,width=0.9, height=0.9, name=\"vp\", just=c(\"right\",\"top\"))), action=\"prepend\")   colnames(rxc) <- gsub(\"^[0-9]*-\",\"\",colnames(rxc))   pheatmap(rxc, legend=FALSE, angle_col=\"270\", border_color=\"black\", color=col, cellheight=ch, cellwidth=cw, cluster_rows=TRUE, cluster_cols=FALSE, fontsize=8)   setHook(\"grid.newpage\", NULL, \"replace\")   grid.text(\"Protein(s)-pQTL (gene)\", y=0.03125, gp=gpar(fontsize=12))   grid.text(\"GWAS diseases\", x=-0.0625, rot=90, gp=gpar(fontsize=12))   dev.off() }  SF(rxc,f=\"SF-pQTL-GWAS.png\",ch=8,cw=8,h=11,w=8.6)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"colocalization","dir":"Articles","previous_headings":"1 SCALLOP analysis","what":"Colocalization","title":"SCALLOP-Caprion scripts","text":"actual script cis-pQTL colocalization analysis GTEx v8 SCALLOP-INF.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"data","dir":"Articles","previous_headings":"1 SCALLOP analysis > 1.2 Colocalization","what":"Data","title":"SCALLOP-Caprion scripts","text":"data GWAS summary statistics GRCh37 VCF format, converted gwasvcf. GTEx association statistics GRCh38 downloaded eQTL Catalogue stored locally. Data microarray RNA-Seq remain eQTL Catalogue website.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"coloc-r","dir":"Articles","previous_headings":"1 SCALLOP analysis > 1.2 Colocalization","what":"coloc.R","title":"SCALLOP-Caprion scripts","text":"contains minor modification documentation example, options protein GWAS, microarray, RNA-Seq available respect variant-flanking gene regions. results generated, problem dplyr::arrange(df_gtex, -PP.H4.abf);p <- ggplot(df_gtex, aes(x = PP.H4.abf)) + geom_histogram().","code":"liftRegion <- function(x,chain,flanking=1e6) {   require(GenomicRanges)   gr <- with(x,GenomicRanges::GRanges(seqnames=chr,IRanges::IRanges(start,end))+flanking)   seqlevelsStyle(gr) <- \"UCSC\"   gr38 <- rtracklayer::liftOver(gr, chain)   chr <- gsub(\"chr\",\"\",colnames(table(seqnames(gr38))))   start <- min(unlist(start(gr38)))   end <- max(unlist(end(gr38)))   invisible(list(chr=chr[1],start=start,end=end,region=paste0(chr,\":\",start,\"-\",end))) }  sumstats <- function(prot,chr,region37) {   cat(\"GWAS sumstats\\n\")   vcf <- file.path(INF,\"METAL/gwas2vcf\",paste0(prot,\".vcf.gz\"))   gwas_stats <- gwasvcf::query_gwas(vcf, chrompos = region37) %>%                 gwasvcf::vcf_to_granges() %>%                 keepSeqlevels(chr) %>%                 renameSeqlevels(paste0(\"chr\",chr))   gwas_stats_hg38 <- rtracklayer::liftOver(gwas_stats, chain) %>%     unlist() %>% #   renameSeqlevels(chr) %>%     dplyr::as_tibble() %>%     dplyr::transmute(chromosome = seqnames,                      position = start, REF, ALT, AF, ES, SE, LP, SS) %>%     dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%     dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%     dplyr::group_by(id) %>%     dplyr::mutate(row_count = n()) %>%     dplyr::ungroup() %>%     dplyr::filter(row_count == 1) %>%     mutate(chromosome=gsub(\"chr\",\"\",chromosome)) }  microarray <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"a. eQTL datasets\\n\")   microarray_df <- dplyr::filter(tabix_paths, quant_method == \"microarray\") %>%                    dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(microarray_df$ftp_path), microarray_df$qtl_id[1])   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\")   column_names <- names(read.delim(hdr))   summary_list <- purrr::map(ftp_path_list, ~import_eQTLCatalogue(., region38,                              selected_gene_id = ensGene, column_names))   purrr::map_df(summary_list[lapply(summary_list,nrow)!=0],                 ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  rnaseq <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"b. Uniformly processed RNA-seq datasets\\n\")   rnaseq_df <- dplyr::filter(tabix_paths, quant_method == \"ge\") %>%                dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list, ~safe_import(., region38,                              selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list[lapply(result_list,nrow)!=0], ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   purrr::map_df(result_list, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  gtex <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"c. GTEx_v8 imported eQTL datasets\\n\")   gtex_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(gtex_df$ftp_path), gtex_df$qtl_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list,                              ~safe_import(., region38, selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  coloc <- function(prot,chr,ensGene,chain,region37,region38,out,run_all=FALSE) {   gwas_stats_hg38 <- sumstats(prot,chr,region37)   df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)   if (exists(\"df_gtex\"))   {     saveRDS(df_gtex,file=paste0(out,\".RDS\"))     dplyr::arrange(df_gtex, -PP.H4.abf)     p <- ggplot(df_gtex, aes(x = PP.H4.abf)) + geom_histogram()   }   if (run_all)   {     df_microarray <- microarray(gwas_stats_hg38,ensGene,region38)     df_rnaseq <- rnaseq(gwas_stats_hg38,ensGene,region38)     if (exists(\"df_microarray\") & exits(\"df_rnaseq\") & exists(\"df_gtex\"))     {       coloc_df = dplyr::bind_rows(df_microarray, df_rnaseq, df_gtex)       saveRDS(coloc_df, file=paste0(out,\".RDS\"))       dplyr::arrange(coloc_df, -PP.H4.abf)       p <- ggplot(coloc_df, aes(x = PP.H4.abf)) + geom_histogram()     }   }   s <- ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point()   ggsave(plot = s, filename = paste0(out, \"-assoc.pdf\"), path = \"\", device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300)   ggsave(plot = p, filename = paste0(out, \"-hist.pdf\"), path = \"\", device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300) }  single_run <- function(r) {   sentinel <- sentinels[r,]   chr <- with(sentinel,Chr)   ss <- subset(inf1,prot==sentinel[[\"prot\"]])   ensRegion37 <- with(ss,                       {                         start <- start-M                         if (start<0) start <- 0                         end <- end+M                         paste0(chr,\":\",start,\"-\",end)                       })   ensGene <- ss[[\"ensembl_gene_id\"]]   ensRegion38 <- with(liftRegion(ss,chain),region)   f <- file.path(INF,\"coloc\",with(sentinel,paste0(prot,\"-\",SNP)))   cat(chr,ensGene,ensRegion37,ensRegion38,\"\\n\")   coloc(sentinel[[\"prot\"]],chr,ensGene,chain,ensRegion37,ensRegion38,f) }  # slow with the following loop: loop <- function() for (r in 1:nrow(sentinels)) single_run(r)  library(pQTLtools) f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\") chain <- rtracklayer::import.chain(f) pkgs <- c(\"dplyr\", \"ggplot2\", \"readr\", \"coloc\", \"GenomicRanges\",\"seqminer\") invisible(lapply(pkgs, require, character.only = TRUE)) HPC_WORK <- Sys.getenv(\"HPC_WORK\") gwasvcf::set_bcftools(file.path(HPC_WORK,\"bin\",\"bcftools\")) f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths.tsv\") tabix_paths <- read.delim(f, stringsAsFactors = FALSE) %>% dplyr::as_tibble() HOME <- Sys.getenv(\"HOME\") fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_gtex.tsv\") imported_tabix_paths <- within(read.delim(fp, stringsAsFactors = FALSE) %>% dplyr::as_tibble(),       {          f <- lapply(strsplit(ftp_path,\"/csv/|/ge/\"),\"[\",3)          ftp_path <- paste0(\"~/rds/public_databases/GTEx/csv\"),f)       }) options(width=200) library(dplyr) INF <- Sys.getenv(\"INF\") M <- 1e6 sentinels <- subset(read.csv(file.path(INF,\"work\",\"INF1.merge.cis.vs.trans\")),cis) cvt_rsid <- file.path(INF,\"work\",\"INF1.merge.cis.vs.trans-rsid\") prot_rsid <- subset(read.delim(cvt_rsid,sep=\" \"),cis,select=c(prot,SNP)) # Faster with parallel Bash runs. r <- as.integer(Sys.getenv(\"r\")) single_run(r)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"collection-of-results","dir":"Articles","previous_headings":"1 SCALLOP analysis > 1.2 Colocalization","what":"Collection of results","title":"SCALLOP-Caprion scripts","text":"furnished keep results (.e., PP4>=0.8) follows,","code":"collect <- function() {   df_coloc <- data.frame()   for(r in 1:nrow(sentinels))   {     prot <- sentinels[[\"prot\"]][r]     snpid <- sentinels[[\"SNP\"]][r]     rsid <- prot_rsid[[\"SNP\"]][r]     f <- file.path(INF,\"coloc\",paste0(prot,\"-\",snpid,\".RDS\"))     if (!file.exists(f)) next     cat(prot,\"-\",rsid,\"\\n\")     rds <- readRDS(f)     if (nrow(rds)==0) next     df_coloc <- rbind(df_coloc,data.frame(prot=prot,rsid=rsid,snpid=snpid,rds))   }   df_coloc <- within(df_coloc,{qtl_id <- gsub(\"GTEx_V8_\",\"\",qtl_id)}) %>%               rename(H0=PP.H0.abf,H1=PP.H1.abf,H2=PP.H2.abf,H3=PP.H3.abf,H4=PP.H4.abf)   write.table(subset(df_coloc,H4>=0.8),               file=file.path(INF,\"coloc\",\"GTEx.tsv\"),               quote=FALSE,row.names=FALSE,sep=\"\\t\") } collect()"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"the-driver-program","dir":"Articles","previous_headings":"1 SCALLOP analysis","what":"The driver program","title":"SCALLOP-Caprion scripts","text":"Bash.","code":"#!/usr/bin/bash  for r in {1..59} do    export r=${r}    export cvt=${INF}/work/INF1.merge.cis.vs.trans    read prot MarkerName < \\                         <(awk -vFS=\",\" '$14==\"cis\"' ${cvt} | \\                           awk -vFS=\",\" -vr=${r} 'NR==r{print $2,$5}')    echo ${r} - ${prot} - ${MarkerName}    export prot=${prot}    export MarkerName=${MarkerName}    if [ ! -f ${INF}/coloc/${prot}-${MarkerName}.pdf ] || \\       [ ! -f ${INF}/coloc/${prot}-${MarkerName}.RDS ]; then      cd ${INF}/coloc      R --no-save < ${INF}/rsid/coloc.R 2>&1 | \\      tee ${prot}-${MarkerName}.log      cd -    fi done"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"parallel-computing","dir":"Articles","previous_headings":"1 SCALLOP analysis > 1.3 The driver program","what":"Parallel computing","title":"SCALLOP-Caprion scripts","text":"speed analysis, resort SLURM,","code":"#!/usr/bin/bash  #SBATCH --job-name=_coloc #SBATCH --account CARDIO-SL0-CPU #SBATCH --partition cardio #SBATCH --qos=cardio #SBATCH --array=1-59 #SBATCH --mem=28800 #SBATCH --time=5-00:00:00 #SBATCH --error=/rds/user/jhz22/hpc-work/work/_coloc_%A_%a.err #SBATCH --output=/rds/user/jhz22/hpc-work/work/_coloc_%A_%a.out #SBATCH --export ALL  export trait=$(awk 'NR==ENVIRON[\"SLURM_ARRAY_TASK_ID\"] {print $1}' ${INF}/work/inf1.tmp)  function gtex() {   export r=${SLURM_ARRAY_TASK_ID}   export cvt=${INF}/work/INF1.merge.cis.vs.trans   read prot MarkerName < \\                        <(awk -vFS=\",\" '$14==\"cis\"' ${cvt} | \\                          awk -vFS=\",\" -vr=${r} 'NR==r{print $2,$5}')   echo ${r} - ${prot} - ${MarkerName}   export prot=${prot}   export MarkerName=${MarkerName}   if [ ! -f ${INF}/coloc/${prot}-${MarkerName}.pdf ] || \\      [ ! -f ${INF}/coloc/${prot}-${MarkerName}.RDS ]; then     cd ${INF}/coloc     R --no-save < ${INF}/rsid/coloc.R 2>&1 | \\     tee ${prot}-${MarkerName}.log     cd -   fi }  gtex"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"caprion-analysis","dir":"Articles","previous_headings":"","what":"Caprion analysis","title":"SCALLOP-Caprion scripts","text":"Caprion project, https://jinghuazhao.github.io/Caprion/.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"colocalization-1","dir":"Articles","previous_headings":"2 Caprion analysis","what":"Colocalization","title":"SCALLOP-Caprion scripts","text":"coloc.R modified slightly employing basename local files. single_run() called analysis SLURM collect() summary need SLURM.","code":"liftRegion <- function(x, flanking = 1e6) {   gr <- GenomicRanges::GRanges(seqnames = x$chr,                                ranges = IRanges::IRanges(start = x$start - flanking, end = x$end + flanking))   seqlevelsStyle(gr) <- \"UCSC\"   f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\")   chain <- rtracklayer::import.chain(f)   gr38 <- rtracklayer::liftOver(gr, chain)   lifted_chromosomes <- seqnames(gr38)   lifted_start <- min(start(gr38))   lifted_end <- max(end(gr38))   chr <- gsub(\"chr\",\"\",colnames(table(lifted_chromosomes)))   region <- paste0(chr, \":\", lifted_start, \"-\", lifted_end)   invisible(list(chr = chr, start = lifted_start, end = lifted_end, region = region)) }  sumstats <- function(prot,chr,region37,chain) {   cat(\"GWAS sumstats\\n\")   tbl <- file.path(analysis,\"METAL_dr\",paste0(prot,\"_dr-1.tbl.gz\"))   gwas_texts <- seqminer::tabix.read(tbl, tabixRange = region37)   gwas_stats <- read.table(text = gwas_texts, sep = \"\\t\", header = FALSE) %>%                 setNames(c(\"Chromosome\",\"Position\",\"ID\",\"Allele1\",\"Allele2\",\"Freq1\",\"FreqSE\",\"MinFreq\",\"MaxFreq\",                            \"Effect\",\"StdErr\",\"logP\",\"Direction\",\"HetISq\",\"HetChiSq\",\"HetDf\",\"logHetP\",\"N\"))   gwas_granges <- with(gwas_stats,GRanges(seqnames = paste0(\"chr\",dplyr::if_else(Chromosome==23,\"X\",paste(Chromosome))),                        ranges = IRanges(start = Position, end = Position),                        id = ID,REF=Allele2,ALT=Allele1,AF=Freq1,ES=Effect,SE=StdErr,LP=-logP,SS=N))   f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\")   chain <- rtracklayer::import.chain(f)   gwas_stats_hg38 <- rtracklayer::liftOver(gwas_granges, chain) %>%                      unlist() %>%                      dplyr::as_tibble() %>%                      dplyr::transmute(chromosome = seqnames,                                       position = start, REF, ALT, AF, ES, SE, LP, SS) %>%                      dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%                      dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%                      dplyr::group_by(id) %>%                      dplyr::mutate(row_count = n()) %>%                      dplyr::ungroup() %>%                      dplyr::filter(row_count == 1) %>%                      mutate(chromosome=gsub(\"chr\",\"\",chromosome)) }  microarray <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"a. eQTL datasets\\n\")   microarray_df <- dplyr::filter(tabix_paths, quant_method == \"microarray\") %>%                    dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(microarray_df$ftp_path), microarray_df$qtl_id[1])   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\")   column_names <- names(read.delim(hdr))   summary_list <- purrr::map(ftp_path_list, ~import_eQTLCatalogue(., region38,                              selected_gene_id = ensGene, column_names))   purrr::map_df(summary_list[lapply(summary_list,nrow)!=0],                 ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  rnaseq <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"b. Uniformly processed RNA-seq datasets\\n\")   rnaseq_df <- dplyr::filter(tabix_paths, quant_method == \"ge\") %>%                dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list, ~safe_import(., region38,                              selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list[lapply(result_list,nrow)!=0], ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   purrr::map_df(result_list, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  gtex <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"c. GTEx_v8 imported eQTL datasets\\n\")   fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_gtex.tsv\")   imported_tabix_paths <- read.delim(fp, stringsAsFactors = FALSE) %>%                           dplyr::mutate(ftp_path=file.path(\"~/rds/public_databases/GTEx/csv\",basename(ftp_path)))   gtex_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(gtex_df$ftp_path), gtex_df$qtl_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list,                              ~safe_import(., region38, selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   prot <- sentinels[[\"prot\"]][r]   invisible(sapply(1:length(result_filtered), function(i) {       if (!is.null(result_filtered[[i]])) {           prot_name <- names(result_filtered)[i]           if (!is.null(prot_name)) {               f <- file.path(analysis, \"coloc\", \"GTEx\", \"sumstats\", paste0(prot, \"-\", prot_name, \".gz\"))               gz <- gzfile(f, \"w\")               write.table(result_filtered[[i]], file = gz, col.names = TRUE, row.names = FALSE, quote = FALSE, sep = \"\\t\")               close(gz)           } else {               warning(paste(\"Missing name for index\", i))           }       }   }))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  ge <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"d. eQTL datasets\\n\")   fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_ge.tsv\")   imported_tabix_paths <- read.delim(fp, stringsAsFactors = FALSE) %>%                           dplyr::mutate(ftp_path=file.path(\"~/rds/public_databases/eQTLCatalogue\",basename(ftp_path)))   ftp_path_list <- setNames(as.list(imported_tabix_paths$ftp_path), imported_tabix_paths$unique_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list,                              ~safe_import(., region38, selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   prot <- sentinels[[\"prot\"]][r]   invisible(sapply(1:length(result_filtered), function(i) {       if (!is.null(result_filtered[[i]])) {           prot_name <- names(result_filtered)[i]           if (!is.null(prot_name)) {               f <- file.path(analysis, \"coloc\", \"eQTLCatalogue\", \"sumstats\", paste0(prot, \"-\", prot_name, \".gz\"))               gz <- gzfile(f, \"w\")               write.table(result_filtered[[i]], file = gz, col.names = TRUE, row.names = FALSE, quote = FALSE, sep = \"\\t\")               close(gz)           } else {               warning(paste(\"Missing name for index\", i))           }       }   }))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"unique_id\") }  gtex_coloc <- function(prot,chr,ensGene,chain,region37,region38,out) {   gwas_stats_hg38 <- sumstats(prot,chr,region37,chain)   df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)   if (!exists(\"df_gtex\")) return   saveRDS(df_gtex,file=paste0(out,\".rds\"))   p <- ggplot(df_gtex, aes(x = PP.H4.abf)) + geom_histogram()   s <- ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point()   ggplot2::ggsave(plot = s, filename = paste0(out, \".assoc.pdf\"), device = \"pdf\",                   height = 15, width = 15, units = \"cm\", dpi = 300)   ggplot2::ggsave(plot = p, filename = paste0(out, \".hist.pdf\"), device = \"pdf\",                   height = 15, width = 15, units = \"cm\", dpi = 300) }  ge_coloc <- function(prot,chr,ensGene,chain,region37,region38,out) {   gwas_stats_hg38 <- sumstats(prot,chr,region37)   df_ge <- ge(gwas_stats_hg38,ensGene,region38)   if (!exists(\"df_ge\")) return   saveRDS(df_ge,file=paste0(out,\".rds\"))   p <- ggplot(df_ge, aes(x = PP.H4.abf)) + geom_histogram()   s <- ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point()   ggsave(plot = s, filename = paste0(out, \".assoc.pdf\"), device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300)   ggsave(plot = p, filename = paste0(out, \".hist.pdf\"), device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300) }  all_coloc <- function(prot,chr,ensGene,chain,region37,region38,out) {   gwas_stats_hg38 <- sumstats(prot,chr,region37)   df_microarray <- microarray(gwas_stats_hg38,ensGene,region38)   df_rnaseq <- rnaseq(gwas_stats_hg38,ensGene,region38)   df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)   df_ge <- ge(gwas_stats_hg38,ensGene,region38)   if (exists(\"df_microarray\") & exits(\"df_rnaseq\") & exists(\"df_gtex\") & exists(\"df_ge\"))   {     coloc_df = dplyr::bind_rows(df_microarray, df_rnaseq, df_gtex, df_ge)     saveRDS(coloc_df, file=paste0(out,\"-all.rds\"))     p <- ggplot(coloc_df, aes(x = PP.H4.abf)) + geom_histogram()   }   s <- ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point()   ggsave(plot = s, filename = paste0(out, \"-assoc.pdf\"), device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300)   ggsave(plot = p, filename = paste0(out, \"-hist.pdf\"), device = \"pdf\",          height = 15, width = 15, units = \"cm\", dpi = 300) }  single_run <- function(r, batch=\"GTEx\") {   sentinel <- sentinels[r,]   prot <- sentinel[[\"prot\"]]   chr <- sentinel[[\"geneChrom\"]]   ensRegion37 <- with(sentinel,                       {                         start <- geneStart-M                         if (start<0) start <- 0                         end <- geneEnd+M                         paste0(chr,\":\",start,\"-\",end)                       })   ss <- subset(pQTLdata::caprion,Protein==paste0(sentinel[[\"prot\"]],\"_HUMAN\"))   ensGene <- ss[[\"ensGenes\"]]   x <- with(sentinel,list(chr=geneChrom,start=geneStart,end=geneEnd))   lr <- liftRegion(x)   ensRegion38 <- with(lr,paste0(chr,\":\",start-M,\"-\",end+M))   cat(chr,ensGene,ensRegion37,ensRegion38,\"\\n\")   f <- file.path(analysis,\"coloc\",batch,with(sentinel,paste0(prot,\"-\",SNP)))   if (batch==\"GTEx\")   {     gtex_coloc(prot,chr,ensGene,chain,ensRegion37,ensRegion38,f)   } else {     ge_coloc(prot,chr,ensGene,chain,ensRegion37,ensRegion38,f)   } }  collect <- function(batch=\"GTEx\") # to collect results when all single runs are done {   df_coloc <- data.frame()   for(r in 1:nrow(sentinels))   {     prot <- sentinels[[\"prot\"]][r]     snpid <- sentinels[[\"SNP\"]][r]     rsid <- prot_rsid[[\"SNP\"]][r]     f <- file.path(analysis,\"coloc\",batch,paste0(prot,\"-\",snpid,\".rds\"))     if (!file.exists(f)) next     cat(prot,\"-\",rsid,\"\\n\")     rds <- readRDS(f)     if (nrow(rds)==0) next     df_coloc <- rbind(df_coloc,data.frame(prot=prot,rsid=rsid,snpid=snpid,rds))   }   f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\")   chain <- rtracklayer::import.chain(f)   gr <- with(arrange(pQTLdata::caprion,Protein), {              GenomicRanges::GRanges(seqnames = chr,                                     ranges = IRanges::IRanges(start = start - M, end = end + M),                                     Protein=Protein,Gene=Gene)              })   seqlevelsStyle(gr) <- \"UCSC\"   gr38 <- rtracklayer::liftOver(gr,chain)   gr38_new <- lapply(gr38, function(gr) {     valid_start <- start(gr)[!is.na(start(gr))]     valid_end <- end(gr)[!is.na(end(gr))]     if (length(valid_start) > 0 && length(valid_end) > 0) {       min_start <- min(valid_start)       min_end <- min(valid_end)       new_gr <- GRanges(         seqnames = seqnames(gr)[1],         ranges = IRanges(start = min_start, end = min_end),         strand = strand(gr)[1],         Protein = ifelse(length(mcols(gr)$Protein) > 0, unique(mcols(gr)$Protein)[1], NA),         Gene = ifelse(length(mcols(gr)$Gene) > 0, unique(mcols(gr)$Gene)[1], NA)       )       return(new_gr)     } else {       return(NULL)     }   })   gr38_new <- gr38_new[!sapply(gr38_new, is.null)]   df38 <- do.call(rbind, lapply(gr38_new, function(gr) {              data.frame(                 seqnames = as.character(seqnames(gr)),                 start = start(gr),                 end = end(gr),                 strand = as.character(strand(gr)),                 Protein = mcols(gr)$Protein,                 Gene = mcols(gr)$Gene              )              })) %>%           mutate(range38=paste0(gsub(\"chr\",\"\",seqnames),\":\",start,\"-\",end)) %>%           select(Protein,Gene,range38)   caprion_upd <- pQTLdata::caprion %>%                  mutate(prot=gsub(\"_HUMAN\",\"\",Protein),gene=Gene) %>%                  left_join(df38)   df <- dplyr::rename(df_coloc,H0=PP.H0.abf,H1=PP.H1.abf,H2=PP.H2.abf,H3=PP.H3.abf,H4=PP.H4.abf) %>%         dplyr::left_join(caprion_upd[c(\"prot\",\"gene\",\"range38\")])   if (batch==\"GTEx\") {     df_coloc <- within(df,{qtl_id <- gsub(\"GTEx_V8_\",\"\",qtl_id)})     write.table(subset(df,H4>=0.8),file=file.path(analysis,\"coloc\",\"GTEx.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")     write.table(df,file=file.path(analysis,\"coloc\",\"GTEx-all.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")     coloc <- merge(df_coloc,caprion_upd[c(\"prot\",\"gene\",\"range38\")]) %>%              mutate(prot,                     H0=round(H0,2),                     H1=round(H1,2),                     H2=round(H2,2),                     H3=round(H3,2),                     H4=round(H4,2)) %>%              setNames(c(\"Protein\",\"Gene\",\"RSid\",\"SNPid\",\"Tissue\",\"nSNP\",\"H0\",\"H1\",\"H2\",\"H3\",\"H4\")) %>%              select(Protein,Gene,RSid,Tissue,nSNP,H0,H1,H2,H3,H4)     write.table(coloc,file=file.path(analysis,\"coloc\",\"GTEx-ST.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")   } else {     write.table(subset(df,H4>=0.8),file=file.path(analysis,\"coloc\",\"eQTLCatalogue.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")     write.table(df,file=file.path(analysis,\"coloc\",\"eQTLCatalogue-all.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")     eQTLCatalogue <- left_join(df,caprion_upd[c(\"prot\",\"gene\",\"range38\")]) %>%                      mutate(prot,                             H0=round(H0,2),                             H1=round(H1,2),                             H2=round(H2,2),                             H3=round(H3,2),                             H4=round(H4,2)) %>%                      setNames(c(\"Protein\",\"Gene\",\"RSid\",\"SNPid\",\"Study\",\"nSNP\",\"H0\",\"H1\",\"H2\",\"H3\",\"H4\")) %>%                      select(Protein,Gene,RSid,Study,nSNP,H0,H1,H2,H3,H4)     write.table(eQTLCatalogue,file=file.path(analysis,\"coloc\",\"eQTLCatalogue-ST.tsv\"),                 quote=FALSE,row.names=FALSE,sep=\"\\t\")   } }  loop_slowly <- function() for (r in 1:nrow(sentinels)) single_run(r)  # Environmental variables  pkgs <- c(\"dplyr\", \"gap\", \"ggplot2\", \"readr\", \"coloc\", \"GenomicRanges\",\"pQTLtools\",\"rtracklayer\",\"seqminer\") invisible(suppressMessages(lapply(pkgs, require, character.only = TRUE)))  options(width=200) HOME <- Sys.getenv(\"HOME\") HPC_WORK <- Sys.getenv(\"HPC_WORK\") analysis <- Sys.getenv(\"analysis\") M <- 1e6 psum <- file.path(analysis,\"coloc\",\"sumstats\") if (!dir.exists(psum)) dir.create(psum) gsum <- file.path(analysis,\"coloc\",\"GTEx\",\"sumstats\") if (!dir.exists(gsum)) dir.create(gsum) esum <- file.path(analysis,\"coloc\",\"eQTLCatalogue\",\"sumstats\") if (!dir.exists(esum)) dir.create(esum)  sevens <- \" ENSG00000131142 - CCL25 19 8052318 8062660 ENSG00000125735 - TNFSF14 19 6661253 6670588 ENSG00000275302 - CCL4 17 36103827 36105621 ENSG00000274736 - CCL23 17 36013056 36017972 ENSG00000013725 - CD6 11 60971680 61020377 ENSG00000138675 - FGF5 4 80266639 80336680 ENSG00000277632 - CCL3 17 36088256 36090169 \" updates <- as.data.frame(scan(file=textConnection(sevens),what=list(\"\",\"\",\"\",0,0,0))) %>%            setNames(c(\"ensGenes\",\"dash\",\"gene\",\"chromosome\",\"start38\",\"end38\")) caprion <- left_join(pQTLdata::caprion,updates) sentinels <- subset(read.csv(file.path(analysis,\"work\",\"caprion_dr.cis.vs.trans\")),cis) f <- file.path(analysis,\"work\",\"snpid_dr.lst\") prot_rsid <- select(sentinels,prot,SNP) %>%              dplyr::left_join(read.table(f,header=TRUE),by=c('SNP'='snpid')) %>%              transmute(prot,SNP=dplyr::if_else(is.na(rsid)|rsid==\".\",SNP,rsid)) fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths.tsv\") tabix_paths <- read.delim(fp, stringsAsFactors = FALSE) %>% dplyr::as_tibble()  r <- as.integer(Sys.getenv(\"r\")) single_run(r) single_run(r,batch=\"eQTLCatalogue\")  collect() collect(batch=\"eQTLCatalogue\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/SCALLOP-Caprion.html","id":"locuszoom-js","dir":"Articles","previous_headings":"2 Caprion analysis","what":"LocusZoom.js","title":"SCALLOP-Caprion scripts","text":"actually involves liftOver back GRCh37 done follows GTEx data. Note compressed json (.json.gz) used.","code":"awk 'NR>1{print $1,$2,$3,$4}' ${analysis}/coloc/GTEx.tsv | \\ parallel -C ' ' ' export prot={1} export rsid={2} export snpid={3} export tissue={4} Rscript -e \"   suppressMessages(library(dplyr))   suppressMessages(library(jsonlite))   suppressMessages(library(rtracklayer))   analysis <- Sys.getenv(\\\"analysis\\\")   hpc_work <- Sys.getenv(\\\"HPC_WORK\\\")   prot <- Sys.getenv(\\\"prot\\\")   rsid <- Sys.getenv(\\\"rsid\\\")   snpid <- Sys.getenv(\\\"snpid\\\")   tissue <- Sys.getenv(\\\"tissue\\\")   print(paste0(prot,\\\"-\\\",tissue))   f <- file.path(hpc_work,\\\"bin\\\",\\\"hg38ToHg19.over.chain\\\")   chain <- rtracklayer::import.chain(f)   liftOver <- function(gwas_stats)   {   gwas_granges <- with(gwas_stats,GRanges(seqnames = paste0(\\\"chr\\\",dplyr::if_else(chromosome==23,\\\"X\\\",paste(chromosome))),                        ranges = IRanges(start = position, end = position),                        chromosome = chromosome, position = position,                        ref_allele=ref_allele,alt_allele=alt_allele,alt_allele_freq=alt_allele_freq,                        log_pvalue=log_pvalue,beta=beta,se=se))   gwas_stats_hg37 <- rtracklayer::liftOver(gwas_granges, chain) %>%                      unlist() %>%                      dplyr::as_tibble() %>%                      dplyr::transmute(chromosome = seqnames, position = start,                                       variant = paste0(chromosome,\\\":\\\",position,\\\"_\\\",ref_allele,\\\"/\\\",alt_allele),                                       ref_allele,alt_allele,alt_allele_freq,log_pvalue,beta,se) %>%                      dplyr::mutate(id = paste(chromosome, position, sep = \\\":\\\")) %>%                      dplyr::group_by(id) %>%                      dplyr::mutate(row_count = n()) %>%                      dplyr::ungroup() %>%                      dplyr::filter(row_count == 1) %>%                      mutate(chromosome=gsub(\\\"chr\\\",\\\"\\\",chromosome))   }   pGWAS_sumstats <- read.delim(file.path(analysis,\\\"coloc\\\",\\\"sumstats\\\",paste0(prot,\\\"-\\\",snpid,\\\".gz\\\"))) %>%                     dplyr::mutate(REF=toupper(REF),ALT=toupper(ALT),variant=paste0(chromosome,\\\":\\\",position,\\\"_\\\",REF,\\\"/\\\",ALT)) %>%                     dplyr::mutate(log_pvalue=LP,ref_allele=REF,alt_allele=ALT,alt_allele_freq=AF,beta=ES,se=SE) %>%                     dplyr::select(chromosome,position,variant,ref_allele,alt_allele,alt_allele_freq,log_pvalue,beta,se) %>%                     liftOver()   GTEx_sumstats <- read.delim(file.path(analysis,\\\"coloc\\\",\\\"GTEx\\\",\\\"sumstats\\\",paste0(prot,\\\"-\\\",tissue,\\\".gz\\\"))) %>%                    dplyr::mutate(REF=toupper(ref),ALT=toupper(alt),variant=paste0(chromosome,\\\":\\\",position,\\\"_\\\",REF,\\\"/\\\",ALT)) %>%                    dplyr::mutate(log_pvalue=-log10(pvalue),ref_allele=REF,alt_allele=ALT,alt_allele_freq=ac/an) %>%                    dplyr::select(chromosome,position,variant,ref_allele,alt_allele,alt_allele_freq,log_pvalue,beta,se) %>%                    liftOver()   j <- gzfile(file.path(analysis,\\\"json\\\",\\\"pqtleqtl\\\",paste0(prot,\\\"-\\\",tissue,\\\".json.gz\\\")))   combined_json <- jsonlite::toJSON(list(pqtl=pGWAS_sumstats,eqtl=GTEx_sumstats),auto_unbox=TRUE,pretty=TRUE)   write(combined_json,file=j)   close(j) \" '"},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"liftover","dir":"Articles","previous_headings":"","what":"liftover","title":"Bioconductor notes","text":"See inst/turbomanin source, https://github.com/jinghuazhao/pQTLtools/tree/master/inst/turboman, turboman/ directory installed package.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"expressionset","dir":"Articles","previous_headings":"","what":"ExpressionSet","title":"Bioconductor notes","text":"start Bioconductor/Biobase’s ExpressionSet example finish real application.","code":"dataDirectory <- system.file(\"extdata\", package=\"Biobase\") exprsFile <- file.path(dataDirectory, \"exprsData.txt\") exprs <- as.matrix(read.table(exprsFile, header=TRUE, sep=\"\\t\", row.names=1, as.is=TRUE)) pDataFile <- file.path(dataDirectory, \"pData.txt\") pData <- read.table(pDataFile, row.names=1, header=TRUE, sep=\"\\t\") all(rownames(pData)==colnames(exprs)) metadata <- data.frame(labelDescription=c(\"Patient gender\",                                           \"Case/control status\",                                           \"Tumor progress on XYZ scale\"),                        row.names=c(\"gender\", \"type\", \"score\")) phenoData <- Biobase::AnnotatedDataFrame(data=pData, varMetadata=metadata) experimentData <- Biobase::MIAME(name=\"Pierre Fermat\",                                  lab=\"Francis Galton Lab\",                                  contact=\"pfermat@lab.not.exist\",                                  title=\"Smoking-Cancer Experiment\",                                  abstract=\"An example ExpressionSet\",                                  url=\"www.lab.not.exist\",                                  other=list(notes=\"Created from text files\")) exampleSet <- pQTLtools::make_ExpressionSet(exprs,phenoData,experimentData=experimentData,                                             annotation=\"hgu95av2\") data(sample.ExpressionSet, package=\"Biobase\") identical(exampleSet,sample.ExpressionSet)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"data-frame","dir":"Articles","previous_headings":"2 ExpressionSet","what":"data.frame","title":"Bioconductor notes","text":"great benefit use object directly data.frame.","code":"lm.result <- Biobase::esApply(exampleSet,1,function(x) lm(score~gender+x)) beta.x <- unlist(lapply(lapply(lm.result,coef),\"[\",3)) beta.x[1] #> AFFX-MurIL2_at.x  #>    -0.0001907472 lm(score~gender+AFFX.MurIL2_at,data=exampleSet) #>  #> Call: #> lm(formula = score ~ gender + AFFX.MurIL2_at, data = exampleSet) #>  #> Coefficients: #>    (Intercept)      genderMale  AFFX.MurIL2_at   #>      0.5531725       0.0098932      -0.0001907"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"composite-plots","dir":"Articles","previous_headings":"2 ExpressionSet","what":"Composite plots","title":"Bioconductor notes","text":"wish examine distribution feature via histogram, scatter boxplot. One resort esApply() simplicity nicer add feature name title. Figure 2.1: Histogram, scatter & boxplots Figure 2.2: Histogram, scatter & boxplots expression set indexed using feature name(s).","code":"invisible(Biobase::esApply(exampleSet[1:2],1,function(x)                            {par(mfrow=c(3,1));boxplot(x);hist(x);plot(x)} )) par(mfrow=c(1,3)) f <- Biobase::featureNames(exampleSet[1:2]) invisible(sapply(f,function(x) {                      d <- t(Biobase::exprs(exampleSet[x]))                      fn <- Biobase::featureNames(exampleSet[x])                      hist(d,main=\"\",xlab=fn); plot(d, ylab=fn); boxplot(d,ylab=fn)                    }           ) )"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"outlier-detections","dir":"Articles","previous_headings":"2 ExpressionSet","what":"Outlier detections","title":"Bioconductor notes","text":"illustrates one mechanism,","code":"list_outliers <- function(es, method=\"upperquartile\")                  arrayQualityMetrics::outliers(exprs(es),method=method) for (method in c(\"KS\",\"sum\",\"upperquartile\")) {   ZWK_outliers <- list_outliers(protein_ZWK,method=method)   print(ZWK_outliers@statistic[ZWK_outliers@which]) }"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"clustering","dir":"Articles","previous_headings":"2 ExpressionSet","what":"Clustering","title":"Bioconductor notes","text":"employ model-based clustering absed principal compoents see potential groupings data, Figure 2.3: Three-group Clustering interactive version also available,","code":"pca <- prcomp(na.omit(t(Biobase::exprs(exampleSet))), rank=10, scale=TRUE)   pc1pc2pc3 <- with(pca,x)[,1:3]   mc <- mclust::Mclust(pc1pc2pc3,G=3)   with(mc, {       cols <- c(\"blue\",\"red\", \"purple\")       s3d <- scatterplot3d::scatterplot3d(with(pca,x[,c(2,1,3)]),                                           color=cols[classification],                                           pch=16,                                           type=\"h\",                                           main=\"Plot of the PC1, PC2 and PC3\")       s3d.coords <- s3d$xyz.convert(with(pca,x[,c(2,1,3)]))       text(s3d.coords$x,             s3d.coords$y,               cex = 1.2,            col = cols[classification],            labels = row.names(pc1pc2pc3),            pos = 4)       legend(\"right\", legend=levels(as.factor(classification)), col=cols[classification], pch=16)       rgl::open3d(width = 500, height = 500)       rgl::plot3d(with(pca,x[,c(2,1,3)]),cex=1.2,col=cols[classification],size=5)       rgl::text3d(with(pca,x[,c(2,1,3)]),cex=1.2,col=cols[classification],texts=row.names(pc1pc2pc3))       htmlwidgets::saveWidget(rgl::rglwidget(), file = \"mcpca3d.html\")   }) #> Warning in par3d(userMatrix = structure(c(1, 0, 0, 0, 0, 0.342020143325668, : #> parameter \"width\" cannot be set #> Warning in par3d(userMatrix = structure(c(1, 0, 0, 0, 0, 0.342020143325668, : #> parameter \"height\" cannot be set"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"data-transformation","dir":"Articles","previous_headings":"2 ExpressionSet","what":"Data transformation","title":"Bioconductor notes","text":"Suppose wish use log2 greater zero set negative values missing.","code":"log2.na <- function(x) log2(ifelse(x>0, x, NA)) Biobase::exprs(exampleSet) <- log2.na(Biobase::exprs(exampleSet))"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"limit-of-detection-lod","dir":"Articles","previous_headings":"2 ExpressionSet","what":"Limit of detection (LOD)","title":"Bioconductor notes","text":"generate lod.max ~ U[0,1] variable experiment Figure 2.4: LOD based random cutoff quantity shown big impact protein abundance therefore pQTL detection shown real example. Figure 2.5: LOD SCALLOP-INF/INTERVAL Table 2.1: Summary statistics","code":"Biobase::fData(exampleSet) #> data frame with 0 columns and 500 rows Biobase::fData(exampleSet)$lod.max <- apply(Biobase::exprs(exampleSet),1,quantile,runif(nrow(exampleSet))) lod <- pQTLtools::get.prop.below.LLOD(exampleSet) x <- dplyr::arrange(Biobase::fData(lod),desc(pc.belowLOD.new)) knitr::kable(head(lod)) plot(x[,2], main=\"Random quantile cutoff\", ylab=\"<lod%\") rm(list=ls()) dir <- \"~/rds/post_qc_data/interval/phenotype/olink_proteomics/post-qc/\" eset <- readRDS(paste0(dir,\"eset.inf1.flag.out.outlier.in.rds\")) x <- pQTLtools::get.prop.below.LLOD(eset) annot <- Biobase::fData(x) annot$MissDataProp <- as.numeric(gsub(\"\\\\%$\", \"\", annot$MissDataProp)) plot(annot$MissDataProp, annot$pc.belowLOD.new, xlab=\"% <LLOD in Original\",      ylab=\"% <LLOD in post QC dataset\", pch=19) INF <- Sys.getenv(\"INF\") np <- read.table(paste(INF, \"work\", \"INF1.merge.nosig\", sep=\"/\"), header=FALSE,                  col.names = c(\"prot\", \"uniprot\")) kable(np, caption=\"Proteins with no pQTL\") annot$pQTL <- rep(NA, nrow(annot)) no.pQTL.ind <- which(annot$uniprot.id %in% np$uniprot) annot$pQTL[no.pQTL.ind] <- \"red\" annot$pQTL[-no.pQTL.ind] <- \"blue\" annot <- annot[order(annot$pc.belowLOD.new, decreasing = TRUE),] annot <- annot[-grep(\"^BDNF$\", annot$ID),] saveRDS(annot,file=file.path(\"~\",\"pQTLtools\",\"tests\",\"annot.RDS\")) annot <- readRDS(file.path(find.package(\"pQTLtools\"),\"tests\",\"annot.RDS\")) %>%          dplyr::left_join(pQTLdata::inf1[c(\"prot\",\"target.short\",\"alt_name\")],by=c(\"ID\"=\"prot\")) %>%          dplyr::mutate(prot=if_else(is.na(alt_name),target.short,alt_name),order=1:n()) %>%          dplyr::arrange(desc(order)) xtick <- seq(1, nrow(annot)) attach(annot) par(mar=c(10,5,1,1)) plot(100-pc.belowLOD.new,cex=2,pch=19,col=pQTL,xaxt=\"n\",xlab=\"\",ylab=\"\",cex.axis=0.8) text(66,16,\"IL-17C\",offset=0,pos=2,cex=1.5,font=2,srt=0) arrows(67,16,71,16,lwd=2) axis(1, at=xtick, labels=prot, lwd.tick=0.5, lwd=0, las=2, hadj=1, cex.axis=0.8) mtext(\"% samples above LLOD\",side=2,line=2.5,cex=1.2) mtext(\"Ordered protein\",side=1,line=6.5,cex=1.2,font=1) legend(x=1,y=25,c(\"without pQTL\",\"with pQTL\"),box.lwd=0,cex=2,col=c(\"red\",\"blue\"),pch=19) detach(annot) knitr::kable(annot,caption=\"Summary statistics\",row.names=FALSE)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"maendtoend","dir":"Articles","previous_headings":"2 ExpressionSet","what":"maEndtoEnd","title":"Bioconductor notes","text":"Web: https://bioconductor.org/packages/release/workflows/html/maEndToEnd.html. Examples can found PCA, heatmap, normalisation, linear models, enrichment analysis Bioconductor package.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"summarizedexperiment","dir":"Articles","previous_headings":"","what":"SummarizedExperiment","title":"Bioconductor notes","text":"modern construct. Based documentation example, ranged summarized experiment (rse) imputation shown .","code":"set.seed(123) nrows <- 20 ncols <- 4 counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows) missing_indices <- sample(length(counts), size = 5, replace = FALSE) counts[missing_indices] <- NA rowRanges <- GenomicRanges::GRanges(rep(c(\"chr1\", \"chr2\"), c(1, 3) * nrows / 4),                             IRanges::IRanges(floor(runif(nrows, 1e5, 1e6)), width=ncols),                             strand=sample(c(\"+\", \"-\"), nrows, TRUE),                             feature_id=sprintf(\"ID%03d\", 1:nrows)) colData <- S4Vectors::DataFrame(Treatment=rep(c(\"ChIP\", \"Input\"), ncols/2),                                 row.names=LETTERS[1:ncols]) rse <- SummarizedExperiment::SummarizedExperiment(assays=S4Vectors::SimpleList(counts=counts),                                                   rowRanges=rowRanges, colData=colData) SummarizedExperiment::assay(rse) #>               A         B         C           D #>  [1,] 2876.4876 8895.5036 1428.8574 6651.486831 #>  [2,] 7883.2630 6928.3413 4146.0488  949.311769 #>  [3,] 4090.3602 6405.4276 4137.8295 3840.312408 #>  [4,] 8830.2910 9942.7035 3689.0857 2744.562062 #>  [5,] 9404.7324 6557.4023 1525.2950 8146.585749 #>  [6,]        NA 7085.5962 1388.9218 4485.714898 #>  [7,] 5281.5268 5441.1162 2331.1080 8100.833466 #>  [8,] 8924.2980 5941.8261 4660.1585 8124.082706 #>  [9,] 5514.7987 2892.3082 2660.4604 7943.628869 #> [10,] 4566.6907 1471.9894        NA 4398.877044 #> [11,] 9568.3766        NA  459.2658 7544.997111 #> [12,] 4533.8882 9023.0882 4422.5585          NA #> [13,] 6776.0288 6907.3621 7989.4495 7102.113831 #> [14,] 5726.7614 7954.8787 1219.8707    7.247108 #> [15,] 1030.1439  247.1122 5609.9189 4753.690424 #> [16,] 8998.3499 4778.4819 2066.1074 2201.968733 #> [17,] 2461.6313 7584.8369 1276.1890 3798.785561 #> [18,]  421.5533 2164.8630 7533.3253 6128.097262 #> [19,] 3279.8793        NA 8950.5585 3518.627295 #> [20,] 9545.0820 2317.0262 3745.2533 1112.243108 imputed <- MsCoreUtils::impute_knn(as.matrix(SummarizedExperiment::assay(rse)),2) imputed_counts <- MsCoreUtils::impute_RF(as.matrix(SummarizedExperiment::assay(rse)),2) imputed-imputed_counts #>              A         B        C        D #>  [1,]    0.000    0.0000    0.000    0.000 #>  [2,]    0.000    0.0000    0.000    0.000 #>  [3,]    0.000    0.0000    0.000    0.000 #>  [4,]    0.000    0.0000    0.000    0.000 #>  [5,]    0.000    0.0000    0.000    0.000 #>  [6,] 2559.339    0.0000    0.000    0.000 #>  [7,]    0.000    0.0000    0.000    0.000 #>  [8,]    0.000    0.0000    0.000    0.000 #>  [9,]    0.000    0.0000    0.000    0.000 #> [10,]    0.000    0.0000 1791.909    0.000 #> [11,]    0.000 -709.2786    0.000    0.000 #> [12,]    0.000    0.0000    0.000 2467.614 #> [13,]    0.000    0.0000    0.000    0.000 #> [14,]    0.000    0.0000    0.000    0.000 #> [15,]    0.000    0.0000    0.000    0.000 #> [16,]    0.000    0.0000    0.000    0.000 #> [17,]    0.000    0.0000    0.000    0.000 #> [18,]    0.000    0.0000    0.000    0.000 #> [19,]    0.000 1298.3456    0.000    0.000 #> [20,]    0.000    0.0000    0.000    0.000 SummarizedExperiment::assays(rse) <- S4Vectors::SimpleList(counts=imputed_counts) SummarizedExperiment::assay(rse) #>               A         B         C           D #>  [1,] 2876.4876 8895.5036 1428.8574 6651.486831 #>  [2,] 7883.2630 6928.3413 4146.0488  949.311769 #>  [3,] 4090.3602 6405.4276 4137.8295 3840.312408 #>  [4,] 8830.2910 9942.7035 3689.0857 2744.562062 #>  [5,] 9404.7324 6557.4023 1525.2950 8146.585749 #>  [6,] 4439.2947 7085.5962 1388.9218 4485.714898 #>  [7,] 5281.5268 5441.1162 2331.1080 8100.833466 #>  [8,] 8924.2980 5941.8261 4660.1585 8124.082706 #>  [9,] 5514.7987 2892.3082 2660.4604 7943.628869 #> [10,] 4566.6907 1471.9894 4812.3872 4398.877044 #> [11,] 9568.3766 5545.7565  459.2658 7544.997111 #> [12,] 4533.8882 9023.0882 4422.5585 4611.837102 #> [13,] 6776.0288 6907.3621 7989.4495 7102.113831 #> [14,] 5726.7614 7954.8787 1219.8707    7.247108 #> [15,] 1030.1439  247.1122 5609.9189 4753.690424 #> [16,] 8998.3499 4778.4819 2066.1074 2201.968733 #> [17,] 2461.6313 7584.8369 1276.1890 3798.785561 #> [18,]  421.5533 2164.8630 7533.3253 6128.097262 #> [19,] 3279.8793 4566.2289 8950.5585 3518.627295 #> [20,] 9545.0820 2317.0262 3745.2533 1112.243108 SummarizedExperiment::assays(rse) <- S4Vectors::endoapply(SummarizedExperiment::assays(rse), asinh) SummarizedExperiment::assay(rse) #>              A        B        C        D #>  [1,] 8.657472 9.786448 7.957778 9.495743 #>  [2,] 9.665644 9.536523 9.023058 7.548885 #>  [3,] 9.009536 9.458048 9.021074 8.946456 #>  [4,] 9.779090 9.897741 8.906281 8.610524 #>  [5,] 9.842115 9.481497 8.023090 9.698501 #>  [6,] 9.091398 9.558966 7.929430 9.101800 #>  [7,] 9.265118 9.294887 8.447246 9.692869 #>  [8,] 9.789680 9.382919 9.139952 9.695735 #>  [9,] 9.308338 8.662957 8.579402 9.673273 #> [10,] 9.119691 7.987517 9.172096 9.082252 #> [11,] 9.859366 9.313936 6.822778 9.621787 #> [12,] 9.112482 9.800689 9.087621 9.129529 #> [13,] 9.514294 9.533490 9.679024 9.561295 #> [14,] 9.346053 9.674688 7.799647 2.678476 #> [15,] 7.630601 6.202994 9.325439 9.159824 #> [16,] 9.797944 9.165025 8.326569 8.390254 #> [17,] 8.501727 9.627054 7.844781 8.935584 #> [18,] 6.737095 8.373260 9.620239 9.413787 #> [19,] 8.788709 9.119590 9.792618 8.858973 #> [20,] 9.856929 8.441187 8.921392 7.707281  SummarizedExperiment::rowRanges(rse) #> GRanges object with 20 ranges and 1 metadata column: #>        seqnames        ranges strand |  feature_id #>           <Rle>     <IRanges>  <Rle> | <character> #>    [1]     chr1 409164-409167      - |       ID001 #>    [2]     chr1 691082-691085      + |       ID002 #>    [3]     chr1 388335-388338      + |       ID003 #>    [4]     chr1 268922-268925      - |       ID004 #>    [5]     chr1 804064-804067      - |       ID005 #>    ...      ...           ...    ... .         ... #>   [16]     chr2 647861-647864      + |       ID016 #>   [17]     chr2 469620-469623      + |       ID017 #>   [18]     chr2 232385-232388      + |       ID018 #>   [19]     chr2 941769-941772      - |       ID019 #>   [20]     chr2 371106-371109      + |       ID020 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths SummarizedExperiment::rowData(rse) #> DataFrame with 20 rows and 1 column #>      feature_id #>     <character> #> 1         ID001 #> 2         ID002 #> 3         ID003 #> 4         ID004 #> 5         ID005 #> ...         ... #> 16        ID016 #> 17        ID017 #> 18        ID018 #> 19        ID019 #> 20        ID020 SummarizedExperiment::colData(rse) #> DataFrame with 4 rows and 1 column #>     Treatment #>   <character> #> A        ChIP #> B       Input #> C        ChIP #> D       Input"},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"combat","dir":"Articles","previous_headings":"4 Normalisation","what":"ComBat","title":"Bioconductor notes","text":"documentation example, based Bioconductor 3.14. Figure 4.1: ComBat example Figure 4.2: ComBat example Figure 4.3: ComBat example Figure 4.4: ComBat example","code":"data(bladderdata, package=\"bladderbatch\") edat <- bladderEset[1:50]  pheno <- Biobase::pData(edat) batch <- pheno$batch table(batch) #> batch #>  1  2  3  4  5  #> 11 18  4  5 19 quantro::matboxplot(edat,batch,cex.axis=0.6,notch=TRUE,pch=19,ylab=\"Expression\") quantro::matdensity(edat,batch,xlab=\" \",ylab=\"density\") legend(\"topleft\",legend=1:5,col=1:5,lty=1) # 1. parametric adjustment combat_edata1 <- sva::ComBat(dat=edat, batch=batch, par.prior=TRUE, prior.plots=TRUE) #> Found5batches #> Adjusting for0covariate(s) or covariate level(s) #> Standardizing Data across genes #> Fitting L/S model and finding priors #> Finding parametric adjustments #> Adjusting the Data  # 2. non-parametric adjustment, mean-only version combat_edata2 <- sva::ComBat(dat=edat, batch=batch, par.prior=FALSE, mean.only=TRUE) #> Using the 'mean only' version of ComBat #> Found5batches #> Adjusting for0covariate(s) or covariate level(s) #> Standardizing Data across genes #> Fitting L/S model and finding priors #> Finding nonparametric adjustments #> Adjusting the Data  # 3. reference-batch version, with covariates mod <- model.matrix(~as.factor(cancer), data=pheno) combat_edata3 <- sva::ComBat(dat=edat, batch=batch, mod=mod, par.prior=TRUE, ref.batch=3, prior.plots=TRUE) #> Using batch =3as a reference batch (this batch won't change) #> Found5batches #> Adjusting for2covariate(s) or covariate level(s) #> Standardizing Data across genes #> Fitting L/S model and finding priors #> Finding parametric adjustments #> Adjusting the Data"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"quantro","dir":"Articles","previous_headings":"4 Normalisation","what":"quantro","title":"Bioconductor notes","text":"also adapted package vignette FlowSorted.DLPFC.450k place FlowSorted. Figure 4.5: quantro example Figure 4.6: quantro example","code":"data(FlowSorted.DLPFC.450k,package=\"FlowSorted.DLPFC.450k\") p <- getBeta(FlowSorted.DLPFC.450k,offset=100) pd <- Biobase::pData(FlowSorted.DLPFC.450k) quantro::matboxplot(p, groupFactor = pd$CellType, xaxt = \"n\", main = \"Beta Values\", pch=19) quantro::matdensity(p, groupFactor = pd$CellType, xlab = \" \", ylab = \"density\",                     main = \"Beta Values\", brewer.n = 8, brewer.name = \"Dark2\") legend('top', c(\"NeuN_neg\", \"NeuN_pos\"), col = c(1, 2), lty = 1, lwd = 3) qtest <- quantro::quantro(object = p, groupFactor = pd$CellType) #> [quantro] Average medians of the distributions are  #>                         not equal across groups. #> [quantro] Calculating the quantro test statistic. #> [quantro] No permutation testing performed.  #>                          Use B > 0 for permutation testing. if (FALSE) {   doParallel::registerDoParallel(cores=10)   qtestPerm <- quantro::quantro(p, groupFactor = pd$CellType, B = 1000)   quantro::quantroPlot(qtestPerm) }"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"outlier-detection-in-rna-seq","dir":"Articles","previous_headings":"","what":"Outlier detection in RNA-Seq","title":"Bioconductor notes","text":"following adapted package OUTRIDER, noting plotQQ() issues Table 5.1: check list outliers","code":"ctsFile <- system.file('extdata', 'KremerNBaderSmall.tsv', package='OUTRIDER') ctsTable <- read.table(ctsFile, check.names=FALSE) ods <- OUTRIDER::OutriderDataSet(countData=ctsTable) ods <- OUTRIDER::filterExpression(ods, minCounts=TRUE, filterGenes=TRUE) #> 229 genes did not pass the filter due to zero counts. This is 22.9% of the genes. ods <- OUTRIDER::OUTRIDER(ods) #> Mon Mar 24 21:54:32 2025: SizeFactor estimation ... #> Mon Mar 24 21:54:32 2025: Controlling for confounders ... #> Using estimated q with: 23 #> Mon Mar 24 21:54:32 2025: Using the autoencoder implementation for controlling. #> [1] \"Mon Mar 24 21:54:38 2025: Initial PCA loss: 4.73997327486604\" #> [1] \"Mon Mar 24 21:54:42 2025: Iteration: 1 loss: 4.19416269506454\" #> [1] \"Mon Mar 24 21:54:44 2025: Iteration: 2 loss: 4.17550752619036\" #> [1] \"Mon Mar 24 21:54:47 2025: Iteration: 3 loss: 4.16639365666912\" #> [1] \"Mon Mar 24 21:54:49 2025: Iteration: 4 loss: 4.16142359470334\" #> [1] \"Mon Mar 24 21:54:51 2025: Iteration: 5 loss: 4.15785341106832\" #> [1] \"Mon Mar 24 21:54:52 2025: Iteration: 6 loss: 4.15533343090454\" #> [1] \"Mon Mar 24 21:54:54 2025: Iteration: 7 loss: 4.15339892434562\" #> [1] \"Mon Mar 24 21:54:55 2025: Iteration: 8 loss: 4.15175378925737\" #> [1] \"Mon Mar 24 21:54:57 2025: Iteration: 9 loss: 4.15069201289976\" #> [1] \"Mon Mar 24 21:54:58 2025: Iteration: 10 loss: 4.1501222741797\" #> [1] \"Mon Mar 24 21:54:59 2025: Iteration: 11 loss: 4.14904801948777\" #> [1] \"Mon Mar 24 21:55:01 2025: Iteration: 12 loss: 4.14805452270911\" #> [1] \"Mon Mar 24 21:55:01 2025: Iteration: 13 loss: 4.14796461892655\" #> [1] \"Mon Mar 24 21:55:03 2025: Iteration: 14 loss: 4.14722109314569\" #> [1] \"Mon Mar 24 21:55:04 2025: Iteration: 15 loss: 4.14696284053289\" #> Time difference of 25.19469 secs #> [1] \"Mon Mar 24 21:55:04 2025: 15 Final nb-AE loss: 4.14696284053289\" #> Mon Mar 24 21:55:04 2025: Used the autoencoder implementation for controlling. #> Mon Mar 24 21:55:04 2025: P-value calculation ... #> Mon Mar 24 21:55:08 2025: Zscore calculation ... res <- OUTRIDER::results(ods) knitr::kable(res,caption=\"A check list of outliers\") if (\"geneID\" %in% colnames(res) & FALSE)   OUTRIDER::plotQQ(ods, res$geneID, global=TRUE)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"differential-expression","dir":"Articles","previous_headings":"","what":"Differential expression","title":"Bioconductor notes","text":"Figure 6.1: DESeq2 example See package action snakemake workflow1.","code":"ex <- DESeq2::makeExampleDESeqDataSet(m=4) dds <- DESeq2::DESeq(ex) #> estimating size factors #> estimating dispersions #> gene-wise dispersion estimates #> mean-dispersion relationship #> final dispersion estimates #> fitting model and testing res <- DESeq2::results(dds, contrast=c(\"condition\",\"B\",\"A\")) rld <- DESeq2::rlogTransformation(ex, blind=TRUE) dat <- DESeq2::plotPCA(rld, intgroup=c(\"condition\"),returnData=TRUE) #> using ntop=500 top features by variance percentVar <- round(100 * attr(dat,\"percentVar\")) ggplot2::ggplot(dat, ggplot2::aes(PC1, PC2, color=condition, shape=condition)) + ggplot2::geom_point(size=3) + ggplot2::xlab(paste0(\"PC1:\",percentVar[1],\"% variance\")) + ggplot2::ylab(paste0(\"PC2:\",percentVar[2],\"% variance\")) ex$condition <- relevel(ex$condition, ref=\"B\") dds2 <- DESeq2::DESeq(dds) #> using pre-existing size factors #> estimating dispersions #> found already estimated dispersions, replacing these #> gene-wise dispersion estimates #> mean-dispersion relationship #> final dispersion estimates #> fitting model and testing res <- DESeq2::results(dds2) knitr::kable(head(as.data.frame(res)))"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"gene-co-expression-and-network-analysis","dir":"Articles","previous_headings":"","what":"Gene co-expression and network analysis","title":"Bioconductor notes","text":"simple network furnished GeneNet documentation example, Figure 7.1: GeneNet example Figure 7.2: GeneNet example Figure 7.3: GeneNet example side--side heatmaps Figure 7.4: Heatmaps heatmaply.html module analysis WGCNA,","code":"## A random network with 40 nodes  # it contains 780=40*39/2 edges of which 5 percent (=39) are non-zero true.pcor <- GeneNet::ggm.simulate.pcor(40)    # A data set with 40 observations m.sim <- GeneNet::ggm.simulate.data(40, true.pcor)  # A simple estimate of partial correlations estimated.pcor <- corpcor::cor2pcor( cor(m.sim) )  # A comparison of estimated and true values sum((true.pcor-estimated.pcor)^2) #> [1] 346.6915  # A slightly better estimate ... estimated.pcor.2 <- GeneNet::ggm.estimate.pcor(m.sim) #> Estimating optimal shrinkage intensity lambda (correlation matrix): 0.2942 sum((true.pcor-estimated.pcor.2)^2) #> [1] 11.19183  ## ecoli data  data(ecoli, package=\"GeneNet\")  # partial correlation matrix  inferred.pcor <- GeneNet::ggm.estimate.pcor(ecoli) #> Estimating optimal shrinkage intensity lambda (correlation matrix): 0.1804  # p-values, q-values and posterior probabilities for each potential edge  test.results <- GeneNet::network.test.edges(inferred.pcor) #> Estimate (local) false discovery rates (partial correlations): #> Step 1... determine cutoff point #> Step 2... estimate parameters of null distribution and eta0 #> Step 3... compute p-values and estimate empirical PDF/CDF #> Step 4... compute q-values and local fdr #> Step 5... prepare for plotting # best 20 edges (strongest correlation) test.results[1:20,] #>           pcor node1 node2         pval         qval      prob #> 1   0.23185664    51    53 2.220446e-16 3.612205e-13 1.0000000 #> 2   0.22405545    52    53 2.220446e-16 3.612205e-13 1.0000000 #> 3   0.21507824    51    52 2.220446e-16 3.612205e-13 1.0000000 #> 4   0.17328863     7    93 3.108624e-15 3.792816e-12 0.9999945 #> 5  -0.13418892    29    86 1.120812e-09 1.093997e-06 0.9999516 #> 6   0.12594697    21    72 1.103836e-08 8.978563e-06 0.9998400 #> 7   0.11956105    28    86 5.890924e-08 3.853590e-05 0.9998400 #> 8  -0.11723897    26    80 1.060526e-07 5.816172e-05 0.9998400 #> 9  -0.11711625    72    89 1.093655e-07 5.930499e-05 0.9972804 #> 10  0.10658013    20    21 1.366610e-06 5.925275e-04 0.9972804 #> 11  0.10589778    21    73 1.596859e-06 6.678429e-04 0.9972804 #> 12  0.10478689    20    91 2.053403e-06 8.024425e-04 0.9972804 #> 13  0.10420836     7    52 2.338382e-06 8.778605e-04 0.9944557 #> 14  0.10236077    87    95 3.525186e-06 1.224964e-03 0.9944557 #> 15  0.10113550    27    95 4.610444e-06 1.500047e-03 0.9920084 #> 16  0.09928954    21    51 6.868357e-06 2.046549e-03 0.9920084 #> 17  0.09791914    21    88 9.192373e-06 2.520616e-03 0.9920084 #> 18  0.09719685    18    95 1.070232e-05 2.790102e-03 0.9920084 #> 19  0.09621791    28    90 1.313007e-05 3.171817e-03 0.9920084 #> 20  0.09619099    12    80 1.320374e-05 3.182526e-03 0.9920084  # network containing edges with prob > 0.9 (i.e. local fdr < 0.1) net <- GeneNet::extract.network(test.results, cutoff.ggm=0.9) #>  #> Significant edges:  65  #>     Corresponding to  1.26 %  of possible edges net #>           pcor node1 node2         pval         qval      prob #> 1   0.23185664    51    53 2.220446e-16 3.612205e-13 1.0000000 #> 2   0.22405545    52    53 2.220446e-16 3.612205e-13 1.0000000 #> 3   0.21507824    51    52 2.220446e-16 3.612205e-13 1.0000000 #> 4   0.17328863     7    93 3.108624e-15 3.792816e-12 0.9999945 #> 5  -0.13418892    29    86 1.120812e-09 1.093997e-06 0.9999516 #> 6   0.12594697    21    72 1.103836e-08 8.978563e-06 0.9998400 #> 7   0.11956105    28    86 5.890924e-08 3.853590e-05 0.9998400 #> 8  -0.11723897    26    80 1.060526e-07 5.816172e-05 0.9998400 #> 9  -0.11711625    72    89 1.093655e-07 5.930499e-05 0.9972804 #> 10  0.10658013    20    21 1.366610e-06 5.925275e-04 0.9972804 #> 11  0.10589778    21    73 1.596859e-06 6.678429e-04 0.9972804 #> 12  0.10478689    20    91 2.053403e-06 8.024425e-04 0.9972804 #> 13  0.10420836     7    52 2.338382e-06 8.778605e-04 0.9944557 #> 14  0.10236077    87    95 3.525186e-06 1.224964e-03 0.9944557 #> 15  0.10113550    27    95 4.610444e-06 1.500047e-03 0.9920084 #> 16  0.09928954    21    51 6.868357e-06 2.046549e-03 0.9920084 #> 17  0.09791914    21    88 9.192373e-06 2.520616e-03 0.9920084 #> 18  0.09719685    18    95 1.070232e-05 2.790102e-03 0.9920084 #> 19  0.09621791    28    90 1.313007e-05 3.171817e-03 0.9920084 #> 20  0.09619099    12    80 1.320374e-05 3.182526e-03 0.9920084 #> 21  0.09576091    89    95 1.443542e-05 3.354777e-03 0.9891317 #> 22  0.09473210     7    51 1.784126e-05 3.864825e-03 0.9891317 #> 23 -0.09386896    53    58 2.127622e-05 4.313590e-03 0.9891317 #> 24 -0.09366615    29    83 2.217013e-05 4.421099e-03 0.9891317 #> 25 -0.09341148    21    89 2.334321e-05 4.556947e-03 0.9810727 #> 26 -0.09156391    49    93 3.380043e-05 5.955972e-03 0.9810727 #> 27 -0.09150710    80    90 3.418363e-05 6.002083e-03 0.9810727 #> 28  0.09101505     7    53 3.767966e-05 6.408102e-03 0.9810727 #> 29  0.09050688    21    84 4.164471e-05 6.838782e-03 0.9810727 #> 30  0.08965490    72    73 4.919365e-05 7.581866e-03 0.9810727 #> 31 -0.08934025    29    99 5.229604e-05 7.861416e-03 0.9810727 #> 32 -0.08906819     9    95 5.512708e-05 8.104759e-03 0.9810727 #> 33  0.08888345     2    49 5.713144e-05 8.270673e-03 0.9810727 #> 34  0.08850681    86    90 6.143363e-05 8.610161e-03 0.9810727 #> 35  0.08805868    17    53 6.695170e-05 9.015175e-03 0.9810727 #> 36  0.08790809    28    48 6.890884e-05 9.151291e-03 0.9810727 #> 37  0.08783471    33    58 6.988211e-05 9.217597e-03 0.9682377 #> 38 -0.08705796     7    49 8.101244e-05 1.021362e-02 0.9682377 #> 39  0.08645033    20    46 9.086547e-05 1.102466e-02 0.9682377 #> 40  0.08609950    48    86 9.705862e-05 1.150392e-02 0.9682377 #> 41  0.08598769    21    52 9.911458e-05 1.165816e-02 0.9682377 #> 42  0.08555275    32    95 1.075099e-04 1.226435e-02 0.9682377 #> 43  0.08548231    17    51 1.089311e-04 1.236337e-02 0.9424721 #> 44  0.08470370    80    83 1.258659e-04 1.382356e-02 0.9424721 #> 45  0.08442510    80    82 1.325062e-04 1.437068e-02 0.9174573 #> 46  0.08271606    80    93 1.810275e-04 1.845632e-02 0.9174573 #> 47  0.08235175    46    91 1.933329e-04 1.941579e-02 0.9174573 #> 48  0.08217787    25    95 1.994788e-04 1.988432e-02 0.9174573 #> 49 -0.08170331    29    87 2.171999e-04 2.119715e-02 0.9174573 #> 50  0.08123632    19    29 2.360716e-04 2.253606e-02 0.9174573 #> 51  0.08101702    51    84 2.454547e-04 2.318024e-02 0.9174573 #> 52  0.08030748    16    93 2.782643e-04 2.532796e-02 0.9174573 #> 53  0.08006503    28    52 2.903870e-04 2.608271e-02 0.9174573 #> 54 -0.07941656    41    80 3.252833e-04 2.814824e-02 0.9174573 #> 55  0.07941410    54    89 3.254229e-04 2.815620e-02 0.9174573 #> 56 -0.07934653    28    80 3.292784e-04 2.837511e-02 0.9174573 #> 57  0.07916783    29    92 3.396802e-04 2.895702e-02 0.9174573 #> 58 -0.07866905    17    86 3.703635e-04 3.060293e-02 0.9174573 #> 59  0.07827749    16    29 3.962446e-04 3.191462e-02 0.9174573 #> 60 -0.07808262    73    89 4.097452e-04 3.257290e-02 0.9174573 #> 61  0.07766261    52    67 4.403165e-04 3.400207e-02 0.9174573 #> 62  0.07762917    25    87 4.428396e-04 3.411637e-02 0.9174573 #> 63 -0.07739378     9    93 4.609872e-04 3.492295e-02 0.9174573 #> 64  0.07738885    31    80 4.613747e-04 3.493988e-02 0.9174573 #> 65 -0.07718681    80    94 4.775136e-04 3.563444e-02 0.9174573  # significant based on FDR cutoff Q=0.05? num.significant.1 <- sum(test.results$qval <= 0.05) test.results[1:num.significant.1,] #>           pcor node1 node2         pval         qval      prob #> 1   0.23185664    51    53 2.220446e-16 3.612205e-13 1.0000000 #> 2   0.22405545    52    53 2.220446e-16 3.612205e-13 1.0000000 #> 3   0.21507824    51    52 2.220446e-16 3.612205e-13 1.0000000 #> 4   0.17328863     7    93 3.108624e-15 3.792816e-12 0.9999945 #> 5  -0.13418892    29    86 1.120812e-09 1.093997e-06 0.9999516 #> 6   0.12594697    21    72 1.103836e-08 8.978563e-06 0.9998400 #> 7   0.11956105    28    86 5.890924e-08 3.853590e-05 0.9998400 #> 8  -0.11723897    26    80 1.060526e-07 5.816172e-05 0.9998400 #> 9  -0.11711625    72    89 1.093655e-07 5.930499e-05 0.9972804 #> 10  0.10658013    20    21 1.366610e-06 5.925275e-04 0.9972804 #> 11  0.10589778    21    73 1.596859e-06 6.678429e-04 0.9972804 #> 12  0.10478689    20    91 2.053403e-06 8.024425e-04 0.9972804 #> 13  0.10420836     7    52 2.338382e-06 8.778605e-04 0.9944557 #> 14  0.10236077    87    95 3.525186e-06 1.224964e-03 0.9944557 #> 15  0.10113550    27    95 4.610444e-06 1.500047e-03 0.9920084 #> 16  0.09928954    21    51 6.868357e-06 2.046549e-03 0.9920084 #> 17  0.09791914    21    88 9.192373e-06 2.520616e-03 0.9920084 #> 18  0.09719685    18    95 1.070232e-05 2.790102e-03 0.9920084 #> 19  0.09621791    28    90 1.313007e-05 3.171817e-03 0.9920084 #> 20  0.09619099    12    80 1.320374e-05 3.182526e-03 0.9920084 #> 21  0.09576091    89    95 1.443542e-05 3.354777e-03 0.9891317 #> 22  0.09473210     7    51 1.784126e-05 3.864825e-03 0.9891317 #> 23 -0.09386896    53    58 2.127622e-05 4.313590e-03 0.9891317 #> 24 -0.09366615    29    83 2.217013e-05 4.421099e-03 0.9891317 #> 25 -0.09341148    21    89 2.334321e-05 4.556947e-03 0.9810727 #> 26 -0.09156391    49    93 3.380043e-05 5.955972e-03 0.9810727 #> 27 -0.09150710    80    90 3.418363e-05 6.002083e-03 0.9810727 #> 28  0.09101505     7    53 3.767966e-05 6.408102e-03 0.9810727 #> 29  0.09050688    21    84 4.164471e-05 6.838782e-03 0.9810727 #> 30  0.08965490    72    73 4.919365e-05 7.581866e-03 0.9810727 #> 31 -0.08934025    29    99 5.229604e-05 7.861416e-03 0.9810727 #> 32 -0.08906819     9    95 5.512708e-05 8.104759e-03 0.9810727 #> 33  0.08888345     2    49 5.713144e-05 8.270673e-03 0.9810727 #> 34  0.08850681    86    90 6.143363e-05 8.610161e-03 0.9810727 #> 35  0.08805868    17    53 6.695170e-05 9.015175e-03 0.9810727 #> 36  0.08790809    28    48 6.890884e-05 9.151291e-03 0.9810727 #> 37  0.08783471    33    58 6.988211e-05 9.217597e-03 0.9682377 #> 38 -0.08705796     7    49 8.101244e-05 1.021362e-02 0.9682377 #> 39  0.08645033    20    46 9.086547e-05 1.102466e-02 0.9682377 #> 40  0.08609950    48    86 9.705862e-05 1.150392e-02 0.9682377 #> 41  0.08598769    21    52 9.911458e-05 1.165816e-02 0.9682377 #> 42  0.08555275    32    95 1.075099e-04 1.226435e-02 0.9682377 #> 43  0.08548231    17    51 1.089311e-04 1.236337e-02 0.9424721 #> 44  0.08470370    80    83 1.258659e-04 1.382356e-02 0.9424721 #> 45  0.08442510    80    82 1.325062e-04 1.437068e-02 0.9174573 #> 46  0.08271606    80    93 1.810275e-04 1.845632e-02 0.9174573 #> 47  0.08235175    46    91 1.933329e-04 1.941579e-02 0.9174573 #> 48  0.08217787    25    95 1.994788e-04 1.988432e-02 0.9174573 #> 49 -0.08170331    29    87 2.171999e-04 2.119715e-02 0.9174573 #> 50  0.08123632    19    29 2.360716e-04 2.253606e-02 0.9174573 #> 51  0.08101702    51    84 2.454547e-04 2.318024e-02 0.9174573 #> 52  0.08030748    16    93 2.782643e-04 2.532796e-02 0.9174573 #> 53  0.08006503    28    52 2.903870e-04 2.608271e-02 0.9174573 #> 54 -0.07941656    41    80 3.252833e-04 2.814824e-02 0.9174573 #> 55  0.07941410    54    89 3.254229e-04 2.815620e-02 0.9174573 #> 56 -0.07934653    28    80 3.292784e-04 2.837511e-02 0.9174573 #> 57  0.07916783    29    92 3.396802e-04 2.895702e-02 0.9174573 #> 58 -0.07866905    17    86 3.703635e-04 3.060293e-02 0.9174573 #> 59  0.07827749    16    29 3.962446e-04 3.191462e-02 0.9174573 #> 60 -0.07808262    73    89 4.097452e-04 3.257290e-02 0.9174573 #> 61  0.07766261    52    67 4.403165e-04 3.400207e-02 0.9174573 #> 62  0.07762917    25    87 4.428396e-04 3.411637e-02 0.9174573 #> 63 -0.07739378     9    93 4.609872e-04 3.492295e-02 0.9174573 #> 64  0.07738885    31    80 4.613747e-04 3.493988e-02 0.9174573 #> 65 -0.07718681    80    94 4.775136e-04 3.563444e-02 0.9174573 #> 66  0.07706275    27    58 4.876831e-04 3.606179e-02 0.8297811 #> 67 -0.07610709    16    83 5.730532e-04 4.085920e-02 0.8297811 #> 68  0.07550557    53    84 6.337143e-04 4.406472e-02 0.8297811  # significant based on \"local fdr\" cutoff (prob > 0.9)? num.significant.2 <- sum(test.results$prob > 0.9) test.results[test.results$prob > 0.9,] #>           pcor node1 node2         pval         qval      prob #> 1   0.23185664    51    53 2.220446e-16 3.612205e-13 1.0000000 #> 2   0.22405545    52    53 2.220446e-16 3.612205e-13 1.0000000 #> 3   0.21507824    51    52 2.220446e-16 3.612205e-13 1.0000000 #> 4   0.17328863     7    93 3.108624e-15 3.792816e-12 0.9999945 #> 5  -0.13418892    29    86 1.120812e-09 1.093997e-06 0.9999516 #> 6   0.12594697    21    72 1.103836e-08 8.978563e-06 0.9998400 #> 7   0.11956105    28    86 5.890924e-08 3.853590e-05 0.9998400 #> 8  -0.11723897    26    80 1.060526e-07 5.816172e-05 0.9998400 #> 9  -0.11711625    72    89 1.093655e-07 5.930499e-05 0.9972804 #> 10  0.10658013    20    21 1.366610e-06 5.925275e-04 0.9972804 #> 11  0.10589778    21    73 1.596859e-06 6.678429e-04 0.9972804 #> 12  0.10478689    20    91 2.053403e-06 8.024425e-04 0.9972804 #> 13  0.10420836     7    52 2.338382e-06 8.778605e-04 0.9944557 #> 14  0.10236077    87    95 3.525186e-06 1.224964e-03 0.9944557 #> 15  0.10113550    27    95 4.610444e-06 1.500047e-03 0.9920084 #> 16  0.09928954    21    51 6.868357e-06 2.046549e-03 0.9920084 #> 17  0.09791914    21    88 9.192373e-06 2.520616e-03 0.9920084 #> 18  0.09719685    18    95 1.070232e-05 2.790102e-03 0.9920084 #> 19  0.09621791    28    90 1.313007e-05 3.171817e-03 0.9920084 #> 20  0.09619099    12    80 1.320374e-05 3.182526e-03 0.9920084 #> 21  0.09576091    89    95 1.443542e-05 3.354777e-03 0.9891317 #> 22  0.09473210     7    51 1.784126e-05 3.864825e-03 0.9891317 #> 23 -0.09386896    53    58 2.127622e-05 4.313590e-03 0.9891317 #> 24 -0.09366615    29    83 2.217013e-05 4.421099e-03 0.9891317 #> 25 -0.09341148    21    89 2.334321e-05 4.556947e-03 0.9810727 #> 26 -0.09156391    49    93 3.380043e-05 5.955972e-03 0.9810727 #> 27 -0.09150710    80    90 3.418363e-05 6.002083e-03 0.9810727 #> 28  0.09101505     7    53 3.767966e-05 6.408102e-03 0.9810727 #> 29  0.09050688    21    84 4.164471e-05 6.838782e-03 0.9810727 #> 30  0.08965490    72    73 4.919365e-05 7.581866e-03 0.9810727 #> 31 -0.08934025    29    99 5.229604e-05 7.861416e-03 0.9810727 #> 32 -0.08906819     9    95 5.512708e-05 8.104759e-03 0.9810727 #> 33  0.08888345     2    49 5.713144e-05 8.270673e-03 0.9810727 #> 34  0.08850681    86    90 6.143363e-05 8.610161e-03 0.9810727 #> 35  0.08805868    17    53 6.695170e-05 9.015175e-03 0.9810727 #> 36  0.08790809    28    48 6.890884e-05 9.151291e-03 0.9810727 #> 37  0.08783471    33    58 6.988211e-05 9.217597e-03 0.9682377 #> 38 -0.08705796     7    49 8.101244e-05 1.021362e-02 0.9682377 #> 39  0.08645033    20    46 9.086547e-05 1.102466e-02 0.9682377 #> 40  0.08609950    48    86 9.705862e-05 1.150392e-02 0.9682377 #> 41  0.08598769    21    52 9.911458e-05 1.165816e-02 0.9682377 #> 42  0.08555275    32    95 1.075099e-04 1.226435e-02 0.9682377 #> 43  0.08548231    17    51 1.089311e-04 1.236337e-02 0.9424721 #> 44  0.08470370    80    83 1.258659e-04 1.382356e-02 0.9424721 #> 45  0.08442510    80    82 1.325062e-04 1.437068e-02 0.9174573 #> 46  0.08271606    80    93 1.810275e-04 1.845632e-02 0.9174573 #> 47  0.08235175    46    91 1.933329e-04 1.941579e-02 0.9174573 #> 48  0.08217787    25    95 1.994788e-04 1.988432e-02 0.9174573 #> 49 -0.08170331    29    87 2.171999e-04 2.119715e-02 0.9174573 #> 50  0.08123632    19    29 2.360716e-04 2.253606e-02 0.9174573 #> 51  0.08101702    51    84 2.454547e-04 2.318024e-02 0.9174573 #> 52  0.08030748    16    93 2.782643e-04 2.532796e-02 0.9174573 #> 53  0.08006503    28    52 2.903870e-04 2.608271e-02 0.9174573 #> 54 -0.07941656    41    80 3.252833e-04 2.814824e-02 0.9174573 #> 55  0.07941410    54    89 3.254229e-04 2.815620e-02 0.9174573 #> 56 -0.07934653    28    80 3.292784e-04 2.837511e-02 0.9174573 #> 57  0.07916783    29    92 3.396802e-04 2.895702e-02 0.9174573 #> 58 -0.07866905    17    86 3.703635e-04 3.060293e-02 0.9174573 #> 59  0.07827749    16    29 3.962446e-04 3.191462e-02 0.9174573 #> 60 -0.07808262    73    89 4.097452e-04 3.257290e-02 0.9174573 #> 61  0.07766261    52    67 4.403165e-04 3.400207e-02 0.9174573 #> 62  0.07762917    25    87 4.428396e-04 3.411637e-02 0.9174573 #> 63 -0.07739378     9    93 4.609872e-04 3.492295e-02 0.9174573 #> 64  0.07738885    31    80 4.613747e-04 3.493988e-02 0.9174573 #> 65 -0.07718681    80    94 4.775136e-04 3.563444e-02 0.9174573  # parameters of the mixture distribution used to compute p-values etc. c <- fdrtool::fdrtool(corpcor::sm2vec(inferred.pcor), statistic=\"correlation\") #> Step 1... determine cutoff point #> Step 2... estimate parameters of null distribution and eta0 #> Step 3... compute p-values and estimate empirical PDF/CDF #> Step 4... compute q-values and local fdr #> Step 5... prepare for plotting c$param #>          cutoff N.cens      eta0     eta0.SE    kappa kappa.SE #> [1,] 0.03553068   4352 0.9474623 0.005656465 2043.377 94.72267  ## A random network with 20 nodes and 10 percent (=19) edges true.pcor <- GeneNet::ggm.simulate.pcor(20, 0.1)  # convert to edge list test.results <- GeneNet::ggm.list.edges(true.pcor)[1:19,] nlab <- LETTERS[1:20]  # graphviz # network.make.dot(filename=\"test.dot\", test.results, nlab, main = \"A graph\") # system(\"fdp -T svg -o test.svg test.dot\")  # Rgraphviz gr <- GeneNet::network.make.graph( test.results, nlab) gr #> A graphNEL graph with directed edges #> Number of Nodes = 20  #> Number of Edges = 38 num.nodes(gr) #> [1] 20 edge.info(gr) #> $weight #>      A~H      D~F      D~O      E~R      F~L      F~G      G~R      G~O  #> -0.76325 -0.47042 -0.53865 -0.52631 -0.05494  0.42383 -0.19385  0.32270  #>      H~T      I~J      J~S      J~M      K~R      K~L      L~N      N~R  #> -0.34139  0.54040  0.41751  0.62051  0.33471 -0.64564 -0.05633  0.55074  #>      O~R      O~P      S~T  #> -0.04365 -0.37113  0.57545  #>  #> $dir #>    A~H    D~F    D~O    E~R    F~L    F~G    G~R    G~O    H~T    I~J    J~S  #> \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\"  #>    J~M    K~R    K~L    L~N    N~R    O~R    O~P    S~T  #> \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" gr2 <- GeneNet::network.make.graph( test.results, nlab, drop.singles=TRUE) gr2 #> A graphNEL graph with directed edges #> Number of Nodes = 17  #> Number of Edges = 38 GeneNet::num.nodes(gr2) #> [1] 17 GeneNet::edge.info(gr2) #> $weight #>      A~H      D~F      D~O      E~R      F~L      F~G      G~R      G~O  #> -0.76325 -0.47042 -0.53865 -0.52631 -0.05494  0.42383 -0.19385  0.32270  #>      H~T      I~J      J~S      J~M      K~R      K~L      L~N      N~R  #> -0.34139  0.54040  0.41751  0.62051  0.33471 -0.64564 -0.05633  0.55074  #>      O~R      O~P      S~T  #> -0.04365 -0.37113  0.57545  #>  #> $dir #>    A~H    D~F    D~O    E~R    F~L    F~G    G~R    G~O    H~T    I~J    J~S  #> \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\"  #>    J~M    K~R    K~L    L~N    N~R    O~R    O~P    S~T  #> \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\" \"none\"  # plot network plot(gr, \"fdp\") #> Warning in arrows(tail_from[1], tail_from[2], tail_to[1], tail_to[2], col = #> edgeColor, : zero-length arrow is of indeterminate angle and so skipped #> Warning in arrows(head_from[1], head_from[2], head_to[1], head_to[2], col = #> edgeColor, : zero-length arrow is of indeterminate angle and so skipped #> Warning in arrows(head_from[1], head_from[2], head_to[1], head_to[2], col = #> edgeColor, : zero-length arrow is of indeterminate angle and so skipped plot(gr2, \"fdp\") set.seed(123454321) m <- matrix(runif(2500),50) r <- cor(m) g <- as.matrix(r>=0.7)+0 f1 <- ComplexHeatmap::Heatmap(r) f2 <- ComplexHeatmap::Heatmap(g) f <- f1+f2 ComplexHeatmap::draw(f) df <- heatmaply::normalize(mtcars) hm <- heatmaply::heatmaply(df,k_col=5,k_row=5,                            colors = grDevices::colorRampPalette(RColorBrewer::brewer.pal(3, \"RdBu\"))(256)) htmlwidgets::saveWidget(hm,file=\"heatmaply.html\") htmltools::tags$iframe(src = \"heatmaply.html\", width = \"100%\", height = \"550px\") pwr <- c(1:10, seq(from=12, to=30, by=2)) sft <- WGCNA::pickSoftThreshold(dat, powerVector=pwr, verbose=5) ADJ <- abs(cor(dat, method=\"pearson\", use=\"pairwise.complete.obs\"))^6 dissADJ <- 1-ADJ dissTOM <- WGCNA::TOMdist(ADJ) TOM <- WGCNA::TOMsimilarityFromExpr(dat) Tree <- hclust(as.dist(1-TOM), method=\"average\") for(j in pwr) {   pam_name <- paste0(\"pam\",j)   assign(pam_name, cluster::pam(as.dist(dissADJ),j))   pamTOM_name <- paste0(\"pamTOM\",j)   assign(pamTOM_name,cluster::pam(as.dist(dissTOM),j))   tc <- table(get(pam_name)$clustering,get(pamTOM_name)$clustering)   print(tc)   print(diag(tc)) } colorStaticTOM <- as.character(WGCNA::cutreeStaticColor(Tree,cutHeight=.99,minSize=5)) colorDynamicTOM <- WGCNA::labels2colors(cutreeDynamic(Tree,method=\"tree\",minClusterSize=5)) Colors <- data.frame(pamTOM6$clustering,colorStaticTOM,colorDynamicTOM) WGCNA::plotDendroAndColors(Tree, Colors, dendroLabels=FALSE, hang=0.03, addGuide=TRUE, guideHang=0.05) meg <- WGCNA::moduleEigengenes(dat, color=1:ncol(dat), softPower=6)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"metadata","dir":"Articles","previous_headings":"","what":"Metadata","title":"Bioconductor notes","text":"section based package recount3.","code":"hs <- recount3::available_projects() dim(subset(hs,file_source==\"gtex\")) recount3::annotation_options(\"human\") blood_rse <- recount3::create_rse(subset(hs,project==\"BLOOD\")) S4Vectors::metadata(blood_rse) SummarizedExperiment::rowRanges(blood_rse) colnames(SummarizedExperiment::colData(blood_rse))[1:20] recount3::expand_sra_attributes(blood_rse)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"pathway-and-enrichment-analysis","dir":"Articles","previous_headings":"","what":"Pathway and enrichment analysis","title":"Bioconductor notes","text":"","code":"reactome <- graphite::pathways(\"hsapiens\", \"reactome\") kegg <- graphite::pathways(\"hsapiens\",\"kegg\") pharmgkb <- graphite::pathways(\"hsapiens\",\"pharmgkb\") nodes(kegg[[21]]) #>  [1] \"ENTREZID:102724560\" \"ENTREZID:10993\"     \"ENTREZID:113675\"    #>  [4] \"ENTREZID:132158\"    \"ENTREZID:1610\"      \"ENTREZID:1738\"      #>  [7] \"ENTREZID:1757\"      \"ENTREZID:189\"       \"ENTREZID:211\"       #> [10] \"ENTREZID:212\"       \"ENTREZID:23464\"     \"ENTREZID:2593\"      #> [13] \"ENTREZID:26227\"     \"ENTREZID:2628\"      \"ENTREZID:27232\"     #> [16] \"ENTREZID:2731\"      \"ENTREZID:275\"       \"ENTREZID:29958\"     #> [19] \"ENTREZID:29968\"     \"ENTREZID:441531\"    \"ENTREZID:501\"       #> [22] \"ENTREZID:51268\"     \"ENTREZID:5223\"      \"ENTREZID:5224\"      #> [25] \"ENTREZID:55349\"     \"ENTREZID:5723\"      \"ENTREZID:635\"       #> [28] \"ENTREZID:63826\"     \"ENTREZID:6470\"      \"ENTREZID:6472\"      #> [31] \"ENTREZID:64902\"     \"ENTREZID:669\"       \"ENTREZID:875\"       #> [34] \"ENTREZID:9380\"      \"ENTREZID:1491\" kegg_t2g <- ldply(lapply(kegg, nodes), data.frame) names(kegg_t2g) <- c(\"gs_name\", \"gene_symbol\") VEGF <- subset(kegg_t2g,gs_name==\"VEGF signaling pathway\")[[2]] eKEGG <- clusterProfiler::enricher(gene=VEGF, TERM2GENE = kegg_t2g,                                    universe=,                                    pAdjustMethod = \"BH\",                                    pvalueCutoff = 0.1, qvalueCutoff = 0.05,                                    minGSSize = 10, maxGSSize = 500)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"transcript-databases","dir":"Articles","previous_headings":"","what":"Transcript databases","title":"Bioconductor notes","text":"overview annotation available2.","code":"# columns(org.Hs.eg.db) # keyref <- keys(org.Hs.eg.db, keytype=\"ENTREZID\") # symbol_uniprot <- select(org.Hs.eg.db,keys=keyref,columns = c(\"SYMBOL\",\"UNIPROT\")) # subset(symbol_uniprot,SYMBOL==\"MC4R\")  x <- EnsDb.Hsapiens.v86 ensembldb::listColumns(x, \"protein\", skip.keys=TRUE) #> [1] \"tx_id\"            \"protein_id\"       \"protein_sequence\" ensembldb::listGenebiotypes(x) #>  [1] \"protein_coding\"                     \"unitary_pseudogene\"                 #>  [3] \"unprocessed_pseudogene\"             \"processed_pseudogene\"               #>  [5] \"processed_transcript\"               \"transcribed_unprocessed_pseudogene\" #>  [7] \"antisense\"                          \"transcribed_unitary_pseudogene\"     #>  [9] \"polymorphic_pseudogene\"             \"lincRNA\"                            #> [11] \"sense_intronic\"                     \"transcribed_processed_pseudogene\"   #> [13] \"sense_overlapping\"                  \"IG_V_pseudogene\"                    #> [15] \"pseudogene\"                         \"TR_V_gene\"                          #> [17] \"3prime_overlapping_ncRNA\"           \"IG_V_gene\"                          #> [19] \"bidirectional_promoter_lncRNA\"      \"snRNA\"                              #> [21] \"miRNA\"                              \"misc_RNA\"                           #> [23] \"snoRNA\"                             \"rRNA\"                               #> [25] \"Mt_tRNA\"                            \"Mt_rRNA\"                            #> [27] \"IG_C_gene\"                          \"IG_J_gene\"                          #> [29] \"TR_J_gene\"                          \"TR_C_gene\"                          #> [31] \"TR_V_pseudogene\"                    \"TR_J_pseudogene\"                    #> [33] \"IG_D_gene\"                          \"ribozyme\"                           #> [35] \"IG_C_pseudogene\"                    \"TR_D_gene\"                          #> [37] \"TEC\"                                \"IG_J_pseudogene\"                    #> [39] \"scRNA\"                              \"scaRNA\"                             #> [41] \"vaultRNA\"                           \"sRNA\"                               #> [43] \"macro_lncRNA\"                       \"non_coding\"                         #> [45] \"IG_pseudogene\"                      \"LRG_gene\" ensembldb::listTxbiotypes(x) #>  [1] \"protein_coding\"                     \"processed_transcript\"               #>  [3] \"nonsense_mediated_decay\"            \"retained_intron\"                    #>  [5] \"unitary_pseudogene\"                 \"TEC\"                                #>  [7] \"miRNA\"                              \"misc_RNA\"                           #>  [9] \"non_stop_decay\"                     \"unprocessed_pseudogene\"             #> [11] \"processed_pseudogene\"               \"transcribed_unprocessed_pseudogene\" #> [13] \"lincRNA\"                            \"antisense\"                          #> [15] \"transcribed_unitary_pseudogene\"     \"polymorphic_pseudogene\"             #> [17] \"sense_intronic\"                     \"transcribed_processed_pseudogene\"   #> [19] \"sense_overlapping\"                  \"IG_V_pseudogene\"                    #> [21] \"pseudogene\"                         \"TR_V_gene\"                          #> [23] \"3prime_overlapping_ncRNA\"           \"IG_V_gene\"                          #> [25] \"bidirectional_promoter_lncRNA\"      \"snRNA\"                              #> [27] \"snoRNA\"                             \"rRNA\"                               #> [29] \"Mt_tRNA\"                            \"Mt_rRNA\"                            #> [31] \"IG_C_gene\"                          \"IG_J_gene\"                          #> [33] \"TR_J_gene\"                          \"TR_C_gene\"                          #> [35] \"TR_V_pseudogene\"                    \"TR_J_pseudogene\"                    #> [37] \"IG_D_gene\"                          \"ribozyme\"                           #> [39] \"IG_C_pseudogene\"                    \"TR_D_gene\"                          #> [41] \"IG_J_pseudogene\"                    \"scRNA\"                              #> [43] \"scaRNA\"                             \"vaultRNA\"                           #> [45] \"sRNA\"                               \"macro_lncRNA\"                       #> [47] \"non_coding\"                         \"IG_pseudogene\"                      #> [49] \"LRG_gene\" ensembldb::listTables(x) #> $gene #> [1] \"gene_id\"          \"gene_name\"        \"gene_biotype\"     \"gene_seq_start\"   #> [5] \"gene_seq_end\"     \"seq_name\"         \"seq_strand\"       \"seq_coord_system\" #> [9] \"symbol\"           #>  #> $tx #> [1] \"tx_id\"            \"tx_biotype\"       \"tx_seq_start\"     \"tx_seq_end\"       #> [5] \"tx_cds_seq_start\" \"tx_cds_seq_end\"   \"gene_id\"          \"tx_name\"          #>  #> $tx2exon #> [1] \"tx_id\"    \"exon_id\"  \"exon_idx\" #>  #> $exon #> [1] \"exon_id\"        \"exon_seq_start\" \"exon_seq_end\"   #>  #> $chromosome #> [1] \"seq_name\"    \"seq_length\"  \"is_circular\" #>  #> $protein #> [1] \"tx_id\"            \"protein_id\"       \"protein_sequence\" #>  #> $uniprot #> [1] \"protein_id\"           \"uniprot_id\"           \"uniprot_db\"           #> [4] \"uniprot_mapping_type\" #>  #> $protein_domain #> [1] \"protein_id\"            \"protein_domain_id\"     \"protein_domain_source\" #> [4] \"interpro_accession\"    \"prot_dom_start\"        \"prot_dom_end\"          #>  #> $entrezgene #> [1] \"gene_id\"  \"entrezid\" #>  #> $metadata #> [1] \"name\"  \"value\" ensembldb::metadata(x) #>                  name                               value #> 1             Db type                               EnsDb #> 2     Type of Gene ID                     Ensembl Gene ID #> 3  Supporting package                           ensembldb #> 4       Db created by ensembldb package from Bioconductor #> 5      script_version                               0.3.0 #> 6       Creation time            Thu May 18 16:32:27 2017 #> 7     ensembl_version                                  86 #> 8        ensembl_host                           localhost #> 9            Organism                        homo_sapiens #> 10        taxonomy_id                                9606 #> 11       genome_build                              GRCh38 #> 12    DBSCHEMAVERSION                                 2.0 ensembldb::organism(x) #> [1] \"Homo sapiens\" ensembldb::returnFilterColumns(x) #> [1] TRUE ensembldb::seqinfo(x) #> Seqinfo object with 357 sequences (1 circular) from GRCh38 genome: #>   seqnames seqlengths isCircular genome #>   X         156040895      FALSE GRCh38 #>   20         64444167      FALSE GRCh38 #>   1         248956422      FALSE GRCh38 #>   6         170805979      FALSE GRCh38 #>   3         198295559      FALSE GRCh38 #>   ...             ...        ...    ... #>   LRG_239      114904      FALSE GRCh38 #>   LRG_311      115492      FALSE GRCh38 #>   LRG_721       33396      FALSE GRCh38 #>   LRG_741      231167      FALSE GRCh38 #>   LRG_93        22459      FALSE GRCh38 ensembldb::seqlevels(xensembldb::updateEnsDb(x) #> EnsDb for Ensembl: #> |Backend: SQLite #> |Db type: EnsDb #> |Type of Gene ID: Ensembl Gene ID #> |Supporting package: ensembldb #> |Db created by: ensembldb package from Bioconductor #> |script_version: 0.3.0 #> |Creation time: Thu May 18 16:32:27 2017 #> |ensembl_version: 86 #> |ensembl_host: localhost #> |Organism: homo_sapiens #> |taxonomy_id: 9606 #> |genome_build: GRCh38 #> |DBSCHEMAVERSION: 2.0 #> | No. of genes: 63970. #> | No. of transcripts: 216741. #> |Protein data available.  ensembldb::genes(x, columns=c(\"gene_name\"),              filter=list(SeqNameFilter(\"X\"), AnnotationFilter::GeneBiotypeFilter(\"protein_coding\"))) #> GRanges object with 841 ranges and 3 metadata columns: #>                   seqnames              ranges strand |   gene_name #>                      <Rle>           <IRanges>  <Rle> | <character> #>   ENSG00000182378        X       276322-303356      + |      PLCXD1 #>   ENSG00000178605        X       304529-318819      - |      GTPBP6 #>   ENSG00000167393        X       333963-386955      - |     PPP2R3B #>   ENSG00000185960        X       624344-659411      + |        SHOX #>   ENSG00000205755        X     1187549-1212750      - |       CRLF2 #>               ...      ...                 ...    ... .         ... #>   ENSG00000277745        X 155459415-155460005      - |      H2AFB3 #>   ENSG00000185973        X 155490115-155669944      - |       TMLHE #>   ENSG00000168939        X 155767812-155782459      + |       SPRY3 #>   ENSG00000124333        X 155881293-155943769      + |       VAMP7 #>   ENSG00000124334        X 155997581-156010817      + |        IL9R #>                         gene_id  gene_biotype #>                     <character>   <character> #>   ENSG00000182378 ENSG000001... protein_co... #>   ENSG00000178605 ENSG000001... protein_co... #>   ENSG00000167393 ENSG000001... protein_co... #>   ENSG00000185960 ENSG000001... protein_co... #>   ENSG00000205755 ENSG000002... protein_co... #>               ...           ...           ... #>   ENSG00000277745 ENSG000002... protein_co... #>   ENSG00000185973 ENSG000001... protein_co... #>   ENSG00000168939 ENSG000001... protein_co... #>   ENSG00000124333 ENSG000001... protein_co... #>   ENSG00000124334 ENSG000001... protein_co... #>   ------- #>   seqinfo: 1 sequence from GRCh38 genome ensembldb ::transcripts(x, columns=ensembldb::listColumns(x, \"tx\"),                         filter = AnnotationFilter::AnnotationFilterList(), order.type = \"asc\", return.type = \"GRanges\") #> GRanges object with 216741 ranges and 6 metadata columns: #>                   seqnames            ranges strand |         tx_id #>                      <Rle>         <IRanges>  <Rle> |   <character> #>   ENST00000456328        1       11869-14409      + | ENST000004... #>   ENST00000450305        1       12010-13670      + | ENST000004... #>   ENST00000488147        1       14404-29570      - | ENST000004... #>   ENST00000619216        1       17369-17436      - | ENST000006... #>   ENST00000473358        1       29554-31097      + | ENST000004... #>               ...      ...               ...    ... .           ... #>   ENST00000420810        Y 26549425-26549743      + | ENST000004... #>   ENST00000456738        Y 26586642-26591601      - | ENST000004... #>   ENST00000435945        Y 26594851-26634652      - | ENST000004... #>   ENST00000435741        Y 26626520-26627159      - | ENST000004... #>   ENST00000431853        Y 56855244-56855488      + | ENST000004... #>                      tx_biotype tx_cds_seq_start tx_cds_seq_end       gene_id #>                     <character>        <integer>      <integer>   <character> #>   ENST00000456328 processed_...             <NA>           <NA> ENSG000002... #>   ENST00000450305 transcribe...             <NA>           <NA> ENSG000002... #>   ENST00000488147 unprocesse...             <NA>           <NA> ENSG000002... #>   ENST00000619216         miRNA             <NA>           <NA> ENSG000002... #>   ENST00000473358       lincRNA             <NA>           <NA> ENSG000002... #>               ...           ...              ...            ...           ... #>   ENST00000420810 processed_...             <NA>           <NA> ENSG000002... #>   ENST00000456738 unprocesse...             <NA>           <NA> ENSG000002... #>   ENST00000435945 unprocesse...             <NA>           <NA> ENSG000002... #>   ENST00000435741 processed_...             <NA>           <NA> ENSG000002... #>   ENST00000431853 processed_...             <NA>           <NA> ENSG000002... #>                         tx_name #>                     <character> #>   ENST00000456328 ENST000004... #>   ENST00000450305 ENST000004... #>   ENST00000488147 ENST000004... #>   ENST00000619216 ENST000006... #>   ENST00000473358 ENST000004... #>               ...           ... #>   ENST00000420810 ENST000004... #>   ENST00000456738 ENST000004... #>   ENST00000435945 ENST000004... #>   ENST00000435741 ENST000004... #>   ENST00000431853 ENST000004... #>   ------- #>   seqinfo: 357 sequences (1 circular) from GRCh38 genome  txdbEnsemblGRCh38 <- GenomicFeatures::makeTxDbFromEnsembl(organism=\"Homo sapiens\", release=98) #> Warning in call_fun_in_txdbmaker(\"makeTxDbFromEnsembl\", ...): makeTxDbFromEnsembl() has moved to the txdbmaker package. Please call #>   txdbmaker::makeTxDbFromEnsembl() to get rid of this warning. #> Fetch transcripts and genes from Ensembl ... OK #>   (fetched 250194 transcripts from 67946 genes) #> Fetch exons and CDS from Ensembl ... OK #> Fetch chromosome names and lengths from Ensembl ...OK #> Gather the metadata ... OK #> Make the TxDb object ... OK txdb <- as.list(txdbEnsemblGRCh38) lapply(txdb,head) #> $transcripts #>   tx_id         tx_name        tx_type        tx_chrom tx_strand tx_start #> 1     1 ENST00000636745         lncRNA CHR_HG107_PATCH         +  1049876 #> 2     2 ENST00000636387         lncRNA CHR_HG107_PATCH         +  1052607 #> 3     3 ENST00000643422 protein_coding CHR_HG107_PATCH         +  1075018 #> 4     4 ENST00000645631 protein_coding CHR_HG107_PATCH         +  1075018 #> 5     5 ENST00000636567 protein_coding CHR_HG107_PATCH         +  1159911 #> 6     6 ENST00000636545 protein_coding CHR_HG107_PATCH         -  1012823 #>    tx_end #> 1 1055745 #> 2 1055745 #> 3 1112365 #> 4 1112365 #> 5 1203106 #> 6 1036718 #>  #> $splicings #>   tx_id exon_rank exon_id       exon_name      exon_chrom exon_strand #> 1     1         1       1 ENSE00003797146 CHR_HG107_PATCH           + #> 2     1         2       2 ENSE00003795151 CHR_HG107_PATCH           + #> 3     1         3       4 ENSE00003793692 CHR_HG107_PATCH           + #> 4     1         4       5 ENSE00003797325 CHR_HG107_PATCH           + #> 5     2         1       3 ENSE00003798310 CHR_HG107_PATCH           + #> 6     3         1       6 ENSE00003815958 CHR_HG107_PATCH           + #>   exon_start exon_end cds_id        cds_name cds_start cds_end #> 1    1049876  1049958     NA            <NA>        NA      NA #> 2    1051619  1051839     NA            <NA>        NA      NA #> 3    1054235  1054388     NA            <NA>        NA      NA #> 4    1055110  1055745     NA            <NA>        NA      NA #> 5    1052607  1055745     NA            <NA>        NA      NA #> 6    1075018  1075093      1 ENSP00000494473   1075018 1075093 #>  #> $genes #>   tx_id         gene_id #> 1     1 ENSG00000283640 #> 2     2 ENSG00000283640 #> 3     3 ENSG00000284971 #> 4     4 ENSG00000284971 #> 5     5 ENSG00000283158 #> 6     6 ENSG00000283350 #>  #> $chrominfo #>              chrom    length is_circular #> 1  CHR_HG107_PATCH 135088590          NA #> 2  CHR_HG109_PATCH  58617934          NA #> 3  CHR_HG126_PATCH 198295908          NA #> 4 CHR_HG1277_PATCH 133754853          NA #> 5 CHR_HG1296_PATCH 190208697          NA #> 6 CHR_HG1298_PATCH 190196285          NA  txdb <- TxDb.Hsapiens.UCSC.hg38.knownGene  # liverExprs <- quantifyExpressionsFromBWs(txdb = txdb,BWfiles=,experimentalDesign=)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"spectrum-data-analysis","dir":"Articles","previous_headings":"","what":"Spectrum data analysis","title":"Bioconductor notes","text":"section collects notes peptide/protein analysis, especially respect spectrum data.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"peptide-sequence","dir":"Articles","previous_headings":"11 Spectrum data analysis","what":"Peptide sequence","title":"Bioconductor notes","text":"example PROC_HUMAN, handled Biostrings package, Figure 11.1: peptide association plot","code":"fasta_file_path <- 'https://rest.uniprot.org/uniprotkb/P04070.fasta' fasta_sequences <- Biostrings::readAAStringSet(fasta_file_path, format = \"fasta\") AA_sequence <- fasta_sequences[[1]] cat(\"Sequence:\", toString(AA_sequence), \"\\n\") iso_442688365 <- 'TDGEGALSEPSATVTIEELAAPPPPVLMHHGESSQVLHPGNK' match_position <- regexpr(iso_442688365, AA_sequence) match_position mp <- matchPattern(iso_442688365,AA_sequence) mp load(system.file(\"tests\",\"PROC.rda\",package=\"pQTLtools\")) pQTLtools::peptideAssociationPlot(protein,cistrans) #> Joining with `by = join_by(Modified.Peptide.Sequence)`"},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"setup","dir":"Articles","previous_headings":"11 Spectrum data analysis > 11.2 Spectrum data analysis","what":"Setup","title":"Bioconductor notes","text":".raw files can handled rawrr package nevertheless requires necessary files,","code":"library(rawrr) if (isFALSE(rawrr::.checkDllInMonoPath())){    rawrr::installRawFileReaderDLLs() } if (isFALSE(file.exists(rawrr:::.rawrrAssembly()))){    rawrr::installRawrrExe() }"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"list-of-raw-files","dir":"Articles","previous_headings":"11 Spectrum data analysis > 11.2 Spectrum data analysis","what":"List of.raw files","title":"Bioconductor notes","text":"Based real project, following example listing/generating multiple .raw .zip files","code":"# ZWK .raw data spectra_ZWK <- \"~/Caprion/pre_qc_data/spectral_library_ZWK\" raw_files <- list.files(spectra_ZWK, pattern = \"\\\\.raw$\", full.names = TRUE) ## collectively suppressMessages(library(MsBackendRawFileReader)) ZWK <- Spectra::backendInitialize(MsBackendRawFileReader::MsBackendRawFileReader(),        files = raw_files) class(ZWK) methods(class=class(ZWK)) Spectra(ZWK) spectraData(ZWK) ZWK ZWKvars <- ZWK |> Spectra::spectraVariables() ZWKdata <- ZWK |> Spectra::spectraData() dim(ZWKdata) # rows with >=1 non-NA value in the columns with prefix \"precursor\" precursor <- apply(ZWKdata[grep(\"precursor\",ZWKvars)], 1, function(x) any(!is.na(x))) ZWKdata_filtered <- ZWKdata[precursor, ] save(ZWK,file=\"~/Caprion/analysis/work/ZWK.rda\")  # ZYQ/UDP library(utils) spectra <- \"~/Caprion/pre_qc_data/spectra\" zip_files <- dir(spectra, recursive = TRUE, full.names=TRUE) work_dir <- \"~/Caprion/analysis/work\" for (zip_file in zip_files) unzip(zip_file, exdir=work_dir) ZYQ_UDP <- Spectra::backendInitialize(MsBackendRawFileReader::MsBackendRawFileReader(),            files = dir(work_dir,patt=\"raw\",full.names=TRUE)) class(ZYQ_UDP) ZYQ_UDP ZYQ_UDP |> Spectra::spectraVariables() save(ZYQ_UDP,file=\"~/Caprion/analysis/work/ZYQ_UDP.rda\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"usage","dir":"Articles","previous_headings":"11 Spectrum data analysis > 11.2 Spectrum data analysis","what":"Usage","title":"Bioconductor notes","text":"Various facilities shown . MSstats3 takes output data-processing pipelines.","code":"# various files d <- \"/rds/project/rds-zuZwCZMsS0w/Caprion_proteomics/analysis/crux\" f <- file.path(d,\"szwk901104i19801xms1.mzML\") x <- file.path(d,\"szwk901104i19801xms1.mzXML\") g <- file.path(d,\"szwk901104i19801xms1.mgf\") r <- file.path(d,\"szwk901104i19801xms1.rda\") z <- file.path(d,\"szwk901104i19801xms1.mzML.gz\")  # mzML mz <- mzR::openMSfile(f) header_info <- mzR::header(mz) table(header_info$msLevel) peak_data <- mzR::peaks(mz) spec <- mzR::spectra(mz) class(spec) length(spec) lapply(spec,head,3) methods(class=\"mzRpwiz\") mzR::close(mz)  mz <- mzR::openMSfile(z, backend = \"pwiz\") mz nChrom(mz) head(tic(mz)) head(chromatogram(mz, 1L)) ## same as tic(x) str(chromatogram(mz)) head(peaks(mz, scan=4))  # MSnbase mzXML <- MSnbase::readMSData(x) mgf <- MSnbase::readMgfData(g) save(mzXML,mgf,file=r)  MSnbase::extractSpectraData(mzXML) MSnbase::hasSpectra(z) MSnbase::hasChromatograms(z) MSnbase::plot2d(mzXML,z=\"peaks.count\") MSnbase::plotDensity(mzXML,z=\"precursor.mz\")  MSnbase::extractSpectraData(mgf) methods(class=\"MSpectra\") MSnbase::mz(mgf) MSnbase::intensity(mgf) MSnbase::rtime(mgf) MSnbase::precursorMz(mgf) MSnbase::precursorCharge(mgf) MSnbase::precScanNum(mgf) MSnbase::precursorIntensity(mgf) MSnbase::acquisitionNum(mgf) MSnbase::scanIndex(mgf) MSnbase::peaksCount(mgf) MSnbase::msLevel(mgf) MSnbase::tic(mgf) MSnbase::ionCount(mgf) MSnbase::collisionEnergy(mgf) MSnbase::fromFile(mgf) MSnbase::polarity(mgf) MSnbase::smoothed(mgf) MSnbase::centroided(mgf) MSnbase::isCentroided(mgf) MSnbase::writeMgfData(mgf, con = \"spectra.mgf\", COM = NULL, TITLE = NULL) MSnbase::removePeaks(mgf, t, msLevel., ...) MSnbase::filterMsLevel(mgf, msLevel=2) MSnbase::as.ExpressionSet(mgf)  # This turned to be really slow! sp_list <- lapply(seq_along(mgf), function(i) {   intensity_i <- MSnbase::intensity(mgf)[[i]]   mz_i <- MSnbase::mz(mgf)[[i]]   centroided_i <- MSnbase::centroided(mgf)[[i]]   return(new(\"Spectrum1\", intensity = intensity_i, mz = mz_i, centroided = centroided_i)) }) sp1 <- do.call(rbind, sp_list) # only the first one is more manageable sp1 <- new(\"Spectrum1\",intensity=MSnbase::intensity(mgf)[[1]],mz=MSnbase::mz(mgf)[[1]],centroided=MSnbase::centroided(mgf)[[1]]) sp2 <- MSnbase::pickPeaks(sp1) MSnbase::intensity(sp2) plot(MSnbase::mz(sp1),MSnbase::intensity(sp1),type=\"h\") ## Without m/z refinement points(MSnbase::mz(sp2), MSnbase::intensity(sp2), col = \"darkgrey\") ## Using k = 1, closest signals sp3 <- MSnbase::pickPeaks(sp1, refineMz = \"kNeighbors\", k = 1) points(MSnbase::mz(sp3), MSnbase::intensity(sp3), col = \"green\", type = \"h\") ## Using descendPeak requiring at least 50% or the centroid's intensity sp4 <- MSnbase::pickPeaks(sp1, refineMz = \"descendPeak\", signalPercentage = 50) points(MSnbase::mz(sp4), MSnbase::intensity(sp4), col = \"red\", type = \"h\")  # CAMERA xs   <- CAMERA::xcmsSet(f, method=\"centWave\", ppm=30, peakwidth=c(5,10)) an   <- CAMERA::xsAnnotate(xs) an   <- CAMERA::groupFWHM(an) #For one group peaklist <- CAMERA::getpspectra(an, 1) #For two groups peaklist <- CAMERA::getpspectra(an, c(1,2))  # Spectra suppressMessages(library(Spectra)) sp <- Spectra::Spectra(z) head(sp) table(sp$msLevel) d <- Spectra::computeMzDeltas(sp[1:1000]) Spectra::plotMzDelta(d)  # protViz protViz::fragmentIon(\"TFVLNFIK\") esd <- MSnbase::extractSpectraData(mgf) op <- par(mfrow=c(2,1)) ms <- function(i) with(esd[i,],list(title=TITLE,rtinseconds=RTINSECONDS,pepmass=PEPMASS,charge=CHARGE,                                     mZ=MSnbase::mz(mgf[[i]]),intensity=MSnbase::intensity(mgf[[i]]))) protViz::peakplot(\"TAFDEAIAELDTLNEESYK\", ms(1)) protViz::peakplot(\"TAFDEAIAELDTLSEESYK\", ms(2)) par(op) load(\"~/Caprion/pilot/ZWK.rda\") peptides <- subset(mapping_ZWK,Protein==\"PROC_HUMAN\")[[\"Modified.Peptide.Sequence\"]] |> unique() pim <- protViz::parentIonMass(peptides) fi <- protViz::fragmentIon(peptides) df <- as.data.frame(fi) op <- par(mfrow=c(3,1)) for (i in 1:length(peptides)){     plot(0, 0,     xlab='m/Z',     ylab='',     xlim=range(c(fi[[i]]$b,fi[[i]]$y)),     ylim=c(0,1),     type='n',     axes=FALSE,     sub=paste(peptides[i], \"/\", pim[i], \"Da\"));     box()     axis(1, fi[[i]]$b, round(fi[[i]]$b,1), las=2)     axis(1, fi[[i]]$y, round(fi[[i]]$y,1), las=2)      pepSeq<-strsplit(peptides[i], \"\")     axis(3,fi[[i]]$b, paste(\"b\", row.names(fi[[i]]),sep=''),las=2)     axis(3,fi[[i]]$y, paste(\"y\", row.names(fi[[i]]),sep=''),las=2)      text(fi[[i]]$b, rep(0.3, nchar(peptides[i])),     pepSeq[[1]],pos=3,cex=4, lwd=4, col=\"#aaaaaaaa\")      abline(v=fi[[i]]$b, col='red')     abline(v=fi[[i]]$y, col='blue',lwd=2) } par(op)  # MSstats head(SRMRawData) QuantData <- MSstats::dataProcess(SRMRawData, use_log_file = FALSE) quant <- MSstats::dataProcess(SRMRawData,                               normalization = \"equalizeMedians\",                               summaryMethod = \"TMP\",                               censoredInt = \"NA\",                               MBimpute = TRUE,                               maxQuantileforCensored = 0.999,                               logTrans=2,                               use_log_file=FALSE,                               numberOfCores=5) names(quant)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/bioconductor.html","id":"bionconductor-forum","dir":"Articles","previous_headings":"","what":"Bionconductor forum","title":"Bioconductor notes","text":"Web: https://support.bioconductor.org/","code":""},{"path":[]},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/esse.html","id":"expressionset","dir":"Articles","previous_headings":"","what":"ExpressionSet","title":"ExpressionSet/SummarizedExperiment usage","text":"start Bioconductor/Biobase’s ExpressionSet example finish real application.","code":"dataDirectory <- system.file(\"extdata\", package=\"Biobase\") exprsFile <- file.path(dataDirectory, \"exprsData.txt\") exprs <- as.matrix(read.table(exprsFile, header=TRUE, sep=\"\\t\", row.names=1, as.is=TRUE)) pDataFile <- file.path(dataDirectory, \"pData.txt\") pData <- read.table(pDataFile, row.names=1, header=TRUE, sep=\"\\t\") all(rownames(pData)==colnames(exprs)) metadata <- data.frame(labelDescription=c(\"Patient gender\",                                           \"Case/control status\",                                           \"Tumor progress on XYZ scale\"),                        row.names=c(\"gender\", \"type\", \"score\")) phenoData <- Biobase::AnnotatedDataFrame(data=pData, varMetadata=metadata) experimentData <- Biobase::MIAME(name=\"Pierre Fermat\",                                  lab=\"Francis Galton Lab\",                                  contact=\"pfermat@lab.not.exist\",                                  title=\"Smoking-Cancer Experiment\",                                  abstract=\"An example ExpressionSet\",                                  url=\"www.lab.not.exist\",                                  other=list(notes=\"Created from text files\")) exampleSet <- pQTLtools::make_ExpressionSet(exprs,phenoData,experimentData=experimentData,                                             annotation=\"hgu95av2\") data(sample.ExpressionSet, package=\"Biobase\") identical(exampleSet,sample.ExpressionSet)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/esse.html","id":"data-frame","dir":"Articles","previous_headings":"1 ExpressionSet","what":"data.frame","title":"ExpressionSet/SummarizedExperiment usage","text":"great benefit use object directly data.frame.","code":"lm.result <- Biobase::esApply(exampleSet,1,function(x) lm(score~gender+x)) beta.x <- unlist(lapply(lapply(lm.result,coef),\"[\",3)) beta.x[1] #> AFFX-MurIL2_at.x  #>    -0.0001907472 lm(score~gender+AFFX.MurIL2_at,data=exampleSet) #>  #> Call: #> lm(formula = score ~ gender + AFFX.MurIL2_at, data = exampleSet) #>  #> Coefficients: #>    (Intercept)      genderMale  AFFX.MurIL2_at   #>      0.5531725       0.0098932      -0.0001907"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/esse.html","id":"composite-plots","dir":"Articles","previous_headings":"1 ExpressionSet","what":"Composite plots","title":"ExpressionSet/SummarizedExperiment usage","text":"wish examine distribution feature via histogram, scatter boxplot. One resort esApply() simplicity nicer add feature name title. Figure 1.1: Histogram, scatter & boxplots Figure 1.2: Histogram, scatter & boxplots expression set indexed using feature name(s).","code":"invisible(Biobase::esApply(exampleSet[1:2],1,function(x)                            {par(mfrow=c(3,1));boxplot(x);hist(x);plot(x)} )) par(mfrow=c(1,3)) f <- Biobase::featureNames(exampleSet[1:2]) invisible(sapply(f,function(x) {                      d <- t(Biobase::exprs(exampleSet[x]))                      fn <- Biobase::featureNames(exampleSet[x])                      hist(d,main=\"\",xlab=fn); plot(d, ylab=fn); boxplot(d,ylab=fn)                    }           ) )"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/esse.html","id":"outlier-detections","dir":"Articles","previous_headings":"1 ExpressionSet","what":"Outlier detections","title":"ExpressionSet/SummarizedExperiment usage","text":"illustrates one mechanism,","code":"list_outliers <- function(es, method=\"upperquartile\")                  arrayQualityMetrics::outliers(exprs(es),method=method) for (method in c(\"KS\",\"sum\",\"upperquartile\")) {   ZWK_outliers <- list_outliers(protein_ZWK,method=method)   print(ZWK_outliers@statistic[ZWK_outliers@which]) }"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/esse.html","id":"clustering","dir":"Articles","previous_headings":"1 ExpressionSet","what":"Clustering","title":"ExpressionSet/SummarizedExperiment usage","text":"employ model-based clustering absed principal compoents see potential groupings data, Figure 1.3: Three-group Clustering interactive version also available,","code":"pca <- prcomp(na.omit(t(Biobase::exprs(exampleSet))), rank=10, scale=TRUE)   pc1pc2pc3 <- with(pca,x)[,1:3]   mc <- mclust::Mclust(pc1pc2pc3,G=3)   with(mc, {       cols <- c(\"blue\",\"red\", \"purple\")       s3d <- scatterplot3d::scatterplot3d(with(pca,x[,c(2,1,3)]),                                           color=cols[classification],                                           pch=16,                                           type=\"h\",                                           main=\"Plot of the PC1, PC2 and PC3\")       s3d.coords <- s3d$xyz.convert(with(pca,x[,c(2,1,3)]))       text(s3d.coords$x,             s3d.coords$y,               cex = 1.2,            col = cols[classification],            labels = row.names(pc1pc2pc3),            pos = 4)       legend(\"right\", legend=levels(as.factor(classification)), col=cols[classification], pch=16)       rgl::open3d(width = 500, height = 500)       rgl::plot3d(with(pca,x[,c(2,1,3)]),cex=1.2,col=cols[classification],size=5)       rgl::text3d(with(pca,x[,c(2,1,3)]),cex=1.2,col=cols[classification],texts=row.names(pc1pc2pc3))       htmlwidgets::saveWidget(rgl::rglwidget(), file = \"mcpca3d.html\")   }) #> Warning in par3d(userMatrix = structure(c(1, 0, 0, 0, 0, 0.342020143325668, : #> parameter \"width\" cannot be set #> Warning in par3d(userMatrix = structure(c(1, 0, 0, 0, 0, 0.342020143325668, : #> parameter \"height\" cannot be set"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/esse.html","id":"data-transformation","dir":"Articles","previous_headings":"1 ExpressionSet","what":"Data transformation","title":"ExpressionSet/SummarizedExperiment usage","text":"Suppose wish use log2 greater zero set negative values missing.","code":"log2.na <- function(x) log2(ifelse(x>0, x, NA)) Biobase::exprs(exampleSet) <- log2.na(Biobase::exprs(exampleSet))"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/esse.html","id":"limit-of-detection-lod","dir":"Articles","previous_headings":"1 ExpressionSet","what":"Limit of detection (LOD)","title":"ExpressionSet/SummarizedExperiment usage","text":"generate lod.max ~ U[0,1] variable experiment Figure 1.4: LOD based random cutoff quantity shown big impact protein abundance therefore pQTL detection shown real example. Figure 1.5: LOD SCALLOP-INF/INTERVAL Table 1.1: Summary statistics","code":"Biobase::fData(exampleSet) #> data frame with 0 columns and 500 rows Biobase::fData(exampleSet)$lod.max <- apply(Biobase::exprs(exampleSet),1,quantile,runif(nrow(exampleSet))) lod <- pQTLtools::get.prop.below.LLOD(exampleSet) x <- dplyr::arrange(Biobase::fData(lod),desc(pc.belowLOD.new)) knitr::kable(head(lod)) plot(x[,2], main=\"Random quantile cutoff\", ylab=\"<lod%\") rm(list=ls()) dir <- \"~/rds/post_qc_data/interval/phenotype/olink_proteomics/post-qc/\" eset <- readRDS(paste0(dir,\"eset.inf1.flag.out.outlier.in.rds\")) x <- pQTLtools::get.prop.below.LLOD(eset) annot <- Biobase::fData(x) annot$MissDataProp <- as.numeric(gsub(\"\\\\%$\", \"\", annot$MissDataProp)) plot(annot$MissDataProp, annot$pc.belowLOD.new, xlab=\"% <LLOD in Original\",      ylab=\"% <LLOD in post QC dataset\", pch=19) INF <- Sys.getenv(\"INF\") np <- read.table(paste(INF, \"work\", \"INF1.merge.nosig\", sep=\"/\"), header=FALSE,                  col.names = c(\"prot\", \"uniprot\")) kable(np, caption=\"Proteins with no pQTL\") annot$pQTL <- rep(NA, nrow(annot)) no.pQTL.ind <- which(annot$uniprot.id %in% np$uniprot) annot$pQTL[no.pQTL.ind] <- \"red\" annot$pQTL[-no.pQTL.ind] <- \"blue\" annot <- annot[order(annot$pc.belowLOD.new, decreasing = TRUE),] annot <- annot[-grep(\"^BDNF$\", annot$ID),] saveRDS(annot,file=file.path(\"~\",\"pQTLtools\",\"tests\",\"annot.RDS\")) annot <- readRDS(file.path(find.package(\"pQTLtools\"),\"tests\",\"annot.RDS\")) %>%          dplyr::left_join(pQTLdata::inf1[c(\"prot\",\"target.short\",\"alt_name\")],by=c(\"ID\"=\"prot\")) %>%          dplyr::mutate(prot=if_else(is.na(alt_name),target.short,alt_name),order=1:n()) %>%          dplyr::arrange(desc(order)) xtick <- seq(1, nrow(annot)) attach(annot) par(mar=c(10,5,1,1)) plot(100-pc.belowLOD.new,cex=2,pch=19,col=pQTL,xaxt=\"n\",xlab=\"\",ylab=\"\",cex.axis=0.8) text(66,16,\"IL-17C\",offset=0,pos=2,cex=1.5,font=2,srt=0) arrows(67,16,71,16,lwd=2) axis(1, at=xtick, labels=prot, lwd.tick=0.5, lwd=0, las=2, hadj=1, cex.axis=0.8) mtext(\"% samples above LLOD\",side=2,line=2.5,cex=1.2) mtext(\"Ordered protein\",side=1,line=6.5,cex=1.2,font=1) legend(x=1,y=25,c(\"without pQTL\",\"with pQTL\"),box.lwd=0,cex=2,col=c(\"red\",\"blue\"),pch=19) detach(annot) options(width=120) knitr::kable(annot,caption=\"Summary statistics\",row.names=FALSE)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/esse.html","id":"maendtoend","dir":"Articles","previous_headings":"1 ExpressionSet","what":"maEndtoEnd","title":"ExpressionSet/SummarizedExperiment usage","text":"Web: https://bioconductor.org/packages/release/workflows/html/maEndToEnd.html. Examples can found PCA, heatmap, normalisation, linear models, enrichment analysis Bioconductor package.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/esse.html","id":"summarizedexperiment","dir":"Articles","previous_headings":"","what":"SummarizedExperiment","title":"ExpressionSet/SummarizedExperiment usage","text":"modern construct. Based documentation example, ranged summarized experiment (rse) imputation shown .","code":"set.seed(123) nrows <- 20 ncols <- 4 counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows) missing_indices <- sample(length(counts), size = 5, replace = FALSE) counts[missing_indices] <- NA rowRanges <- GenomicRanges::GRanges(rep(c(\"chr1\", \"chr2\"), c(1, 3) * nrows / 4),                             IRanges::IRanges(floor(runif(nrows, 1e5, 1e6)), width=ncols),                             strand=sample(c(\"+\", \"-\"), nrows, TRUE),                             feature_id=sprintf(\"ID%03d\", 1:nrows)) colData <- S4Vectors::DataFrame(Treatment=rep(c(\"ChIP\", \"Input\"), ncols/2),                                 row.names=LETTERS[1:ncols]) rse <- SummarizedExperiment::SummarizedExperiment(assays=S4Vectors::SimpleList(counts=counts),                                                   rowRanges=rowRanges, colData=colData) SummarizedExperiment::assay(rse) #>               A         B         C           D #>  [1,] 2876.4876 8895.5036 1428.8574 6651.486831 #>  [2,] 7883.2630 6928.3413 4146.0488  949.311769 #>  [3,] 4090.3602 6405.4276 4137.8295 3840.312408 #>  [4,] 8830.2910 9942.7035 3689.0857 2744.562062 #>  [5,] 9404.7324 6557.4023 1525.2950 8146.585749 #>  [6,]        NA 7085.5962 1388.9218 4485.714898 #>  [7,] 5281.5268 5441.1162 2331.1080 8100.833466 #>  [8,] 8924.2980 5941.8261 4660.1585 8124.082706 #>  [9,] 5514.7987 2892.3082 2660.4604 7943.628869 #> [10,] 4566.6907 1471.9894        NA 4398.877044 #> [11,] 9568.3766        NA  459.2658 7544.997111 #> [12,] 4533.8882 9023.0882 4422.5585          NA #> [13,] 6776.0288 6907.3621 7989.4495 7102.113831 #> [14,] 5726.7614 7954.8787 1219.8707    7.247108 #> [15,] 1030.1439  247.1122 5609.9189 4753.690424 #> [16,] 8998.3499 4778.4819 2066.1074 2201.968733 #> [17,] 2461.6313 7584.8369 1276.1890 3798.785561 #> [18,]  421.5533 2164.8630 7533.3253 6128.097262 #> [19,] 3279.8793        NA 8950.5585 3518.627295 #> [20,] 9545.0820 2317.0262 3745.2533 1112.243108 imputed <- MsCoreUtils::impute_knn(as.matrix(SummarizedExperiment::assay(rse)),2) imputed_counts <- MsCoreUtils::impute_RF(as.matrix(SummarizedExperiment::assay(rse)),2) imputed-imputed_counts #>              A         B        C        D #>  [1,]    0.000    0.0000    0.000    0.000 #>  [2,]    0.000    0.0000    0.000    0.000 #>  [3,]    0.000    0.0000    0.000    0.000 #>  [4,]    0.000    0.0000    0.000    0.000 #>  [5,]    0.000    0.0000    0.000    0.000 #>  [6,] 2559.339    0.0000    0.000    0.000 #>  [7,]    0.000    0.0000    0.000    0.000 #>  [8,]    0.000    0.0000    0.000    0.000 #>  [9,]    0.000    0.0000    0.000    0.000 #> [10,]    0.000    0.0000 1791.909    0.000 #> [11,]    0.000 -709.2786    0.000    0.000 #> [12,]    0.000    0.0000    0.000 2467.614 #> [13,]    0.000    0.0000    0.000    0.000 #> [14,]    0.000    0.0000    0.000    0.000 #> [15,]    0.000    0.0000    0.000    0.000 #> [16,]    0.000    0.0000    0.000    0.000 #> [17,]    0.000    0.0000    0.000    0.000 #> [18,]    0.000    0.0000    0.000    0.000 #> [19,]    0.000 1298.3456    0.000    0.000 #> [20,]    0.000    0.0000    0.000    0.000 SummarizedExperiment::assays(rse) <- S4Vectors::SimpleList(counts=imputed_counts) SummarizedExperiment::assay(rse) #>               A         B         C           D #>  [1,] 2876.4876 8895.5036 1428.8574 6651.486831 #>  [2,] 7883.2630 6928.3413 4146.0488  949.311769 #>  [3,] 4090.3602 6405.4276 4137.8295 3840.312408 #>  [4,] 8830.2910 9942.7035 3689.0857 2744.562062 #>  [5,] 9404.7324 6557.4023 1525.2950 8146.585749 #>  [6,] 4439.2947 7085.5962 1388.9218 4485.714898 #>  [7,] 5281.5268 5441.1162 2331.1080 8100.833466 #>  [8,] 8924.2980 5941.8261 4660.1585 8124.082706 #>  [9,] 5514.7987 2892.3082 2660.4604 7943.628869 #> [10,] 4566.6907 1471.9894 4812.3872 4398.877044 #> [11,] 9568.3766 5545.7565  459.2658 7544.997111 #> [12,] 4533.8882 9023.0882 4422.5585 4611.837102 #> [13,] 6776.0288 6907.3621 7989.4495 7102.113831 #> [14,] 5726.7614 7954.8787 1219.8707    7.247108 #> [15,] 1030.1439  247.1122 5609.9189 4753.690424 #> [16,] 8998.3499 4778.4819 2066.1074 2201.968733 #> [17,] 2461.6313 7584.8369 1276.1890 3798.785561 #> [18,]  421.5533 2164.8630 7533.3253 6128.097262 #> [19,] 3279.8793 4566.2289 8950.5585 3518.627295 #> [20,] 9545.0820 2317.0262 3745.2533 1112.243108 SummarizedExperiment::assays(rse) <- S4Vectors::endoapply(SummarizedExperiment::assays(rse), asinh) SummarizedExperiment::assay(rse) #>              A        B        C        D #>  [1,] 8.657472 9.786448 7.957778 9.495743 #>  [2,] 9.665644 9.536523 9.023058 7.548885 #>  [3,] 9.009536 9.458048 9.021074 8.946456 #>  [4,] 9.779090 9.897741 8.906281 8.610524 #>  [5,] 9.842115 9.481497 8.023090 9.698501 #>  [6,] 9.091398 9.558966 7.929430 9.101800 #>  [7,] 9.265118 9.294887 8.447246 9.692869 #>  [8,] 9.789680 9.382919 9.139952 9.695735 #>  [9,] 9.308338 8.662957 8.579402 9.673273 #> [10,] 9.119691 7.987517 9.172096 9.082252 #> [11,] 9.859366 9.313936 6.822778 9.621787 #> [12,] 9.112482 9.800689 9.087621 9.129529 #> [13,] 9.514294 9.533490 9.679024 9.561295 #> [14,] 9.346053 9.674688 7.799647 2.678476 #> [15,] 7.630601 6.202994 9.325439 9.159824 #> [16,] 9.797944 9.165025 8.326569 8.390254 #> [17,] 8.501727 9.627054 7.844781 8.935584 #> [18,] 6.737095 8.373260 9.620239 9.413787 #> [19,] 8.788709 9.119590 9.792618 8.858973 #> [20,] 9.856929 8.441187 8.921392 7.707281  SummarizedExperiment::rowRanges(rse) #> GRanges object with 20 ranges and 1 metadata column: #>        seqnames        ranges strand |  feature_id #>           <Rle>     <IRanges>  <Rle> | <character> #>    [1]     chr1 409164-409167      - |       ID001 #>    [2]     chr1 691082-691085      + |       ID002 #>    [3]     chr1 388335-388338      + |       ID003 #>    [4]     chr1 268922-268925      - |       ID004 #>    [5]     chr1 804064-804067      - |       ID005 #>    ...      ...           ...    ... .         ... #>   [16]     chr2 647861-647864      + |       ID016 #>   [17]     chr2 469620-469623      + |       ID017 #>   [18]     chr2 232385-232388      + |       ID018 #>   [19]     chr2 941769-941772      - |       ID019 #>   [20]     chr2 371106-371109      + |       ID020 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths SummarizedExperiment::rowData(rse) #> DataFrame with 20 rows and 1 column #>      feature_id #>     <character> #> 1         ID001 #> 2         ID002 #> 3         ID003 #> 4         ID004 #> 5         ID005 #> ...         ... #> 16        ID016 #> 17        ID017 #> 18        ID018 #> 19        ID019 #> 20        ID020 SummarizedExperiment::colData(rse) #> DataFrame with 4 rows and 1 column #>     Treatment #>   <character> #> A        ChIP #> B       Input #> C        ChIP #> D       Input"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"forest-plots","dir":"Articles","previous_headings":"","what":"Forest plots","title":"An Overview of pQTLtools","text":"start results osteoprotegerin (OPG)2, Figure 1.1: Forest plots Figure 1.2: Forest plots Figure 1.3: Forest plots Figure 1.4: Forest plots involving cis trans pQTLs. meta inherently includes random effects, use fixed effects (FE) model metafor.","code":"data(OPG,package=\"gap.datasets\") meta::settings.meta(method.tau=\"DL\") gap::METAL_forestplot(OPGtbl,OPGall,OPGrsid,width=6.75,height=5,digits.TE=2,digits.se=2,                  col.diamond=\"black\",col.inside=\"black\",col.square=\"black\") #> Joining with `by = join_by(MarkerName)` #> Joining with `by = join_by(MarkerName)` gap::METAL_forestplot(OPGtbl,OPGall,OPGrsid,package=\"metafor\",method=\"FE\",xlab=\"Effect\",                  showweights=TRUE) #> Joining with `by = join_by(MarkerName)` #> Joining with `by = join_by(MarkerName)`"},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"pqtl-signals-and-classification-table","dir":"Articles","previous_headings":"2 cis/trans classification","what":"pQTL signals and classification table","title":"An Overview of pQTLtools","text":"Table 2.1: cis/trans classification","code":"f <- file.path(find.package(\"pQTLtools\"),\"tests\",\"INF1.merge\") merged <- read.delim(f,as.is=TRUE) hits <- merge(merged[c(\"CHR\",\"POS\",\"MarkerName\",\"prot\",\"log10p\")],               pQTLdata::inf1[c(\"prot\",\"uniprot\")],by=\"prot\") %>%         dplyr::mutate(log10p=-log10p) names(hits) <- c(\"prot\",\"Chr\",\"bp\",\"SNP\",\"log10p\",\"uniprot\") cistrans <- gap::cis.vs.trans.classification(hits,pQTLdata::inf1,\"uniprot\") cis.vs.trans <- with(cistrans,data) knitr::kable(with(cistrans,table),caption=\"cis/trans classification\") with(cistrans,total) #> [1] 180 T <- with(cistrans,table) H <- T[rownames(T)!=\"total\",\"total\"] merge <- merged[c(\"Chrom\",\"Start\",\"End\",\"prot\",\"MarkerName\")] merge_cvt <- merge(merge,cis.vs.trans,by.x=c(\"prot\",\"MarkerName\"),by.y=c(\"prot\",\"SNP\")) ord <- with(merge_cvt,order(Chr,bp)) merge_cvt <- merge_cvt[ord,]"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"genomic-associations","dir":"Articles","previous_headings":"2 cis/trans classification","what":"Genomic associations","title":"An Overview of pQTLtools","text":"visualised via circos plot, highlighting likely causal genes pQTLs, Figure 2.1: Genomic associations red blue colours indicate cis/trans classifications.","code":"pQTLs <- transmute(merge_cvt,chr=paste0(\"chr\",Chr),start=bp,end=bp,log10p) cis.pQTLs <- subset(merge_cvt,cis) %>%              dplyr::transmute(chr=paste0(\"chr\",p.chr),start=p.start,end=p.end,gene=p.gene,cols=\"red\") pQTL_genes <- read.table(file.path(find.package(\"pQTLtools\"),\"tests\",\"pQTL_genes.txt\"),                          col.names=c(\"chr\",\"start\",\"end\",\"gene\")) %>%               dplyr::mutate(chr=gsub(\"hs\",\"chr\",chr)) %>%               dplyr::left_join(cis.pQTLs) %>%               dplyr::mutate(cols=ifelse(is.na(cols),\"blue\",cols)) #> Joining with `by = join_by(chr, start, end, gene)` par(cex=0.7) gap::circos.mhtplot2(pQTLs,pQTL_genes,ticks=0:3*10) #> Warning: Some of the regions have end position values larger than the end of the #> chromosomes. #> Note: 7 points are out of plotting region in sector 'chr1', track '5'. #> Note: 3 points are out of plotting region in sector 'chr2', track '5'. #> Note: 10 points are out of plotting region in sector 'chr3', track '5'. #> Note: 7 points are out of plotting region in sector 'chr4', track '5'. #> Note: 2 points are out of plotting region in sector 'chr5', track '5'. #> Note: 4 points are out of plotting region in sector 'chr6', track '5'. #> Note: 2 points are out of plotting region in sector 'chr8', track '5'. #> Note: 2 points are out of plotting region in sector 'chr9', track '5'. #> Note: 2 points are out of plotting region in sector 'chr10', track '5'. #> Note: 4 points are out of plotting region in sector 'chr11', track '5'. #> Note: 1 point is out of plotting region in sector 'chr12', track '5'. #> Note: 1 point is out of plotting region in sector 'chr13', track '5'. #> Note: 1 point is out of plotting region in sector 'chr14', track '5'. #> Note: 2 points are out of plotting region in sector 'chr16', track '5'. #> Note: 8 points are out of plotting region in sector 'chr17', track '5'. #> Note: 8 points are out of plotting region in sector 'chr19', track '5'. #> Note: 4 points are out of plotting region in sector 'chr20', track '5'. #> Note: 1 point is out of plotting region in sector 'chr21', track '5'. par(cex=1)"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"bar-chart-and-circos-plot","dir":"Articles","previous_headings":"2 cis/trans classification","what":"Bar chart and circos plot","title":"An Overview of pQTLtools","text":"Figure 2.2: Bar chart Figure 2.3: circos plot circos plot based target genes (encoding proteins) somewhat busy.","code":"barplot(table(H),xlab=\"No. of pQTL regions\",ylab=\"No. of proteins\",         ylim=c(0,25),col=\"darkgrey\",border=\"black\",cex=0.8,cex.axis=2,cex.names=2,las=1) gap::circos.cis.vs.trans.plot(hits=f,pQTLdata::inf1,\"uniprot\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"sh2b3","dir":"Articles","previous_headings":"2 cis/trans classification","what":"SH2B3","title":"An Overview of pQTLtools","text":"focus SH2B3. Figure 2.4: SH2B3 hotspot recent implementation qtlClassifier function. example ,","code":"HOTSPOT <- \"chr12:111884608_C_T\"   a <- data.frame(chr=\"chr12\",start=111884607,end=111884608,gene=\"SH2B3\")   b <- dplyr::filter(cis.vs.trans,SNP==HOTSPOT) %>%        dplyr::mutate(p.chr=paste0(\"chr\",p.chr)) %>%        dplyr::rename(chr=p.chr,start=p.start,end=p.end,gene=p.gene,cistrans=cis.trans)   cols <- rep(12,nrow(b))   cols[b[[\"cis\"]]] <- 10   labels <- dplyr::bind_rows(b[c(\"chr\",\"start\",\"end\",\"gene\")],a)   circlize::circos.clear()   circlize::circos.par(start.degree=90, track.height=0.1, cell.padding=c(0,0,0,0))   circlize::circos.initializeWithIdeogram(species=\"hg19\", track.height=0.05, ideogram.height=0.06)   circlize::circos.genomicLabels(labels, labels.column=4, cex=1.1, font=3, side=\"inside\")   circlize::circos.genomicLink(bind_rows(a,a,a,a,a,a), b[c(\"chr\",\"start\",\"end\")], col=cols,                      directional=1, border=10, lwd=2) geneSNP <- merge(merged[c(\"prot\",\"MarkerName\")],pQTLdata::inf1[c(\"prot\",\"gene\")],by=\"prot\")[c(\"gene\",\"MarkerName\",\"prot\")] SNPPos <- merged[c(\"MarkerName\",\"CHR\",\"POS\")] genePos <- pQTLdata::inf1[c(\"gene\",\"chr\",\"start\",\"end\")] cvt <- gap::qtlClassifier(geneSNP,SNPPos,genePos,1e6) knitr::kable(head(cvt)) cistrans.check <- merge(cvt[c(\"gene\",\"MarkerName\",\"Type\")],cis.vs.trans[c(\"p.gene\",\"SNP\",\"cis.trans\")],                         by.x=c(\"gene\",\"MarkerName\"),by.y=c(\"p.gene\",\"SNP\")) with(cistrans.check,table(Type,cis.trans)) #>        cis.trans #> Type    cis trans #>   cis    59     0 #>   trans   0   121"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"pqtl-gene-plot","dir":"Articles","previous_headings":"2 cis/trans classification","what":"pQTL-gene plot","title":"An Overview of pQTLtools","text":"Figure 2.5: pQTL-gene plot","code":"t2d <- gap::qtl2dplot(cis.vs.trans,xlab=\"pQTL position\",ylab=\"Gene position\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"pqtl-gene-plotly","dir":"Articles","previous_headings":"2 cis/trans classification","what":"pQTL-gene plotly","title":"An Overview of pQTLtools","text":"pQTL-gene plot can also viewed 2-d plotly style, fig2d.html, 3-d counterpart, fig3d.html, plots responsive.","code":"fig2d <- gap::qtl2dplotly(cis.vs.trans,xlab=\"pQTL position\",ylab=\"Gene position\") htmlwidgets::saveWidget(fig2d,file=\"fig2d.html\") htmltools::tags$iframe(src = \"fig2d.html\", width = \"100%\", height = \"650px\") fig3d <- gap::qtl3dplotly(cis.vs.trans,zmax=300,qtl.prefix=\"pQTL:\",xlab=\"pQTL position\",ylab=\"Gene position\") htmlwidgets::saveWidget(fig3d,file=\"fig3d.html\") htmltools::tags$iframe(src = \"fig3d.html\", width = \"100%\", height = \"600px\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"karyoplot","dir":"Articles","previous_headings":"2 cis/trans classification","what":"Karyoplot","title":"An Overview of pQTLtools","text":"biomaRt always , keep copy hgnc. now proceed Figure 2.6: Karyoplot cis/trans pQTLs","code":"set_config(config(ssl_verifypeer = 0L)) mart <- biomaRt::useMart(biomart = \"ensembl\", dataset = \"hsapiens_gene_ensembl\") attrs <- c(\"hgnc_symbol\", \"chromosome_name\", \"start_position\", \"end_position\", \"band\") hgnc <- vector(\"character\",180) for(i in 1:180) {   v <- with(merge_cvt[i,],paste0(Chr,\":\",bp,\":\",bp))   g <- subset(getBM(attributes = attrs, filters=\"chromosomal_region\", values=v, mart=mart),!is.na(hgnc_symbol))   hgnc[i] <- paste(g[[\"hgnc_symbol\"]],collapse=\";\")   cat(i,g[[\"hgnc_symbol\"]],hgnc[i],\"\\n\") } save(hgnc,file=\"hgnc.rda\",compress=\"xz\") load(file.path(find.package(\"pQTLtools\"),\"tests\",\"hgnc.rda\")) merge_cvt <- within(merge_cvt,{   hgnc <- hgnc   hgnc[cis] <- p.gene[cis] })  with(merge_cvt, {   sentinels <- regioneR::toGRanges(Chr,bp-1,bp,labels=hgnc)   cis.regions <- regioneR::toGRanges(Chr,cis.start,cis.end)   loci <- toGRanges(Chr,Start,End)   colors <- c(\"red\",\"blue\")   GenomeInfoDb::seqlevelsStyle(sentinels) <- \"UCSC\"   kp <- karyoploteR::plotKaryotype(genome=\"hg19\",chromosomes=levels(seqnames(sentinels)))   karyoploteR::kpAddBaseNumbers(kp)   karyoploteR::kpPlotRegions(kp, data=loci,r0=0.05,r1=0.15,border=\"black\")   karyoploteR::kpPlotMarkers(kp, data=sentinels, labels=hgnc, text.orientation=\"vertical\",                 cex=0.5, y=0.3*seq_along(hgnc)/length(hgnc), srt=30,                 ignore.chromosome.ends=TRUE,                 adjust.label.position=TRUE, label.color=colors[2-cis], label.dist=0.002,                 cex.axis=3, cex.lab=3)   legend(\"bottomright\", bty=\"n\", pch=c(19,19), col=colors, pt.cex=0.4,          legend=c(\"cis\", \"trans\"), text.col=colors, cex=0.8, horiz=FALSE) # panel <- toGRanges(p.chr,p.start,p.end,labels=p.gene) # kpPlotLinks(kp, data=loci, data2=panel, col=colors[2-cis]) }) #> Chromosome name styles in data (\"1\") and genome (\"chr1\") do not match. #> They must match exactly for karyoploteR to plot anything. It seems it may be a problem with 'chr' in the names?"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"genomic-regions-enrichment-analysis","dir":"Articles","previous_headings":"","what":"Genomic regions enrichment analysis","title":"An Overview of pQTLtools","text":"now considerably easier Genomic Regions Enrichment Annotations Tool (GREAT). Figure 3.1: GREAT plots Figure 3.2: GREAT plots top terms Binomial p=1e-5 extracted follows, Table 3.1: GREAT IL12B-KITLG-TNFSF10 results","code":"post <- function(regions) {   job <- rGREAT::submitGreatJob(get(regions), species=\"hg19\", version=\"3.0.0\")   et <- rGREAT::getEnrichmentTables(job,download_by = 'tsv')   tb <- do.call('rbind',et)   write.table(tb,file=paste0(regions,\".tsv\"),quote=FALSE,row.names=FALSE,sep=\"\\t\")   invisible(list(job=job,tb=tb)) }  M <- 1e+6 merge <- merged %>%          dplyr::mutate(chr=Chrom, start=POS-M, end=POS+M) %>%          dplyr::mutate(start=if_else(start<1,1,start)) %>%          dplyr::select(prot,MarkerName,chr,start,end) cistrans <- dplyr::select(merge, chr,start,end) %>%             dplyr::arrange(chr,start,end) %>%             dplyr::distinct() # All regions cistrans.post <- post(\"cistrans\") job <- with(cistrans.post,job) rGREAT::plotRegionGeneAssociationGraphs(job) rGREAT::availableOntologies(job) # plot of the top term par(mfcol=c(3,1)) rGREAT::plotRegionGeneAssociationGraphs(job, ontology=\"GO Molecular Function\") rGREAT::plotRegionGeneAssociationGraphs(job, ontology=\"GO Biological Process\") rGREAT::plotRegionGeneAssociationGraphs(job, ontology=\"GO Cellular Component\") # Specific regions IL12B <- dplyr::filter(merge,prot==\"IL.12B\") %>% dplyr::select(chr,start,end) KITLG <- dplyr::filter(merge,prot==\"SCF\") %>% dplyr::select(chr,start,end) TNFSF10 <- dplyr::filter(merge,prot==\"TRAIL\") %>% dplyr::select(chr,start,end) tb_all <- data.frame() for (r in c(\"IL12B\",\"KITLG\",\"TNFSF10\")) {   r.post <- post(r)   tb_all <- rbind(tb_all,data.frame(gene=r,with(r.post,tb))) } #> Don't make too frequent requests. The time break is 60s. #> Please wait for 55s for the next request. #> The time break can be set by `request_interval` argument. #> Don't make too frequent requests. The time break is 60s. #> Please wait for 57s for the next request. #> The time break can be set by `request_interval` argument. #>  #> Don't make too frequent requests. The time break is 60s. #> Please wait for 57s for the next request. #> The time break can be set by `request_interval` argument."},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"eqtl-catalog-for-colocalization-analysis","dir":"Articles","previous_headings":"","what":"eQTL Catalog for colocalization analysis","title":"An Overview of pQTLtools","text":"See example associated import_eQTLCatalogue(). related function import_OpenGWAS() used fetch data OpenGWAS. cis-pQTLs 1e+6 flanking regions considered data actually fetched files stored locally. first sentinel used (r=1). results also loadable follows. Table 4.1: Colocalization results OPG-chr8:120081031_C_T function sumstats() obtained meta-analysis summary statistics (build 37 therefore lifted build 38) used colocalization analysis. output saved .RDS files. Note ftp_path changes eQTL Catalog local files.","code":"liftRegion <- function(x,chain,flanking=1e6) {   require(GenomicRanges)   gr <- with(x,GenomicRanges::GRanges(seqnames=chr,IRanges::IRanges(start,end))+flanking)   GenomeInfoDb::seqlevelsStyle(gr) <- \"UCSC\"   gr38 <- rtracklayer::liftOver(gr, chain)   chr <- gsub(\"chr\",\"\",colnames(table(seqnames(gr38))))   start <- min(unlist(start(gr38)))   end <- max(unlist(end(gr38)))   invisible(list(chr=chr[1],start=start,end=end,region=paste0(chr[1],\":\",start,\"-\",end))) }  sumstats <- function(prot,chr,region37) {   cat(\"GWAS sumstats\\n\")   vcf <- file.path(INF,\"METAL/gwas2vcf\",paste0(prot,\".vcf.gz\"))   gwas_stats <- gwasvcf::query_gwas(vcf, chrompos = region37) %>%                 gwasvcf::vcf_to_granges() %>%                 GenomeInfoDb::keepSeqlevels(chr) %>%                 GenomeInfoDb::renameSeqlevels(paste0(\"chr\",chr))   gwas_stats_hg38 <- rtracklayer::liftOver(gwas_stats, chain) %>%     unlist() %>%     dplyr::as_tibble() %>%     dplyr::transmute(chromosome = seqnames,                      position = start, REF, ALT, AF, ES, SE, LP, SS) %>%     dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%     dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%     dplyr::group_by(id) %>%     dplyr::mutate(row_count = n()) %>%     dplyr::ungroup() %>%     dplyr::filter(row_count == 1) %>%     dplyr::mutate(chromosome=gsub(\"chr\",\"\",chromosome))   s <- ggplot2::ggplot(gwas_stats_hg38, aes(x = position, y = LP)) +        ggplot2::theme_bw() +        ggplot2::geom_point() +        ggplot2::ggtitle(with(sentinel,paste0(prot,\"-\",SNP,\" association plot\")))   s   gwas_stats_hg38 }  gtex <- function(gwas_stats_hg38,ensGene,region38) {   cat(\"c. GTEx_v8 imported eQTL datasets\\n\")   fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths_gtex.tsv\")   web <- read.delim(fp, stringsAsFactors = FALSE) %>% dplyr::as_tibble()   local <- within(web %>% dplyr::as_tibble(),         {           f <- lapply(strsplit(ftp_path,\"/imported/|/ge/\"),\"[\",3);           ftp_path <- paste0(\"~/rds/public_databases/GTEx/csv/\",f)         })   gtex_df <- dplyr::filter(local, quant_method == \"ge\") %>%              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\"))   ftp_path_list <- setNames(as.list(gtex_df$ftp_path), gtex_df$qtl_id)   hdr <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\")   column_names <- names(read.delim(hdr))   safe_import <- purrr::safely(import_eQTLCatalogue)   summary_list <- purrr::map(ftp_path_list,                              ~safe_import(., region38, selected_gene_id = ensGene, column_names))   result_list <- purrr::map(summary_list, ~.$result)   result_list <- result_list[!unlist(purrr::map(result_list, is.null))]   result_filtered <- purrr::map(result_list[lapply(result_list,nrow)!=0],                                 ~dplyr::filter(., !is.na(se)))   purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38), .id = \"qtl_id\") }  gtex_coloc <- function(prot,chr,ensGene,chain,region37,region38,out) {   gwas_stats_hg38 <- sumstats(prot,chr,region37)   df_gtex <- gtex(gwas_stats_hg38,ensGene,region38)   if (!exists(\"df_gtex\")) return   saveRDS(df_gtex,file=paste0(out,\".RDS\"))   dplyr::arrange(df_gtex, -PP.H4.abf)   p <- ggplot2::ggplot(df_gtex, aes(x = PP.H4.abf)) +        ggplot2::theme_bw() +        geom_histogram() +        ggtitle(with(sentinel,paste0(prot,\"-\",SNP,\" PP4 histogram\"))) +        xlab(\"PP4\") + ylab(\"Frequency\")   p }  single_run <- function() {   chr <- with(sentinel,Chr)   ss <- subset(inf1,prot==sentinel[[\"prot\"]])   ensRegion37 <- with(ss,                       {                         start <- start-M                         if (start<0) start <- 0                         end <- end+M                         paste0(chr,\":\",start,\"-\",end)                       })   ensGene <- ss[[\"ensembl_gene_id\"]]   ensRegion38 <- with(liftRegion(ss,chain),region)   cat(chr,ensGene,ensRegion37,ensRegion38,\"\\n\")   f <- with(sentinel,paste0(prot,\"-\",SNP))   gtex_coloc(sentinel[[\"prot\"]],chr,ensGene,chain,ensRegion37,ensRegion38,f) }  HOME <- Sys.getenv(\"HOME\") HPC_WORK <- Sys.getenv(\"HPC_WORK\") INF <- Sys.getenv(\"INF\") M <- 1e6 sentinels <- subset(cis.vs.trans,cis) f <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\") chain <- rtracklayer::import.chain(f) gwasvcf::set_bcftools(file.path(HPC_WORK,\"bin\",\"bcftools\"))  r <- 1 sentinel <- sentinels[r,] single_run() ktitle <- with(sentinel,paste0(\"Colocalization results for \",prot,\"-\",SNP)) coloc_df <- readRDS(file.path(find.package(\"pQTLtools\"),\"tests\",\"OPG-rs2247769.RDS\")) %>%             dplyr::rename(Tissue=qtl_id, H0=PP.H0.abf,H1=PP.H1.abf,                           H2=PP.H2.abf,H3=PP.H3.abf,H4=PP.H4.abf) %>%             mutate(Tissue=gsub(\"GTEx_V8_\",\"\",Tissue),                    H0=round(H0,2),H1=round(H1,2),H2=round(H2,2),H3=round(H3,2),H4=round(H4,2)) %>%                    dplyr::arrange(-H4) knitr::kable(coloc_df,caption=\"Colocalization results for OPG-chr8:120081031_C_T\")"},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"pqtl-based-mr","dir":"Articles","previous_headings":"5 Mendelian Randomisation (MR)","what":"pQTL-based MR","title":"An Overview of pQTLtools","text":"function pqtlMR() attractive feature multiple pQTLs can used together conducting MR list outcomes MR-Base, e.g., outcome <- extract_outcome_data(snps=(exposure,SNP),outcomes=c(\"ieu--7\",\"ebi--GCST007432\")). generic applications, run_TwoSampleMR() function can used. Table 5.1: IL6R variant diseases (instruments) Table 5.1: IL6R variant diseases (result) Table 5.1: IL6R variant diseases (single) carry producing forest plot. Figure 5.1: pQTL-MR","code":"f <- file.path(system.file(package=\"pQTLtools\"),\"tests\",\"Ins.csv\") exposure <- TwoSampleMR::format_data(read.csv(f)) caption4 <- \"IL6R variant and diseases\" knitr::kable(exposure, caption=paste(caption4,\"(instruments)\"),digits=3) f <- file.path(system.file(package=\"pQTLtools\"),\"tests\",\"Out.csv\") outcome <- TwoSampleMR::format_data(read.csv(f),type=\"outcome\") pqtlMR(exposure, outcome, prefix=\"IL6R-\") #> Harmonising IL.6 (68ekAE) and Atopic dermatitis (oJAAxF) #> Harmonising IL.6 (68ekAE) and Rheumatoid arthritis (y59FBK) #> Harmonising IL.6 (68ekAE) and Coronary artery disease (ZoHewj) #> Analysing '68ekAE' on 'oJAAxF' #> Analysing '68ekAE' on 'y59FBK' #> Analysing '68ekAE' on 'ZoHewj' result <- read.delim(\"IL6R-result.txt\") %>%           dplyr::select(-id.exposure,-id.outcome) knitr::kable(result,caption=paste(caption4, \"(result)\"),digits=3) single <- read.delim(\"IL6R-single.txt\") %>%           dplyr::select(-id.exposure,-id.outcome,-samplesize) knitr::kable(subset(single,!grepl(\"All\",SNP)), caption=paste(caption4, \"(single)\"),digits=3) IL6R <- single %>%         dplyr::filter(grepl(\"^rs222\",SNP)) %>%         dplyr::select(outcome,b,se) %>%         setNames(c(\"outcome\",\"Effect\",\"StdErr\")) %>%         dplyr::mutate(outcome=gsub(\"\\\\b(^[a-z])\",\"\\\\U\\\\1\",outcome,perl=TRUE),                Effect=as.numeric(Effect),StdErr=as.numeric(StdErr)) gap::mr_forestplot(IL6R,colgap.forest.left=\"0.05cm\", fontsize=14,                    leftcols=c(\"studlab\"), leftlabs=c(\"Outcome\"),                    plotwidth=\"3.5inch\", sm=\"OR\",                    rightcols=c(\"effect\",\"ci\",\"pval\"), rightlabs=c(\"OR\",\"95%CI\",\"P\"),                    digits=2, digits.pval=2, scientific.pval=TRUE,                    common=FALSE, random=FALSE, print.I2=FALSE, print.pval.Q=FALSE, print.tau2=FALSE,                    addrow=TRUE, backtransf=TRUE, at=c(1:3)*0.5, spacing=1.5, xlim=c(0.5,1.5)) invisible(sapply(c(\"harmonise\",\"result\",\"single\"),                  function(x) unlink(paste0(\"IL6R-\",x,\".txt\"))))"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"two-sample-mr","dir":"Articles","previous_headings":"5 Mendelian Randomisation (MR)","what":"Two-sample MR","title":"An Overview of pQTLtools","text":"documentation example quoted , Figure 5.2: Two-sample MR Figure 5.3: Two-sample MR Figure 5.4: Two-sample MR Figure 5.5: Two-sample MR avoid issue TwoSampleMR authentication token, use 1.25% variants instead clump_data illustrative purpose. replace extract_outcome_data (outcome <- TwoSampleMR::extract_outcome_data(snps=clump$SNP,outcomes=\"ebi--GCST007432\")). output contained individual .txt files, together scatter, forest, funnel leave-one-plots. Table 5.2: MMP.10 variants FEV1 (result) Table 5.2: MMP.10 variants FEV1 (heterogeneity) Table 5.2: MMP.10 variants FEV1 (pleiotropy) Table 5.2: MMP.10 variants FEV1 (single) Table 5.2: MMP.10 variants FEV1 (loo)","code":"prot <- \"MMP.10\" type <- \"cis\" f <- paste0(prot,\"-\",type,\".mrx\") d <- read.table(file.path(system.file(package=\"pQTLtools\"),\"tests\",f),                 header=TRUE) exposure <- TwoSampleMR::format_data(within(d,{P=10^logP}), phenotype_col=\"prot\", snp_col=\"rsid\",                         chr_col=\"Chromosome\", pos_col=\"Posistion\",                         effect_allele_col=\"Allele1\", other_allele_col=\"Allele2\",                         eaf_col=\"Freq1\", beta_col=\"Effect\", se_col=\"StdErr\",                         pval_col=\"P\", log_pval=FALSE,                         samplesize_col=\"N\") clump <- exposure[sample(1:nrow(exposure),nrow(exposure)/80),] # TwoSampleMR::clump_data(exposure) outcome <- pQTLtools::import_OpenGWAS(\"ebi-a-GCST007432\",\"11:102090035-103364929\",\"gwasvcf\") %>%            as.data.frame() %>%            dplyr::mutate(outcome=\"FEV1\",LP=10^-LP) %>%            dplyr::select(ID,outcome,REF,ALT,AF,ES,SE,LP,SS,id) %>%            setNames(c(\"SNP\",\"outcome\",paste0(c(\"other_allele\",\"effect_allele\",\"eaf\",\"beta\",\"se\",\"pval\",\"samplesize\",\"id\"),\".outcome\"))) unlink(\"ebi-a-GCST007432.vcf.gz.tbi\") harmonise <- TwoSampleMR::harmonise_data(clump,outcome) #> Harmonising MMP.10 (jrjVHU) and FEV1 (ebi-a-GCST007432) prefix <- paste(prot,type,sep=\"-\") run_TwoSampleMR(harmonise, mr_plot=\"pQTLtools\", prefix=prefix) #> Analysing 'jrjVHU' on 'ebi-a-GCST007432'"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"mr-using-cis-trans-and-cistrans-pan-instruments","dir":"Articles","previous_headings":"5 Mendelian Randomisation (MR)","what":"MR using cis, trans and cis+trans (pan) instruments","title":"An Overview of pQTLtools","text":"illustrated IL-12B. Table 5.3: MR IL-12B variants Figure 5.6: MR cis, trans cis+trans variants IL-12B","code":"efo <- read.delim(file.path(find.package(\"pQTLtools\"),\"tests\",\"efo.txt\")) d3 <- read.delim(file.path(find.package(\"pQTLtools\"),\"tests\",\"IL.12B.txt\")) %>%       dplyr::mutate(MRBASEID=unlist(lapply(strsplit(outcome,\"id:\"),\"[\",2)),y=b) %>%       dplyr::left_join(efo) %>%       dplyr::mutate(trait=gsub(\"\\\\b(^[a-z])\",\"\\\\U\\\\1\",trait,perl=TRUE)) %>%       dplyr::select(-outcome,-method) %>%       dplyr::arrange(cistrans,desc(trait)) #> Joining with `by = join_by(MRBASEID)` knitr::kable(dplyr::select(d3,MRBASEID,trait,cistrans,nsnp,b,se,pval) %>%              dplyr::group_by(cistrans),              caption=\"MR with IL-12B variants\",digits=3) p <- ggplot2::ggplot(d3,aes(y = trait, x = y))+      ggplot2::theme_bw()+      ggplot2::geom_point()+      ggplot2::facet_wrap(~cistrans,ncol=3,scales=\"free_x\")+      ggplot2::geom_segment(ggplot2::aes(x = b-1.96*se, xend = b+1.96*se, yend = trait))+      ggplot2::geom_vline(lty=2, ggplot2::aes(xintercept=0), colour = 'red')+      ggplot2::xlab(\"Effect size\")+      ggplot2::ylab(\"\") p"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"literature-on-pqtls","dir":"Articles","previous_headings":"","what":"Literature on pQTLs","title":"An Overview of pQTLtools","text":"References3 4 included EndNote libraries now part pQTLdata package.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/pQTLtools.html","id":"uniprot-ids","dir":"Articles","previous_headings":"","what":"UniProt IDs","title":"An Overview of pQTLtools","text":"function uniprot2ids converts UniProt IDs others.","code":""},{"path":[]},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"github","dir":"Articles","previous_headings":"1 Installation","what":"GitHub","title":"snakemake showcases","text":"GitHub (documentation, stable) Note following source instead conda used activate.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"anaconda3","dir":"Articles","previous_headings":"1 Installation","what":"Anaconda3","title":"snakemake showcases","text":"https://www.anaconda.com/ remove option useful resolving compatibility issues.","code":"wget https://repo.anaconda.com/archive/Anaconda3-2020.07-Linux-x86_64.sh bash Anaconda3-2020.07-Linux-x86_64.sh # snakemake conda create -n anaconda conda remove -n anaconda snakemake conda install -c bioconda snakemake source activate snakemake conda update -n anaconda snakemake"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"miniconda3","dir":"Articles","previous_headings":"1 Installation","what":"Miniconda3","title":"snakemake showcases","text":"https://docs.conda.io/en/latest/miniconda.html","code":"wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh bash Miniconda3-latest-Linux-x86_64.sh conda config --add channels bioconda conda config --add channels conda-forge conda create -y --name miniconda python=3.7 source activate miniconda conda install -c bioconda fastqc"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"a-slurm-example","dir":"Articles","previous_headings":"","what":"A SLURM example","title":"snakemake showcases","text":"Caprion project, https://jinghuazhao.github.io/Caprion/, experiments workflow/config.yaml follows, whose driver routine follows, use --unlock necessary. specification can alternatively done via JSON. permenant configuration can also done. call conda slurm, respectively.","code":"cluster:   mkdir -p logs/{rule} &&   sbatch     --account={resources.account}     --partition={resources.partition}     --qos={resources.qos}     --cpus-per-task={threads}     --mem={resources.mem_mb}     --time={resources.runtime}     --job-name={rule}-{wildcards}     --error=logs/{rule}/{wildcards}-prune.err     --output=logs/{rule}/{wildcards}-prune.out default-resources:   - account=CARDIO-SL0-CPU   - partition=cardio   - qos=cardio   - mem_mb=10000   - runtime='12:00:00'   - threads=1 restart-times: 3 max-jobs-per-second: 10 max-status-checks-per-second: 1 local-cores: 1 latency-wait: 60 jobs: 1 keep-going: True rerun-incomplete: True printshellcmds: True scheduler: greedy use-conda: True # module load miniconda3/4.5.1 export csd3path=/rds/project/jmmh2/rds-jmmh2-projects/olink_proteomics/scallop/miniconda37 source ${csd3path}/bin/activate # snakemake -s workflow/rules/cojo.smk -j1 snakemake -s workflow/rules/report.smk -j1 snakemake -s workflow/rules/cojo.smk -c --profile workflow # all users # sudo ln -s /usr/local/Cluster-Apps/miniconda3/4.5.1/etc/profile.d/conda.sh /etc/profile.d/conda.sh # current user echo \". /usr/local/Cluster-Apps/miniconda3/4.5.1/etc/profile.d/conda.sh\" >> ~/.bashrc # conda's base (root) environment on PATH conda activate # the base environment on PATH permanently echo \"conda activate\" >> ~/.bashrc # A user profile mkdir $HOME/.config/Snakemake/slurm cp slurm.yaml $HOME/.config/Snakemake/slurm touch $HOME/.config/Snakemake/slurm/slurm.yaml snakemake --j4 --use-conda snakemake --profile slurm"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"a-mendelian-randomization-pipeline","dir":"Articles","previous_headings":"","what":"A Mendelian randomization pipeline","title":"snakemake showcases","text":"Adapted published work2, required files available snakemake subdirectory inside installed package inst/snakemake directory source package. Steps set environment outlined , MendelianRandomization v0.6.0 used together bug fix workflow/r/MR_functions.R. workflow heavily edited simplicity, efficiency generality. Currently input/ contains data CD40, OPG heart failures – imitate additional trait, HF statistics duplicated HF2. code chunks gives output/MR_HF.csv (MR results) Obs_HF.csv (meta-analysis results based observational studies) similarly HF2. Figure 1. Dependency graph rules Figure 2. Directed Acyclic Graph (DAG)","code":"module load miniconda3/4.5.1 export csd3path=/rds/project/jmmh2/rds-jmmh2-projects/olink_proteomics/scallop source ${csd3path}/miniconda37/bin/activate # 1. a dry run (-n). snakemake --dry-run # 2. run (-c on [all] available cores without --use-conda option as local packages are more up-to-date) snakemake --cores # 3. contrast with original output for OPG # grep OPG output/MR_HF.csv | diff - <(grep OPG ${csd3path}/cvd1-hf/results/res_MR_aggregate.csv) # 4. Some ancillary work in place. snakemake --rulegraph | dot -Tsvg > output/rulegraph.svg snakemake --dag | dot -Tsvg > output/dag.svg"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/snakemake.html","id":"urls","dir":"Articles","previous_headings":"","what":"URLs","title":"snakemake showcases","text":"introduction, https://ucdavis-bioinformatics-training.github.io/2020-Genome_Assembly_Workshop/snakemake/snakemake_intro; csd3, https://cambridge-ceu.github.io/csd3/Python/snakemake.html; snakemake--R, https://github.com/fritzbayer/snakemake--R; snakemake-workflows, https://github.com/snakemake-workflows/; .","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/spectrum.html","id":"peptide-sequence","dir":"Articles","previous_headings":"","what":"Peptide sequence","title":"Spectrum data analysis","text":"example PROC_HUMAN, handled Biostrings package, Figure 1.1: peptide association plot","code":"fasta_file_path <- 'https://rest.uniprot.org/uniprotkb/P04070.fasta' fasta_sequences <- Biostrings::readAAStringSet(fasta_file_path, format = \"fasta\") AA_sequence <- fasta_sequences[[1]] cat(\"Sequence:\", toString(AA_sequence), \"\\n\") iso_442688365 <- 'TDGEGALSEPSATVTIEELAAPPPPVLMHHGESSQVLHPGNK' match_position <- regexpr(iso_442688365, AA_sequence) match_position mp <- matchPattern(iso_442688365,AA_sequence) mp load(\"~/pQTLtools/tests/PROC.rda\") pQTLtools::peptideAssociationPlot(protein,cistrans) #> Joining with `by = join_by(Modified.Peptide.Sequence)`"},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/spectrum.html","id":"setup","dir":"Articles","previous_headings":"2 Spectrum data analysis","what":"Setup","title":"Spectrum data analysis","text":".raw files can handled rawrr package nevertheless requires necessary files,","code":"library(rawrr) if (isFALSE(rawrr::.checkDllInMonoPath())){    rawrr::installRawFileReaderDLLs() } if (isFALSE(file.exists(rawrr:::.rawrrAssembly()))){    rawrr::installRawrrExe() }"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/spectrum.html","id":"list-of-raw-files","dir":"Articles","previous_headings":"2 Spectrum data analysis","what":"List of.raw files","title":"Spectrum data analysis","text":"Based real project, following example listing/generating multiple .raw .zip files","code":"# ZWK .raw data spectra_ZWK <- \"~/Caprion/pre_qc_data/spectral_library_ZWK\" raw_files <- list.files(spectra_ZWK, pattern = \"\\\\.raw$\", full.names = TRUE) ## collectively suppressMessages(library(MsBackendRawFileReader)) ZWK <- Spectra::backendInitialize(MsBackendRawFileReader::MsBackendRawFileReader(),        files = raw_files) class(ZWK) methods(class=class(ZWK)) Spectra(ZWK) spectraData(ZWK) ZWK ZWKvars <- ZWK |> Spectra::spectraVariables() ZWKdata <- ZWK |> Spectra::spectraData() dim(ZWKdata) # rows with >=1 non-NA value in the columns with prefix \"precursor\" precursor <- apply(ZWKdata[grep(\"precursor\",ZWKvars)], 1, function(x) any(!is.na(x))) ZWKdata_filtered <- ZWKdata[precursor, ] save(ZWK,file=\"~/Caprion/analysis/work/ZWK.rda\")  # ZYQ/UDP library(utils) spectra <- \"~/Caprion/pre_qc_data/spectra\" zip_files <- dir(spectra, recursive = TRUE, full.names=TRUE) work_dir <- \"~/Caprion/analysis/work\" for (zip_file in zip_files) unzip(zip_file, exdir=work_dir) ZYQ_UDP <- Spectra::backendInitialize(MsBackendRawFileReader::MsBackendRawFileReader(),            files = dir(work_dir,patt=\"raw\",full.names=TRUE)) class(ZYQ_UDP) ZYQ_UDP ZYQ_UDP |> Spectra::spectraVariables() save(ZYQ_UDP,file=\"~/Caprion/analysis/work/ZYQ_UDP.rda\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/articles/spectrum.html","id":"usage","dir":"Articles","previous_headings":"2 Spectrum data analysis","what":"Usage","title":"Spectrum data analysis","text":"Various facilities shown . MSstats1 takes output data-processing pipelines.","code":"options(width=200)  # various files d <- \"/rds/project/rds-zuZwCZMsS0w/Caprion_proteomics/analysis/crux\" f <- file.path(d,\"szwk901104i19801xms1.mzML\") x <- file.path(d,\"szwk901104i19801xms1.mzXML\") g <- file.path(d,\"szwk901104i19801xms1.mgf\") r <- file.path(d,\"szwk901104i19801xms1.rda\") z <- file.path(d,\"szwk901104i19801xms1.mzML.gz\")  # mzML mz <- mzR::openMSfile(f) header_info <- mzR::header(mz) table(header_info$msLevel) peak_data <- mzR::peaks(mz) spec <- mzR::spectra(mz) class(spec) length(spec) lapply(spec,head,3) methods(class=\"mzRpwiz\") mzR::close(mz)  mz <- mzR::openMSfile(z, backend = \"pwiz\") mz nChrom(mz) head(tic(mz)) head(chromatogram(mz, 1L)) ## same as tic(x) str(chromatogram(mz)) head(peaks(mz, scan=4))  # MSnbase mzXML <- MSnbase::readMSData(x) mgf <- MSnbase::readMgfData(g) save(mzXML,mgf,file=r)  MSnbase::extractSpectraData(mzXML) MSnbase::hasSpectra(z) MSnbase::hasChromatograms(z) MSnbase::plot2d(mzXML,z=\"peaks.count\") MSnbase::plotDensity(mzXML,z=\"precursor.mz\")  MSnbase::extractSpectraData(mgf) methods(class=\"MSpectra\") MSnbase::mz(mgf) MSnbase::intensity(mgf) MSnbase::rtime(mgf) MSnbase::precursorMz(mgf) MSnbase::precursorCharge(mgf) MSnbase::precScanNum(mgf) MSnbase::precursorIntensity(mgf) MSnbase::acquisitionNum(mgf) MSnbase::scanIndex(mgf) MSnbase::peaksCount(mgf) MSnbase::msLevel(mgf) MSnbase::tic(mgf) MSnbase::ionCount(mgf) MSnbase::collisionEnergy(mgf) MSnbase::fromFile(mgf) MSnbase::polarity(mgf) MSnbase::smoothed(mgf) MSnbase::centroided(mgf) MSnbase::isCentroided(mgf) MSnbase::writeMgfData(mgf, con = \"spectra.mgf\", COM = NULL, TITLE = NULL) MSnbase::removePeaks(mgf, t, msLevel., ...) MSnbase::filterMsLevel(mgf, msLevel=2) MSnbase::as.ExpressionSet(mgf)  # This turned to be really slow! sp_list <- lapply(seq_along(mgf), function(i) {   intensity_i <- MSnbase::intensity(mgf)[[i]]   mz_i <- MSnbase::mz(mgf)[[i]]   centroided_i <- MSnbase::centroided(mgf)[[i]]   return(new(\"Spectrum1\", intensity = intensity_i, mz = mz_i, centroided = centroided_i)) }) sp1 <- do.call(rbind, sp_list) # only the first one is more manageable sp1 <- new(\"Spectrum1\",intensity=MSnbase::intensity(mgf)[[1]],mz=MSnbase::mz(mgf)[[1]],centroided=MSnbase::centroided(mgf)[[1]]) sp2 <- MSnbase::pickPeaks(sp1) MSnbase::intensity(sp2) plot(MSnbase::mz(sp1),MSnbase::intensity(sp1),type=\"h\") ## Without m/z refinement points(MSnbase::mz(sp2), MSnbase::intensity(sp2), col = \"darkgrey\") ## Using k = 1, closest signals sp3 <- MSnbase::pickPeaks(sp1, refineMz = \"kNeighbors\", k = 1) points(MSnbase::mz(sp3), MSnbase::intensity(sp3), col = \"green\", type = \"h\") ## Using descendPeak requiring at least 50% or the centroid's intensity sp4 <- MSnbase::pickPeaks(sp1, refineMz = \"descendPeak\", signalPercentage = 50) points(MSnbase::mz(sp4), MSnbase::intensity(sp4), col = \"red\", type = \"h\")  # CAMERA xs   <- CAMERA::xcmsSet(f, method=\"centWave\", ppm=30, peakwidth=c(5,10)) an   <- CAMERA::xsAnnotate(xs) an   <- CAMERA::groupFWHM(an) #For one group peaklist <- CAMERA::getpspectra(an, 1) #For two groups peaklist <- CAMERA::getpspectra(an, c(1,2))  # Spectra suppressMessages(library(Spectra)) sp <- Spectra::Spectra(z) head(sp) table(sp$msLevel) d <- Spectra::computeMzDeltas(sp[1:1000]) Spectra::plotMzDelta(d)  # protViz protViz::fragmentIon(\"TFVLNFIK\") esd <- MSnbase::extractSpectraData(mgf) op <- par(mfrow=c(2,1)) ms <- function(i) with(esd[i,],list(title=TITLE,rtinseconds=RTINSECONDS,pepmass=PEPMASS,charge=CHARGE,                                     mZ=MSnbase::mz(mgf[[i]]),intensity=MSnbase::intensity(mgf[[i]]))) protViz::peakplot(\"TAFDEAIAELDTLNEESYK\", ms(1)) protViz::peakplot(\"TAFDEAIAELDTLSEESYK\", ms(2)) par(op) load(\"~/Caprion/pilot/ZWK.rda\") peptides <- subset(mapping_ZWK,Protein==\"PROC_HUMAN\")[[\"Modified.Peptide.Sequence\"]] |> unique() pim <- protViz::parentIonMass(peptides) fi <- protViz::fragmentIon(peptides) df <- as.data.frame(fi) op <- par(mfrow=c(3,1)) for (i in 1:length(peptides)){     plot(0, 0,     xlab='m/Z',     ylab='',     xlim=range(c(fi[[i]]$b,fi[[i]]$y)),     ylim=c(0,1),     type='n',     axes=FALSE,     sub=paste(peptides[i], \"/\", pim[i], \"Da\"));     box()     axis(1, fi[[i]]$b, round(fi[[i]]$b,1), las=2)     axis(1, fi[[i]]$y, round(fi[[i]]$y,1), las=2)      pepSeq<-strsplit(peptides[i], \"\")     axis(3,fi[[i]]$b, paste(\"b\", row.names(fi[[i]]),sep=''),las=2)     axis(3,fi[[i]]$y, paste(\"y\", row.names(fi[[i]]),sep=''),las=2)      text(fi[[i]]$b, rep(0.3, nchar(peptides[i])),     pepSeq[[1]],pos=3,cex=4, lwd=4, col=\"#aaaaaaaa\")      abline(v=fi[[i]]$b, col='red')     abline(v=fi[[i]]$y, col='blue',lwd=2) } par(op)  # MSstats head(SRMRawData) QuantData <- MSstats::dataProcess(SRMRawData, use_log_file = FALSE) quant <- MSstats::dataProcess(SRMRawData,                               normalization = \"equalizeMedians\",                               summaryMethod = \"TMP\",                               censoredInt = \"NA\",                               MBimpute = TRUE,                               maxQuantileforCensored = 0.999,                               logTrans=2,                               use_log_file=FALSE,                               numberOfCores=5) names(quant)"},{"path":[]},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jing Hua Zhao. Author, maintainer.            0000-0003-4930-3582 Jimmy Peters. Author. Bram Prins. Author.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zhao J, Peters J, Prins B (2025). pQTLtools: Protein Quantitative Trait Locus Toolkit. R package version 0.5, https://jinghuazhao.github.io/pQTLtools/, https://github.com/jinghuazhao/pQTLtools/.","code":"@Manual{,   title = {pQTLtools: A Protein Quantitative Trait Locus Toolkit},   author = {Jing Hua Zhao and Jimmy Peters and Bram Prins},   year = {2025},   note = {R package version 0.5, https://jinghuazhao.github.io/pQTLtools/},   url = {https://github.com/jinghuazhao/pQTLtools/}, }"},{"path":"https://jinghuazhao.github.io/pQTLtools/index.html","id":"a-protein-quantitative-trait-locus-toolkit","dir":"","previous_headings":"","what":"A Protein Quantitative Trait Locus Toolkit","title":"Protein Quantitative Trait Locus tools","text":"collects data utilities pQTL analysis, including 1. Protein GWAS facilities Manhattan/QQ/LocusZoom.js plots, novelty/consequence checking; 2. Articles linking functions cis/trans classification, pQTL-gene plot, 2d/3d-plotly plots, forest plots among others available ‘gap’ (https://cran.r-project.org/package=gap) well colocalization, pQTL-Mendelian Randomization via ‘TwoSampleMR’ (https://mrcieu.github.io/TwoSampleMR/); 3. Query genes, regions, SNPs via ‘PhenoScanner’ (https://github.com/phenoscanner/). 4. Mapping UniProt IDs resources; 5. Showcases ‘Bioconductor’ (https://github.com/bioconductor) ‘snakemake’ (https://github.com/snakemake).","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Protein Quantitative Trait Locus tools","text":"latest version pQTLtools can installed usual:","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/index.html","id":"id_1-install-from-r","dir":"","previous_headings":"Installation","what":"1. Install from R","title":"Protein Quantitative Trait Locus tools","text":"","code":"if (!requireNamespace(\"remotes\", quietly = TRUE)) install.packages(\"remotes\") remotes::install_github(\"jinghuazhao/pQTLtools\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/index.html","id":"id_2-install-from-github-repository","dir":"","previous_headings":"Installation","what":"2. Install from GitHub repository","title":"Protein Quantitative Trait Locus tools","text":"Dependencies detailed DECRIPTION file package GitHub.","code":"git clone https://github.com/jinghuazhao/pQTLtools R CMD INSTALL pQTLtools"},{"path":"https://jinghuazhao.github.io/pQTLtools/index.html","id":"a-summary-of-functions","dir":"","previous_headings":"","what":"A summary of functions","title":"Protein Quantitative Trait Locus tools","text":"can seen R ","code":"library(help=pQTLtools) library(pQTLtools) ?pQTLtools"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/blank_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — blank_plot","title":"FUNCTION_TITLE — blank_plot","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/blank_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — blank_plot","text":"","code":"blank_plot(message)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/blank_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — blank_plot","text":"message PARAM_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/blank_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — blank_plot","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/blank_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FUNCTION_TITLE — blank_plot","text":"DETAILS","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/clump_data.args.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — clump_data.args","title":"FUNCTION_TITLE — clump_data.args","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/clump_data.args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — clump_data.args","text":"","code":"clump_data.args(   dat = NULL,   clump_kb = 10000,   clump_r2 = 0.001,   clump_p1 = 1,   clump_p2 = 1,   pop = \"EUR\" )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/clump_data.args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — clump_data.args","text":"dat PARAM_DESCRIPTION, Default: NULL clump_kb PARAM_DESCRIPTION, Default: 10000 clump_r2 PARAM_DESCRIPTION, Default: 0.001 clump_p1 PARAM_DESCRIPTION, Default: 1 clump_p2 PARAM_DESCRIPTION, Default: 1 pop PARAM_DESCRIPTION, Default: 'EUR'","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/clump_data.args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — clump_data.args","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/clump_data.args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FUNCTION_TITLE — clump_data.args","text":"DETAILS","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/csq.html","id":null,"dir":"Reference","previous_headings":"","what":"Variant consequence — csq","title":"Variant consequence — csq","text":"function maps consequences (CSQ) given list variants annotated set based facilities variant effect predictor (VEP). case protein-altering variants (PAVs), many consequences can involved. procedure also takes account linkage disequilibrium (LD) flanking regions.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/csq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variant consequence — csq","text":"","code":"csq(   query_loci,   annotated_loci,   pattern,   ldops = NULL,   flanking = 1e+06,   pop = \"EUR\",   verbose = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/csq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variant consequence — csq","text":"query_loci data.frame loci whose consequences obtained. annotated_loci data.frame annotated loci. pattern character string pattern match consequences . ldops Arguments ieugwasr::ld_matrix_local(), typically list bfile plink paths. flanking numeric value specifying flanking distance (default 1e6). pop character string specifying reference population ieugwasr::ld_matrix() (default \"EUR\"). verbose logical flag show nonexistent variants (default TRUE).","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/csq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Variant consequence — csq","text":"data.frame indicator showing whether consequences present absent.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/csq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variant consequence — csq","text":"","code":"if (FALSE) { # \\dontrun{ suppressMessages(require(dplyr)) suppressMessages(require(stringr)) # SCALLOP-INF list METAL <- read.delim(file.path(find.package(\"pQTLtools\"), \"tests\", \"INF1.METAL\")) %>%          dplyr::left_join(gap.datasets::inf1[c(\"prot\", \"gene\")]) %>%          dplyr::mutate(prot = gene, chr = Chromosome, pos = Position) # VEP output vep <- \"/rds/project/rds-zuZwCZMsS0w/Caprion_proteomics/analysis/bgen/vep\" pattern <- paste(protein_altering_variants, collapse = \"|\") suppressMessages(require(GenomicRanges)) INF <- \"/rds/project/rds-zuZwCZMsS0w/olink_proteomics/scallop/INF\" plink <- \"/rds/user/jhz22/hpc-work/bin/plink\" # CSQ b <- list() for (i in unique(dplyr::pull(METAL, Chromosome))) {   m <- dplyr::filter(METAL, Chromosome %in% i) %>%        dplyr::select(chr, pos, MarkerName, prot) %>%        dplyr::mutate(rsid = gsub(\"chr\", \"\", MarkerName)) %>%        dplyr::select(-MarkerName)   u <- read.delim(file.path(vep, paste0(\"chr\", i, \".tab.gz\"))) %>%        dplyr::select(Chrom, Pos, X.Uploaded_variation, Consequence) %>%        setNames(c(\"chr\", \"pos\", \"rsid\", \"csq\"))   bfile <- file.path(INF, \"INTERVAL\", \"per_chr\", paste0(\"snpid\", i))   b[[i]] <- csq(m, u, pattern, ldops = list(bfile = bfile, plink = plink)) } r <- dplyr::bind_rows(b) %>%      dplyr::filter(r2 >= 0.8) %>%      dplyr::rename(gene = prot) %>%      dplyr::mutate(seqnames = as.integer(seqnames), pos = as.integer(pos)) %>%      dplyr::arrange(seqnames, pos) %>%      dplyr::select(-ref.seqnames, -ref.start, -ref.end, -seqnames, -pos, -start, -end) w <- r %>%      group_by(gene,rsid) %>%      summarize(ref.rsid.all=paste(ref.rsid,collapse=\";\"),                ref.pos.all=paste(ref.pos,collapse=\";\"),                ref.csq.all=paste(ref.csq,collapse=\";\"),                r2.all=paste(r2,collapse=\";\")) } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/extract_outcome_data.args.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — extract_outcome_data.args","title":"FUNCTION_TITLE — extract_outcome_data.args","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/extract_outcome_data.args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — extract_outcome_data.args","text":"","code":"extract_outcome_data.args(   snps = NULL,   outcomes = NULL,   proxies = TRUE,   rsq = 0.8,   align_alleles = 1,   palindromes = 1,   maf_threshold = 0.3,   access_token = ieugwasr::check_access_token(),   splitsize = 10000,   proxy_splitsize = 500 )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/extract_outcome_data.args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — extract_outcome_data.args","text":"snps PARAM_DESCRIPTION, Default: NULL outcomes PARAM_DESCRIPTION, Default: NULL proxies PARAM_DESCRIPTION, Default: TRUE rsq PARAM_DESCRIPTION, Default: 0.8 align_alleles PARAM_DESCRIPTION, Default: 1 palindromes PARAM_DESCRIPTION, Default: 1 maf_threshold PARAM_DESCRIPTION, Default: 0.3 access_token PARAM_DESCRIPTION, Default: ieugwasr::check_access_token() splitsize PARAM_DESCRIPTION, Default: 10000 proxy_splitsize PARAM_DESCRIPTION, Default: 500","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/extract_outcome_data.args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — extract_outcome_data.args","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/extract_outcome_data.args.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"FUNCTION_TITLE — extract_outcome_data.args","text":"DETAILS","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/format_data.args.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — format_data.args","title":"FUNCTION_TITLE — format_data.args","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/format_data.args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — format_data.args","text":"","code":"format_data.args(   dat = NULL,   type = \"exposure\",   snps = NULL,   header = TRUE,   phenotype_col = \"Phenotype\",   snp_col = \"SNP\",   beta_col = \"beta\",   se_col = \"se\",   eaf_col = \"eaf\",   effect_allele_col = \"effect_allele\",   other_allele_col = \"other_allele\",   pval_col = \"pval\",   units_col = \"units\",   ncase_col = \"ncase\",   ncontrol_col = \"ncontrol\",   samplesize_col = \"samplesize\",   gene_col = \"gene\",   id_col = \"id\",   min_pval = 1e-200,   z_col = \"z\",   info_col = \"info\",   chr_col = \"chr\",   pos_col = \"pos\",   log_pval = FALSE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/format_data.args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — format_data.args","text":"dat PARAM_DESCRIPTION, Default: NULL type PARAM_DESCRIPTION, Default: 'exposure' snps PARAM_DESCRIPTION, Default: NULL header PARAM_DESCRIPTION, Default: TRUE phenotype_col PARAM_DESCRIPTION, Default: 'Phenotype' snp_col PARAM_DESCRIPTION, Default: 'SNP' beta_col PARAM_DESCRIPTION, Default: 'beta' se_col PARAM_DESCRIPTION, Default: 'se' eaf_col PARAM_DESCRIPTION, Default: 'eaf' effect_allele_col PARAM_DESCRIPTION, Default: 'effect_allele' other_allele_col PARAM_DESCRIPTION, Default: 'other_allele' pval_col PARAM_DESCRIPTION, Default: 'pval' units_col PARAM_DESCRIPTION, Default: 'units' ncase_col PARAM_DESCRIPTION, Default: 'ncase' ncontrol_col PARAM_DESCRIPTION, Default: 'ncontrol' samplesize_col PARAM_DESCRIPTION, Default: 'samplesize' gene_col PARAM_DESCRIPTION, Default: 'gene' id_col PARAM_DESCRIPTION, Default: 'id' min_pval PARAM_DESCRIPTION, Default: 1e-200 z_col PARAM_DESCRIPTION, Default: 'z' info_col PARAM_DESCRIPTION, Default: 'info' chr_col PARAM_DESCRIPTION, Default: 'chr' pos_col PARAM_DESCRIPTION, Default: 'pos' log_pval PARAM_DESCRIPTION, Default: FALSE","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/format_data.args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — format_data.args","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":null,"dir":"Reference","previous_headings":"","what":"phenoscanner genequeries in batches — genequeries","title":"phenoscanner genequeries in batches — genequeries","text":"R/phenoscanner allows certain number items supplied. simple function return large number calls batches well generating SNPIDs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phenoscanner genequeries in batches — genequeries","text":"","code":"genequeries(   genelist,   catalogue = \"pQTL\",   proxies = \"EUR\",   p = 5e-08,   r2 = 0.8,   build = 37,   wait = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phenoscanner genequeries in batches — genequeries","text":"genelist list SNPs. catalogue \"None\",\"eQTL\",\"mQTL\",\"methQTL\",\"pQTL\",\"GWAS\". proxies \"None\", \"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\". p p value threshold. r2 r2 LD. build 37, 38. wait flag wait 1hr every 50 genes.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phenoscanner genequeries in batches — genequeries","text":"returned value list containing genes results.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"phenoscanner genequeries in batches — genequeries","text":"Batches generated queries combined one.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/genequeries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phenoscanner genequeries in batches — genequeries","text":"","code":"if (FALSE) { # \\dontrun{ # single gene   genequeries(\"TNFRSF11B\") } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":null,"dir":"Reference","previous_headings":"","what":"Limit of detection analysis — get.prop.below.LLOD","title":"Limit of detection analysis — get.prop.below.LLOD","text":"function obtains lower limit detection proteomic analysis.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Limit of detection analysis — get.prop.below.LLOD","text":"","code":"get.prop.below.LLOD(eset, flagged = \"OUT\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Limit of detection analysis — get.prop.below.LLOD","text":"eset ExpressionSet object. flagged flag indicator sample exclusion.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Limit of detection analysis — get.prop.below.LLOD","text":"updated ExpressionSet object.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Limit of detection analysis — get.prop.below.LLOD","text":"James Peters","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/get.prop.below.LLOD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Limit of detection analysis — get.prop.below.LLOD","text":"","code":"suppressMessages(library(Biobase)) data(sample.ExpressionSet, package=\"Biobase\") exampleSet <- sample.ExpressionSet Biobase::fData(exampleSet) #> data frame with 0 columns and 500 rows Biobase::fData(exampleSet)$lod.max <-     apply(Biobase::exprs(exampleSet),1,quantile,runif(nrow(exampleSet))) lod <- get.prop.below.LLOD(exampleSet) x <- dplyr::arrange(fData(lod),desc(pc.belowLOD.new)) knitr::kable(head(lod)) #>  #>  #> |   | AFFX.MurIL2_at| AFFX.MurIL10_at| AFFX.MurIL4_at| AFFX.MurFAS_at| AFFX.BioB.5_at| AFFX.BioB.M_at|sex    |type    | score| #> |:--|--------------:|---------------:|--------------:|--------------:|--------------:|--------------:|:------|:-------|-----:| #> |A  |       192.7420|        97.13700|       45.81920|       22.54450|        96.7875|        89.0730|Female |Control |  0.75| #> |B  |        85.7533|       126.19600|        8.83135|        3.60093|        30.4380|        25.8461|Male   |Case    |  0.40| #> |C  |       176.7570|        77.92160|       33.06320|       14.68830|        46.1271|        57.2033|Male   |Control |  0.73| #> |D  |       135.5750|        93.37130|       28.70720|       12.33970|        70.9319|        69.9766|Male   |Case    |  0.42| #> |E  |        64.4939|        24.39860|        5.94492|       36.86630|        56.1744|        49.5822|Female |Case    |  0.93| #> |F  |        76.3569|        85.50880|       28.29250|       11.25680|        42.6756|        26.1262|Male   |Control |  0.22| #> |G  |       160.5050|        98.90860|       30.96940|       23.00340|        86.5156|        75.0083|Male   |Case    |  0.96| #> |H  |        65.9631|        81.69320|       14.79230|       16.21340|        30.7927|        42.3352|Male   |Case    |  0.79| #> |I  |        56.9039|        97.80150|       14.23990|       12.03750|        19.7183|        41.1207|Female |Case    |  0.37| #> |J  |       135.6080|        90.48380|       34.48740|        4.54978|        46.3520|        91.5307|Male   |Control |  0.63| #> |K  |        63.4432|        70.57330|       20.35210|        8.51782|        39.1326|        39.9136|Male   |Case    |  0.26| #> |L  |        78.2126|        94.54180|       14.15540|       27.28520|        41.7698|        49.8397|Female |Control |  0.36| #> |M  |        83.0943|        75.34550|       20.62510|       10.16160|        80.2197|        63.4794|Male   |Case    |  0.41| #> |N  |        89.3372|        68.58270|       15.92310|       20.24880|        36.4903|        24.7007|Male   |Case    |  0.80| #> |O  |        91.0615|        87.40500|       20.15790|       15.78490|        36.4021|        47.4641|Female |Case    |  0.10| #> |P  |        95.9377|        84.45810|       27.81390|       14.32760|        35.3054|        47.3578|Female |Control |  0.41| #> |Q  |       179.8450|        87.68060|       32.79110|       15.94880|        58.6239|        58.1331|Female |Case    |  0.16| #> |R  |       152.4670|       108.03200|       33.52920|       14.67530|       114.0620|       104.1220|Male   |Control |  0.72| #> |S  |       180.8340|       134.26300|       19.81720|       -7.91911|        93.4402|       115.8310|Male   |Case    |  0.17| #> |T  |        85.4146|        91.40310|       20.41900|       12.88750|        22.5168|        58.1224|Female |Case    |  0.74| #> |U  |       157.9890|        -8.68811|       26.87200|       11.91860|        48.6462|        73.4221|Male   |Control |  0.35| #> |V  |       146.8000|        85.02120|       31.14880|       12.83240|        90.2215|        64.6066|Female |Control |  0.77| #> |W  |        93.8829|        79.29980|       22.34200|       11.13900|        42.0053|        40.3068|Male   |Control |  0.27| #> |X  |       103.8550|        71.65520|       19.01350|        7.55564|        57.5738|        41.8209|Male   |Control |  0.98| #> |Y  |        64.4340|        64.23690|       12.16860|       19.98490|        44.8216|        46.1087|Female |Case    |  0.94| #> |Z  |       175.6150|        78.70680|       17.37800|        8.96849|        61.7044|        49.4122|Female |Case    |  0.32| plot(x[,2], main=\"Random quantile cut off\", ylab=\"<lod%\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/harmonise_data.args.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — harmonise_data.args","title":"FUNCTION_TITLE — harmonise_data.args","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/harmonise_data.args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — harmonise_data.args","text":"","code":"harmonise_data.args(exposure_dat = NULL, outcome_dat = NULL, action = 2)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/harmonise_data.args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — harmonise_data.args","text":"exposure_dat PARAM_DESCRIPTION, Default: NULL outcome_dat PARAM_DESCRIPTION, Default: NULL action PARAM_DESCRIPTION, Default: 2","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/harmonise_data.args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — harmonise_data.args","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":null,"dir":"Reference","previous_headings":"","what":"Import OpenGWAS — import_OpenGWAS","title":"Import OpenGWAS — import_OpenGWAS","text":"function imports OpenGWAS.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import OpenGWAS — import_OpenGWAS","text":"","code":"import_OpenGWAS(   opengwas_id,   region,   method = \"TwoSampleMR\",   verbose = TRUE,   ... )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import OpenGWAS — import_OpenGWAS","text":"opengwas_id OpenGWAS id. region chr:start-end. method Method extract GWAS data. verbose Extra information. ... Parameters pass TwoSampleMR outcome extraction.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import OpenGWAS — import_OpenGWAS","text":"summary statistic object. method=\"TwoSampleMR\" result TwoSampleMR outcome format.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import OpenGWAS — import_OpenGWAS","text":"default, method=\"TwoSampleMR\" work cases controls variant filtering. VCF file, Lyon et al. (2021) , known exist, one can specify method=\"gwasvcf\" extract chunk data.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import OpenGWAS — import_OpenGWAS","text":"Adapted function.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import OpenGWAS — import_OpenGWAS","text":"Lyon MS, Andrews SJ, Elsworth B, Gaunt TR, Hemani G, Marcora E (2021). “variant call format provides efficient robust storage GWAS summary statistics.” Genome Biol, 22(1), 32. doi:10.1186/s13059-020-02248-0 .","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_OpenGWAS.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import OpenGWAS — import_OpenGWAS","text":"","code":"if (FALSE) { # \\dontrun{ # method=\"TwoSampleMR\" # GSMR data preparation for Crohn's disease in the LTA region opengwas_id <- \"ebi-a-GCST004132\" region <- \"6:30539831-32542101\" n <- 2/(1/12194 + 1/28072) od <- pQTLtools::import_OpenGWAS(opengwas_id,region) %>%       dplyr::distinct() %>%       dplyr::mutate(snpid=gap::chr_pos_a1_a2(chr,pos,effect_allele.outcome,other_allele.outcome),                     effect_allele.outcome=toupper(effect_allele.outcome),                     other_allele.outcome=toupper(other_allele.outcome)) %>%       dplyr::select(snpid,effect_allele.outcome,other_allele.outcome,eaf.outcome,                     beta.outcome,se.outcome,pval.outcome,samplesize.outcome) %>%       setNames(c(\"SNP\",\"A1\",\"A2\",\"freq\",\"b\",\"se\",\"p\",\"N\")) %>%       dplyr::group_by(SNP) %>%       dplyr::slice(which.min(p)) %>%       data.frame() unlink(\"ebi-a-GCST007432.vcf.gz.tbi\") od[is.na(od$N),\"N\"] <- n write.table(od,quote=FALSE,row.names=FALSE) # method=\"gwasvcf\" gwasvcf::set_bcftools(path=file.path(HPC_WORK,\"bin\",\"bcftools\")) # MPV ARHGEF3 region opengwas_id <- \"ebi-a-GCST004599\" region <- \"3:56649749-57049749\" mpv_ARHGEF3 <- import_OpenGWAS(opengwas_id,region,method=\"gwasvcf\") # all immune-related INF <- Sys.getenv(\"INF\") HPC_WORK <- Sys.getenv(\"HPC_WORK\") opengwas_ids <- scan(file.path(INF,\"OpenGWAS\",\"ieu.list\"),what=\"\") unavail <- c(\"ieu-b-18\",\"finn-a-M13_SLE\",\"finn-a-D3_SARCOIDOSIS\") opengwas_ids <- subset(opengwas_ids,!opengwas_ids %in% unavail) region <- \"1:100-2000000\" summary_list = purrr::map(opengwas_ids[1:2], ~import_OpenGWAS(., region, method=\"gwasvcf\")) } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":null,"dir":"Reference","previous_headings":"","what":"Import eQTL Catalogue — import_eQTLCatalogue","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"adopted function imports eQTL Catalogue.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"","code":"import_eQTLCatalogue(   ftp_path,   region,   selected_gene_id,   column_names,   verbose = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"ftp_path URL. region chr:start-end. selected_gene_id Ensembl gene ID. column_names Column names dataset. verbose Extra information.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"summary statistic object.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"function based eQTL-Catalogue-resources, Kerimov et al. (2021) .","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"Adapted function.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"Kerimov N, Hayhurst JD, Peikova K, Manning JR, Walter P, Kolberg L, Samovica M, Sakthivel MP, Kuzmin , Trevanion SJ, Burdett T, Jupp S, Parkinson H, Papatheodorou , Yates AD, Zerbino DR, Alasoo K (2021). “compendium uniformly processed human gene expression splicing quantitative trait loci.” Nature Genetics, 53(9), 1290-1299. doi:10.1038/s41588-021-00924-w .","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/import_eQTLCatalogue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import eQTL Catalogue — import_eQTLCatalogue","text":"","code":"if (FALSE) { # \\dontrun{ suppressMessages(invisible(lapply(c(\"dplyr\", \"ggplot2\", \"readr\", \"coloc\",                                     \"GenomicRanges\",\"seqminer\"),                  require, character.only = TRUE))) # Largely deprecated so b./c. below are local version fp <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"tabix_ftp_paths.tsv\") tabix_paths <- read.delim(fp, stringsAsFactors = FALSE) %>% dplyr::as_tibble() # MPV association at the ARHGEF3 locus region <- \"3:56615721-57015721\" ensGene <- \"ENSG00000163947\" platelet_df <- dplyr::filter(tabix_paths, study == \"CEDAR\", tissue_label == \"platelet\") hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\") column_names <- names(read.delim(hdr)) summary_stats <- pQTLtools::import_eQTLCatalogue(platelet_df$ftp_path, region,                                       selected_gene_id = ensGene, column_names) summary_stats ggplot(summary_stats, aes(x = position, y = -log(pvalue, 10))) + geom_point() # gwasvcf::set_bcftools(path=file.path(HPC_WORK,\"bin\",\"bcftools\")) # GWAS sumstat from the same region # manually download and parse with gwasvcf # wget https://gwas.mrcieu.ac.uk/files/ebi-a-GCST004599/ebi-a-GCST004599.vcf.gz # wget https://gwas.mrcieu.ac.uk/files/ebi-a-GCST004599/ebi-a-GCST004599.vcf.gz.tbi # gwas_stats <- gwasvcf::query_gwas(\"ebi-a-GCST004599.vcf.gz\", chrompos = \"3:56649749-57049749\") # gwas_stats <- gwasvcf::vcf_to_granges(gwas_stats) %>% #               keepSeqlevels(\"3\") %>% #               renameSeqlevels(\"chr3\") # via import_OpenGWAS opengwas_id <- \"ebi-a-GCST004599\" region <- \"3:56649749-57049749\" gwas_stats <- import_OpenGWAS(opengwas_id,region) %>% #             keepSeqlevels(\"3\") %>% #             renameSeqlevels(\"chr3\") f <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"hg19ToHg38.over.chain\") chain <- rtracklayer::import.chain(f) gwas_stats_hg38 <- rtracklayer::liftOver(gwas_stats, chain) %>%   unlist() %>%   dplyr::as_tibble() %>%   dplyr::transmute(chromosome = seqnames,                    position = start, REF, ALT, AF, ES, SE, LP, SS) %>%   dplyr::mutate(id = paste(chromosome, position, sep = \":\")) %>%   dplyr::mutate(MAF = pmin(AF, 1-AF)) %>%   dplyr::group_by(id) %>%   dplyr::mutate(row_count = n()) %>%   dplyr::ungroup() %>%   dplyr::filter(row_count == 1) %>%   dplyr::mutate(chromosome=gsub(\"chr\",\"\",chromosome)) ggplot2::ggplot(gwas_stats_hg38, aes(x = position, y = LP)) + geom_point() # Colocalisation res <- run_coloc(summary_stats, gwas_stats_hg38)  # a. all other eQTL datasets microarray_df <- dplyr::filter(tabix_paths, quant_method == \"microarray\") %>%                  dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\")) ftp_path_list <- setNames(as.list(microarray_df$ftp_path), microarray_df$qtl_id[1]) hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.CEDAR\") column_names <- names(read.delim(hdr)) summary_list <- purrr::map(ftp_path_list, ~import_eQTLCatalogue(., region,                            selected_gene_id = ensGene, column_names)) coloc_df_microarray <- purrr::map_df(summary_list, ~run_coloc(., gwas_stats_hg38),                                      .id = \"qtl_id\")  # b. Uniformly processed RNA-seq datasets # rnaseq_df <- dplyr::filter(tabix_paths, quant_method == \"ge\") %>% #              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\")) # ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id) # hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.Alasoo\") fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",                 \"tabix_ftp_paths_ge.tsv\") # eQTL Catalogue site (deprecated) imported_tabix_paths <- read.delim(fp, stringsAsFactors = FALSE) %>%                         dplyr::as_tibble() # local downloads imported_tabix_paths <- within(imported_tabix_paths,       {         f <- lapply(strsplit(ftp_path,\"/csv/|/ge/\"),\"[\",3)         ftp_path <- paste0(\"~/rds/public_databases/eQTLCatalogue/\",f)       }) ftp_path_list <- setNames(as.list(imported_tabix_paths$ftp_path),                           imported_tabix_paths$unique_id) hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",                  \"column_names.Alasoo\") column_names <- names(read.delim(hdr)) safe_import <- purrr::safely(import_eQTLCatalogue) summary_list <- purrr::map(ftp_path_list, ~safe_import(., region,                            selected_gene_id = ensGene, column_names)) result_list <- purrr::map(summary_list, ~.$result) result_list <- result_list[!unlist(purrr::map(result_list, is.null))] coloc_df_rnaseq <- purrr::map_df(result_list, ~run_coloc(., gwas_stats_hg38),                                  .id = \"qtl_id\")  # c. GTEx_v8 imported eQTL datasets # rnaseq_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>% #              dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\")) # ftp_path_list <- setNames(as.list(rnaseq_df$ftp_path), rnaseq_df$qtl_id) fp <- file.path(find.package(\"pQTLtools\"),\"eQTL-Catalogue\",                 \"tabix_ftp_paths_gtex.tsv\") # eQTL Catalogue site imported_tabix_paths <- read.delim(fp, stringsAsFactors = FALSE) %>%                         dplyr::as_tibble() # local downloads imported_tabix_paths <- within(imported_tabix_paths,        {          f <- lapply(strsplit(ftp_path,\"/csv/|/ge/\"),\"[\",3);          ftp_path <- paste0(\"~/rds/public_databases/GTEx/csv/\",f)        }) gtex_df <- dplyr::filter(imported_tabix_paths, quant_method == \"ge\") %>%            dplyr::mutate(qtl_id = paste(study, qtl_group, sep = \"_\")) ftp_path_list <- setNames(as.list(gtex_df$ftp_path), gtex_df$qtl_id) hdr <- file.path(path.package(\"pQTLtools\"),\"eQTL-Catalogue\",\"column_names.GTEx\") column_names <- names(read.delim(hdr)) safe_import <- purrr::safely(import_eQTLCatalogue) summary_list <- purrr::map(ftp_path_list, ~safe_import(., region,                            selected_gene_id = ensGene, column_names)) result_list <- purrr::map(summary_list, ~.$result) result_list <- result_list[!unlist(purrr::map(result_list, is.null))] result_filtered <- purrr::map(result_list, ~dplyr::filter(., !is.na(se))) coloc_df_imported <- purrr::map_df(result_filtered, ~run_coloc(., gwas_stats_hg38),                                    .id = \"qtl_id\")  coloc_df = dplyr::bind_rows(coloc_df_microarray, coloc_df_rnaseq, coloc_df_imported) dplyr::arrange(coloc_df, -PP.H4.abf) ggplot2::ggplot(coloc_df, aes(x = PP.H4.abf)) + geom_histogram() } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":null,"dir":"Reference","previous_headings":"","what":"A call to expressionSet class — make_ExpressionSet","title":"A call to expressionSet class — make_ExpressionSet","text":"really direct call Bioconductor/Biobase class.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A call to expressionSet class — make_ExpressionSet","text":"","code":"make_ExpressionSet(   assayData,   phenoData = Biobase::annotatedDataFrameFrom(assayData, byrow = FALSE),   featureData = Biobase::annotatedDataFrameFrom(assayData, byrow = TRUE),   experimentData = Biobase::MIAME(),   annotation = character(),   protocolData = Biobase::annotatedDataFrameFrom(assayData, byrow = FALSE),   ... )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A call to expressionSet class — make_ExpressionSet","text":"assayData Expression data. phenoData Phenotype. featureData featureData. experimentData Information data source. annotation Annotation information. protocolData protocol information. ... options.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A call to expressionSet class — make_ExpressionSet","text":"ExpressionSet object.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A call to expressionSet class — make_ExpressionSet","text":"explicit call make easier handle proteomic data downstream analyses.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"A call to expressionSet class — make_ExpressionSet","text":"Adapted Bioconductor/Biobase following number proteomic pilot studies.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/make_ExpressionSet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A call to expressionSet class — make_ExpressionSet","text":"","code":"dataDirectory <- system.file(\"extdata\", package=\"Biobase\") exprsFile <- file.path(dataDirectory, \"exprsData.txt\") exprs <- as.matrix(read.table(exprsFile, header=TRUE, sep=\"\\t\", row.names=1, as.is=TRUE)) pDataFile <- file.path(dataDirectory, \"pData.txt\") pData <- read.table(pDataFile, row.names=1, header=TRUE, sep=\"\\t\") all(rownames(pData)==colnames(exprs)) #> [1] TRUE metadata <- data.frame(labelDescription=                        c(\"Patient gender\",                          \"Case/control status\",                          \"Tumor progress on XYZ scale\"),                        row.names=c(\"gender\", \"type\", \"score\")) suppressMessages(library(Biobase)) phenoData <- Biobase::AnnotatedDataFrame(data=pData, varMetadata=metadata) experimentData <- Biobase::MIAME(     name=\"Pierre Fermat\",     lab=\"Francis Galton Lab\",     contact=\"pfermat@lab.not.exist\",     title=\"Smoking-Cancer Experiment\",     abstract=\"An example ExpressionSet\",     url=\"www.lab.not.exist\",     other=list(notes=\"Created from text files\")) exampleSet <- pQTLtools::make_ExpressionSet(exprs,phenoData,                                  experimentData=experimentData,                                  annotation=\"hgu95av2\") data(sample.ExpressionSet, package=\"Biobase\") identical(exampleSet,sample.ExpressionSet) #> [1] FALSE invisible(Biobase::esApply(exampleSet,2,hist))                           lm(score~gender+X31739_at,data=exampleSet) #>  #> Call: #> lm(formula = score ~ gender + X31739_at, data = exampleSet) #>  #> Coefficients: #> (Intercept)   genderMale    X31739_at   #>   0.6006673    0.0108515   -0.0003012   #>"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_forest_plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"MR forest plot — mr_forest_plot2","title":"MR forest plot — mr_forest_plot2","text":"Adaptation TwoSampleMR::mr_forest_plot()","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_forest_plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MR forest plot — mr_forest_plot2","text":"","code":"mr_forest_plot2(singlesnp_results, exponentiate = FALSE, alpha = 0.05)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_forest_plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MR forest plot — mr_forest_plot2","text":"singlesnp_results Results based single variants. exponentiate Logic variable indicate exponentiation, Default: FALSE. alpha Confidence level, Default: 0.05.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_forest_plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MR forest plot — mr_forest_plot2","text":"graphic object.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_funnel_plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"MR funnel plot — mr_funnel_plot2","title":"MR funnel plot — mr_funnel_plot2","text":"Adaptation TwoSampleMR::mr_funnel_plot()","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_funnel_plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MR funnel plot — mr_funnel_plot2","text":"","code":"mr_funnel_plot2(singlesnp_results)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_funnel_plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MR funnel plot — mr_funnel_plot2","text":"singlesnp_results Results based single variants.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_funnel_plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MR funnel plot — mr_funnel_plot2","text":"graphic object.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_leaveoneout_plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"MR leave-one-out analysis — mr_leaveoneout_plot2","title":"MR leave-one-out analysis — mr_leaveoneout_plot2","text":"Adapatation TwoSampleMR::mr_leaveoneout_plot()","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_leaveoneout_plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MR leave-one-out analysis — mr_leaveoneout_plot2","text":"","code":"mr_leaveoneout_plot2(leaveoneout_results, alpha = 0.05)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_leaveoneout_plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MR leave-one-out analysis — mr_leaveoneout_plot2","text":"leaveoneout_results Results leave-one-analysis. alpha PARAM_DESCRIPTION, Default: 0.05.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_leaveoneout_plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MR leave-one-out analysis — mr_leaveoneout_plot2","text":"graphic object.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_scatter_plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"MR scatter plot — mr_scatter_plot2","title":"MR scatter plot — mr_scatter_plot2","text":"Adaptation TwoSampleMR::mr_scatter_plot()","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_scatter_plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MR scatter plot — mr_scatter_plot2","text":"","code":"mr_scatter_plot2(mr_results, dat, alpha = 0.05)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_scatter_plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MR scatter plot — mr_scatter_plot2","text":"mr_results MR results. dat data. alpha Confidentce level, Default: 0.05.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/mr_scatter_plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MR scatter plot — mr_scatter_plot2","text":"graphic object.","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/novelty_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Locus novelty check — novelty_check","title":"Locus novelty check — novelty_check","text":"function checks novelty list loci pQTLs published list. known_loci query_loci variables: chr, pos, uniprot, rsid, prot.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/novelty_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locus novelty check — novelty_check","text":"","code":"novelty_check(   known_loci,   query_loci,   ldops = NULL,   flanking = 1e+06,   pop = \"EUR\",   verbose = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/novelty_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locus novelty check — novelty_check","text":"known_loci data.frame published loci. query_loci data.frame loci whose novelties unclear. ldops arguments ieugwasr::ld_matrix_local() flanking flanking distance. pop reference population ieugwasr::ld_matrix(). verbose flag show nonexistent variants.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/novelty_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Locus novelty check — novelty_check","text":"data.frame containing nonnovel loci.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/novelty_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Locus novelty check — novelty_check","text":"","code":"if (FALSE) { # \\dontrun{ suppressMessages(require(dplyr)) suppressMessages(require(openxlsx)) # SCALLOP-INF list METAL <- read.delim(file.path(find.package(\"pQTLtools\"),\"tests\",\"INF1.METAL\")) %>%          dplyr::left_join(gap.datasets::inf1[c(\"prot\",\"gene\")]) %>%          dplyr::mutate(prot=gene,prot_rsid=paste0(uniprot,\"-\",rsid),chr=Chromosome,pos=Position) # UKB_PPP list results <- \"/rds/project/jmmh2/rds-jmmh2-results/public/proteomics\" url <- file.path(results,\"UKB-PPP\",\"doc\",\"sun22.xlsx\") ST10 <- read.xlsx(url,\"ST10\",startRow=3) %>%         dplyr::mutate(uniprot=Target.UniProt,rsid=rsID,prot=Assay.Target) %>%         dplyr::mutate(prot_rsid=paste0(uniprot,\"-\",rsid)) sentinels <- dplyr::left_join(METAL,ST10,by=\"prot_rsid\") %>%              dplyr::select(prot_rsid,cis.trans,rsID) %>%              dplyr::filter(!is.na(rsID)) inf1 <- c(with(gap.datasets::inf1,uniprot),with(METAL,uniprot)) %>%         unique() overlap <- dplyr::filter(ST10,uniprot %in% inf1) dim(overlap) UKB_PPP <- dplyr::mutate(overlap,            chrpos=strsplit(overlap[[\"Variant.ID.(CHROM:GENPOS.(hg37):A0:A1:imp:v1)\"]],\":\"),            chr=as.integer(unlist(lapply(chrpos,\"[[\",1))),            pos=as.integer(unlist(lapply(chrpos,\"[[\",2))),            chrpos=paste(chr,pos,sep=\":\")) # ieugwasr LD reference which requires an up-to-date registration. suppressMessages(require(GenomicRanges)) b <- novelty_check(UKB_PPP,METAL) replication <- dplyr::filter(b,r2>=0.8) INF <- \"/rds/project/jmmh2/rds-jmmh2-projects/olink_proteomics/scallop/INF/\" # write.table(replication,file=file.path(INF,\"work\",\"UKB-PPP.txt\"), #             row.names=FALSE,quote=FALSE,sep=\"\\t\") replication <- read.delim(file.path(find.package(\"pQTLtools\"),\"tests\",\"UKB-PPP.txt\")) %>%                dplyr::select(known.seqnames,known.rsid,query.rsid,query.prot) variant_list <- unique(c(dplyr::pull(replication,known.rsid),                          dplyr::pull(replication,query.rsid))) load(file.path(find.package(\"pQTLtools\"),\"tests\",\"novel_data.rda\")) prot_rsid <- with(novel_data,paste0(prot,\"-\",rsid)) prot_rsid_repl <- with(replication,paste0(query.prot,\"-\",query.rsid)) left <- setdiff(prot_rsid,prot_rsid_repl) # local LD reference panel by chromosome # r2 <- LDlinkR::LDmatrix(variant_list,pop=\"CEU\",token=Sys.getenv(\"LDLINK_TOKEN\")) plink <- \"/rds/user/jhz22/hpc-work/bin/plink\" b <- list() for(i in unique(dplyr::pull(METAL,Chromosome))) {    u <- dplyr::filter(UKB_PPP,chr %in% i) %>%         dplyr::select(chr,pos,uniprot,rsid,prot)    m <- dplyr::filter(METAL,Chromosome %in% i) %>%         dplyr::select(chr,pos,uniprot,rsid,prot)    bfile <- file.path(INF,\"INTERVAL\",\"per_chr\",paste0(\"chr\",i))    b[[i]] <- novelty_check(u,m,ldops=list(bfile=bfile,plink=plink)) } replication2 <- dplyr::filter(bind_rows(b), r2>=0.8) prot_rsid <- with(novel_data %>%              dplyr::left_join(gap.datasets::inf1[c(\"prot\",\"gene\")]),paste0(gene,\"-\",rsid)) prot_rsid_repl <- with(replication2,paste0(query.prot,\"-\",query.rsid)) novel <- setdiff(prot_rsid,prot_rsid_repl) } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pQTLtools.html","id":null,"dir":"Reference","previous_headings":"","what":"A reference manual — pQTLtools","title":"A reference manual — pQTLtools","text":"collects data utilities pQTL analysis, including 1. Protein GWAS facilities Manhattan/QQ/LocusZoom.js plots, novelty/consequence checking; 2. Articles linking functions cis/trans classification, pQTL-gene plot, 2d/3d-plotly plots, forest plots among others available 'gap' (https://cran.r-project.org/package=gap) well colocalization, pQTL-Mendelian Randomization via 'TwoSampleMR' (https://mrcieu.github.io/TwoSampleMR/); 3. Query genes, regions, SNPs via 'PhenoScanner' (https://github.com/phenoscanner/). 4. Mapping UniProt IDs resources; 5. Showcases 'Bioconductor' (https://github.com/bioconductor) 'snakemake' (https://github.com/snakemake).","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pQTLtools.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A reference manual — pQTLtools","text":"Available data functions listed following table.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pQTLtools.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A reference manual — pQTLtools","text":"Vignettes package usage: Overview pQTLtools. vignette(\"pQTLtools\"). Bioconductor Notes. vignette(\"bioconductor\"). LocusZoom.js. vignette(\"LocusZoom.js\"). snakemake showcases. vignette(\"snakemake\").","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pQTLtools.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"A reference manual — pQTLtools","text":"Jing Hua Zhao collaboration colleagues","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/peptideAssociationPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"peptide association plot — peptideAssociationPlot","title":"peptide association plot — peptideAssociationPlot","text":"peptide association plot","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/peptideAssociationPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"peptide association plot — peptideAssociationPlot","text":"","code":"peptideAssociationPlot(protein, cistrans, chrlen = gap::hg19, disp = 85)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/peptideAssociationPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"peptide association plot — peptideAssociationPlot","text":"protein protein name. cistrans peptide signals classification. chrlen chromosome length (hg18, hg19, hg38). disp distance x-axis.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/peptideAssociationPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"peptide association plot — peptideAssociationPlot","text":"None.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/peptideAssociationPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"peptide association plot — peptideAssociationPlot","text":"","code":"if (FALSE) { # \\dontrun{   par(mfrow=c(2,1))   protein <- \"PROC\"   suffix <- \"_dr\"   input <- paste0(\"~/Caprion/analysis/METAL\",suffix,\"/gz/\",protein,suffix,\".txt.gz\")   annotation <- paste0(\"~/Caprion/analysis/METAL\",suffix,\"/vep/\",protein,suffix,\".txt\")   reference <- file.path(find.package(\"pQTLtools\"),\"turboman\",                                       \"turboman_hg19_reference_data.rda\")   pvalue_sign <- 5e-8   plot_title <- protein   pQTLtools::turboman(input, annotation, reference, pvalue_sign, plot_title)   cistrans <- read.csv(paste0(\"~/pQTLtools/tests\",\"/\",protein,\".cis.vs.trans\"))   load(\"~/pQTLtools/tests/PROC.rda\")   peptideAssociationPlot(protein,cistrans) } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/peptideMapping.html","id":null,"dir":"Reference","previous_headings":"","what":"peptide-to-protein mapping — peptideMapping","title":"peptide-to-protein mapping — peptideMapping","text":"peptide--protein mapping","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/peptideMapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"peptide-to-protein mapping — peptideMapping","text":"","code":"peptideMapping(protein, batch = \"ZWK\", mm = 5)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/peptideMapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"peptide-to-protein mapping — peptideMapping","text":"protein protein name. batch batch . Caprion experiment. mm maximum number mismatches.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/peptideMapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"peptide-to-protein mapping — peptideMapping","text":"list containing mapping information.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/peptideMapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"peptide-to-protein mapping — peptideMapping","text":"","code":"if (FALSE) { # \\dontrun{   batch <- \"ZWK\"   load(paste0(\"~/Caprion/pilot/\",batch,\".rda\"))   PROC <- peptideMapping(\"PROC\",mm=0) } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic pQTL-MR analysis — pqtlMR","title":"Basic pQTL-MR analysis — pqtlMR","text":"function takes exposure outcome data produced format_data() used perform MR analysis list outcomes; latter case can data MR-Base, e.g., outcome <- extract_outcome_data(snps=(exposure,SNP),outcomes=c(\"ieu--7\",\"ebi--GCST007432\")).","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic pQTL-MR analysis — pqtlMR","text":"","code":"pqtlMR(   exposure,   outcome,   mr_plot = FALSE,   prefix = \"pQTL-combined-\",   reverse = FALSE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic pQTL-MR analysis — pqtlMR","text":"exposure exposure data. outcome counterpart outcome. mr_plot produce plots. prefix prefix output files. reverse TRUE, perform reverse MR.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic pQTL-MR analysis — pqtlMR","text":"value returned several files.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic pQTL-MR analysis — pqtlMR","text":"Adapted Zheng et al. (2020) , function analogous run_TwoSampleMR().","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Basic pQTL-MR analysis — pqtlMR","text":"Adapted script Jie Zheng.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Basic pQTL-MR analysis — pqtlMR","text":"Zheng J, Haberland V, Baird D, Walker V, Haycock PC, Hurle MR, Gutteridge , Erola P, Liu Y, Luo S, Robinson J, Richardson TG, Staley JR, Elsworth B, Burgess S, Sun BB, Danesh J, Runz H, Maranville JC, Martin HM, Yarmolinsky J, Laurin C, Holmes MV, Liu JZ, Estrada K, Santos R, McCarthy L, Waterworth D, Nelson MR, Smith GD, Butterworth , Hemani G, Scott RA, Gaunt TR (2020). “Phenome-wide Mendelian randomization mapping influence plasma proteome complex diseases.” Nature Genetics, 52(10), 1122-1131. doi:10.1038/s41588-020-0682-6 .","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/pqtlMR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic pQTL-MR analysis — pqtlMR","text":"","code":"fi <- file.path(find.package(\"pQTLtools\",lib.loc=.libPaths()),\"tests\",\"Ins.csv\") exposure <- TwoSampleMR::format_data(read.csv(fi),type=\"exposure\") fo <- file.path(find.package(\"pQTLtools\",lib.loc=.libPaths()),\"tests\",\"Out.csv\") outcome <- TwoSampleMR::format_data(read.csv(fo),type=\"outcome\") #> Warning: The following columns are not present but are helpful for harmonisation #> eaf pQTLtools::pqtlMR(exposure, outcome, prefix=\"IL6R-\") #> Harmonising IL.6 (O9YIMd) and Rheumatoid arthritis (4WZ5NH) #> Harmonising IL.6 (O9YIMd) and Coronary artery disease (aL6STL) #> Harmonising IL.6 (O9YIMd) and Atopic dermatitis (cG94vA) #> Analysing 'O9YIMd' on '4WZ5NH' #> Analysing 'O9YIMd' on 'aL6STL' #> Analysing 'O9YIMd' on 'cG94vA' pQTLtools::pqtlMR(exposure, outcome, prefix=\"IL6R_rev-\",reverse=TRUE) #> Harmonising IL.6 (O9YIMd) and Rheumatoid arthritis (4WZ5NH) #> Harmonising IL.6 (O9YIMd) and Coronary artery disease (aL6STL) #> Harmonising IL.6 (O9YIMd) and Atopic dermatitis (cG94vA) #> Analysing '4WZ5NH' on 'O9YIMd' #> Analysing 'aL6STL' on 'O9YIMd' #> Analysing 'cG94vA' on 'O9YIMd' unlink(c(\"IL6R*\",\"pQTL-combined*\")) # Phenotype,SNP,effect_allele,other_allele,eaf,beta,se,pval # ABO,rs505922,C,T,0.313,1.298,0.014,1.2e-1828 # LIFR,rs635634,T,C,0.180,-0.300,0.032,6.00E-21 # f <- file.path(find.package(\"pQTLtools\",lib.loc=.libPaths()),\"tests\",\"ms.ins\") # exposure <- format_data(read.table(f, header=TRUE), samplesize_col=\"N\") # SNP Phenotype effect_allele other_allele eaf beta se pval N # rs1800693 TNFB T C 0.6033 0.0282  0.0136 0.0389045   11787 # rs2364485 TNFB A C 0.1645 6514963 0.1759 1.62181e-20 11344 # https://raw.githubusercontent.com/MRCIEU/epigraphdb-pqtl/master/scripts/MR-pQTL-script.R"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/protein_altering_variants.html","id":null,"dir":"Reference","previous_headings":"","what":"Protein-altering variants — protein_altering_variants","title":"Protein-altering variants — protein_altering_variants","text":"Variants directly affect coding sequence protein produced.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/protein_altering_variants.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Protein-altering variants — protein_altering_variants","text":"","code":"protein_altering_variants"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/protein_altering_variants.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Protein-altering variants — protein_altering_variants","text":"vector consequences.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/protein_altering_variants.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Protein-altering variants — protein_altering_variants","text":"","code":"protein_altering_variants #>  [1] \"coding_sequence_variant\"                                       #>  [2] \"frameshift_variant\"                                            #>  [3] \"frameshift_variant,NMD_transcript_variant\"                     #>  [4] \"frameshift_variant,splice_donor_region_variant\"                #>  [5] \"frameshift_variant,splice_region_variant\"                      #>  [6] \"frameshift_variant,splice_region_variant,intron_variant\"       #>  [7] \"frameshift_variant,start_lost,start_retained_variant\"          #>  [8] \"frameshift_variant,stop_lost\"                                  #>  [9] \"frameshift_variant,stop_retained_variant\"                      #> [10] \"incomplete_terminal_codon_variant,coding_sequence_variant\"     #> [11] \"inframe_insertion\"                                             #> [12] \"inframe_insertion,NMD_transcript_variant\"                      #> [13] \"inframe_insertion,splice_region_variant\"                       #> [14] \"inframe_insertion,stop_retained_variant\"                       #> [15] \"missense_variant\"                                              #> [16] \"missense_variant,NMD_transcript_variant\"                       #> [17] \"missense_variant,splice_donor_region_variant\"                  #> [18] \"missense_variant,splice_region_variant\"                        #> [19] \"missense_variant,splice_region_variant,NMD_transcript_variant\" #> [20] \"missense_variant,stop_retained_variant\"                        #> [21] \"protein_altering_variant\"                                      #> [22] \"stop_gained\"                                                   #> [23] \"stop_gained,frameshift_variant\"                                #> [24] \"stop_gained,frameshift_variant,splice_region_variant\"          #> [25] \"stop_gained,inframe_insertion\"                                 #> [26] \"stop_gained,NMD_transcript_variant\"                            #> [27] \"stop_gained,splice_region_variant\"                             #> [28] \"start_lost\"                                                    #> [29] \"start_lost,splice_region_variant\"                              #> [30] \"start_lost,start_retained_variant\"                             #> [31] \"stop_lost\"                                                     #> [32] \"stop_lost,splice_region_variant\"                               #> [33] \"stop_retained_variant\""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/qtl_lookup.html","id":null,"dir":"Reference","previous_headings":"","what":"QTL lookup — qtl_lookup","title":"QTL lookup — qtl_lookup","text":"function takes MR results (involving pQTL/QTL) look QTLs trait GWASs given P value linkage disequilibrium (LD) cutoffs. rationale pQTL may necessarily strong LD QTL independent signal region. interest lands association signals given P value (p_threshold) given LD (r2_threshold) thresholds.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/qtl_lookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QTL lookup — qtl_lookup","text":"","code":"qtl_lookup(   d,   dat,   panel = \"1000Genomes\",   p_threshold = 0.001,   r2_threshold = 0.8,   pop = \"EUR\",   plink_bin = NULL,   r = NULL,   r2 = NULL,   xlsx = NULL )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/qtl_lookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QTL lookup — qtl_lookup","text":"d directory dat () held. dat MR results (protein, id, pqtl,p, qtl, p_qtl) whose proxy, p_proxy rsq variables updated. panel reference panel. p_threshold cutoff QTL association trait GWASs. r2_threshold cutoff r^2. pop reference population 1000Genomes LD calculation. plink_bin PLINK executable file whose binary files indicated bfile variable dat. r specified, LD(r) output. r2 specified, LD(r^2) output. xlsx non-null specification indicates name output Excel workbook.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/qtl_lookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QTL lookup — qtl_lookup","text":"data.frame containing looked loci.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/qtl_lookup.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QTL lookup — qtl_lookup","text":"","code":"if (FALSE) { # \\dontrun{ INF <- Sys.getenv(\"INF\") suppressMessages(library(dplyr)) d <- file.path(INF,\"mr\",\"gsmr\",\"trait\") inf1 <- select(gap.datasets::inf1,prot,target.short) gsmr_efo <- read.delim(file.path(INF,\"mr\",\"gsmr\",\"gsmr-efo.txt\")) %>%             left_join(inf1,by=c('protein'='target.short')) %>%             mutate(file_gwas=paste(prot,id,\"rsid.txt\",sep=\"-\"),                    bfile=file.path(INF,\"INTERVAL\",\"per_chr\",                                    paste0(\"interval.imputed.olink.chr_\",chr)),                    proxy=NA,p_proxy=NA,rsq=NA) proxies <- qtl_lookup(d,gsmr_efo,plink_bin=\"/rds/user/jhz22/hpc-work/bin/plink\",                       xlsx=file.path(INF,\"mr\",\"gsmr\",\"r2_INTERVAL.xlsx\")) %>%            select(protein,id,Disease,fdr,pqtl,p,qtl,p_qtl,proxy,p_proxy,rsq) write.table(proxies,file=file.path(INF,\"mr\",\"gsmr\",\"r2_INTERVAL.tsv\"),             row.names=FALSE,quote=FALSE,sep=\"\\t\") } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":null,"dir":"Reference","previous_headings":"","what":"phenoscanner regionqueries in batches — regionqueries","title":"phenoscanner regionqueries in batches — regionqueries","text":"R/phenoscanner allows certain number items supplied. simple function return large number calls batches well generating SNPIDs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phenoscanner regionqueries in batches — regionqueries","text":"","code":"regionqueries(   regionlist,   catalogue = \"pQTL\",   proxies = \"EUR\",   p = 5e-08,   r2 = 0.8,   build = 37,   wait = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phenoscanner regionqueries in batches — regionqueries","text":"regionlist list SNPs catalogue \"None\",\"eQTL\",\"mQTL\",\"methQTL\",\"pQTL\",\"GWAS\". proxies \"None\", \"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\". p p value threshold. r2 r2 LD. build 37, 38. wait flag wait 1hr every 50 regions.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phenoscanner regionqueries in batches — regionqueries","text":"returned value list containing tiles, regions results.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"phenoscanner regionqueries in batches — regionqueries","text":"Batches generated queries combined one.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"phenoscanner regionqueries in batches — regionqueries","text":"adapted custom codings","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/regionqueries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phenoscanner regionqueries in batches — regionqueries","text":"","code":"if (FALSE) { # \\dontrun{ # single region regionqueries(\"chr17:26691290-26700110\")  # SCALLOP -- SomaLogic lookup from PhenoScanner INF <- Sys.getenv(\"INF\") INF1_merge <- merge(gap.datasets::inf1,                     read.delim(file.path(INF,\"work\",\"INF1.merge-rsid\"),as.is=TRUE),                     by=\"prot\") INF1_merge_uniprot <- with(INF1_merge,unique(uniprot)) SomaLogic_INF1_merge <- subset(SomaLogic160410,UniProt %in% INF1_merge_uniprot) regions <- subset(INF1_merge,uniprot %in% with(SomaLogic_INF1_merge,UniProt)) singletons <- with(regions, Start-End<=2) flank <- 5e+2 regions[singletons,\"Start\"] <- regions[singletons,\"Start\"] - flank regions[singletons,\"End\"] <- regions[singletons,\"End\"] + flank reset <- with(regions,Start < 0) regions[reset,\"Start\"] <- 0 r <- regionqueries(with(regions,paste0(Chrom,\":\",Start,\"-\",End))) save(r,file=\"INF1_merge.rda\",compress='xz') r2 <- with(r, {  region_ext <- cbind(tiles,regions)  results_ext <- merge(region_ext,results,by=\"region\")  ord <- with(results_ext,order(group))  results_ext[ord,] }) results <- subset(r2,pmid==\"29875488\") grp <- names(table(with(results,group))) sink(\"INF1_merge.txt\") for(g in as.numeric(grp)) {   uniprot <- regions[g,\"uniprot\"]   SNP <- regions[g,\"SNP\"]   print(regions[g,])   s <- subset(results,group==g&rsid==SNP)   vars <- c(\"region\",\"group\",\"rsid\",\"hg19_coordinates\",\"hgnc\",\"beta\",\"se\",\"p\",\"snpid\")    if(nrow(s)>1) print(s[vars]) } sink() } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic TwoSampleMR analysis — run_TwoSampleMR","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"Given harmonised data, function conducts two-sample MR analysis.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"","code":"run_TwoSampleMR(TwoSampleMRinput, mr_plot = \"None\", prefix = \"\")"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"TwoSampleMRinput Harmonised data. mr_plot one \"None\", \"TwoSampleMR\", \"pQTLtools\" , original revised plots, respectively. prefix prefix output files.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"value returned several files.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"TwoSampleMR faces seemingly perplexing options, function intends simplify various steps two-sample MR Dimou Tsilidis (2018) . particularly useful large numbher MRs necessary, e.g., multiple proteins cis/trans regions need examined, case prefix direct output various directories. Check authentication token example fails run.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"Dimou NL, Tsilidis KK (2018). “Primer Mendelian Randomization Methodology Focus Utilizing Published Summary Association Data.” Evangelou E (ed.), Genetic Epidemiology: Methods Protocols, chapter 13, 211–230. Springer New York, New York, NY. ISBN 978-1-4939-7868-7, doi:10.1007/978-1-4939-7868-7_13 .","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_TwoSampleMR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Basic TwoSampleMR analysis — run_TwoSampleMR","text":"","code":"suppressMessages(require(dplyr)) prot <- \"MMP.10\" type <- \"cis\" f <- paste0(prot,\"-\",type,\".mrx\") d <- read.table(file.path(find.package(\"pQTLtools\",lib.loc=.libPaths()),\"tests\",f),                 header=TRUE) exposure <- TwoSampleMR::format_data(within(d,{P=10^logP}), phenotype_col=\"prot\", snp_col=\"rsid\",                                      chr_col=\"Chromosome\", pos_col=\"Posistion\",                                      effect_allele_col=\"Allele1\", other_allele_col=\"Allele2\",                                      eaf_col=\"Freq1\", beta_col=\"Effect\", se_col=\"StdErr\",                                      pval_col=\"P\", log_pval=FALSE,                                      samplesize_col=\"N\") clump <- exposure[sample(1:nrow(exposure),nrow(exposure)/80),] # TwoSampleMR::clump_data(exposure) # outcome <- TwoSampleMR::extract_outcome_data(snps=exposure$SNP,outcomes=\"ebi-a-GCST007432\") outcome <- pQTLtools::import_OpenGWAS(\"ebi-a-GCST007432\",\"11:102090035-103364929\",\"gwasvcf\") %>%            as.data.frame() %>%            dplyr::mutate(outcome=\"FEV1\",LP=10^-LP) %>%            dplyr::select(ID,outcome,REF,ALT,AF,ES,SE,LP,SS,id) %>%            setNames(c(\"SNP\",\"outcome\",paste0(c(\"other_allele\",\"effect_allele\",\"eaf\",\"beta\",\"se\",                                                \"pval\",\"samplesize\",\"id\"),\".outcome\"))) #> [1] \"https://gwas.mrcieu.ac.uk/files/ebi-a-GCST007432/ebi-a-GCST007432.vcf.gz\" unlink(\"ebi-a-GCST007432.vcf.gz.tbi\") harmonise <- TwoSampleMR::harmonise_data(clump,outcome) #> Harmonising MMP.10 (er44c0) and FEV1 (ebi-a-GCST007432) prefix <- paste(prot,type,sep=\"-\") pQTLtools::run_TwoSampleMR(harmonise, mr_plot=\"pQTLtools\", prefix=prefix) #> Analysing 'er44c0' on 'ebi-a-GCST007432'  #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_errorbarh()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`).   #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_errorbarh()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`).  caption <- \"Table. MMP.10 variants and FEV1\" knitr::kable(read.delim(paste0(prefix,\"-result.txt\"),header=TRUE),              caption=paste(caption, \"(result)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (result) #>  #> |id.exposure |id.outcome       |outcome |exposure |method                    | nsnp|        b|      se|    pval| #> |:-----------|:----------------|:-------|:--------|:-------------------------|----:|--------:|-------:|-------:| #> |er44c0      |ebi-a-GCST007432 |FEV1    |MMP.10   |MR Egger                  |   10|  0.00526| 0.01677| 0.76191| #> |er44c0      |ebi-a-GCST007432 |FEV1    |MMP.10   |Weighted median           |   10| -0.01824| 0.01083| 0.09214| #> |er44c0      |ebi-a-GCST007432 |FEV1    |MMP.10   |Inverse variance weighted |   10| -0.02234| 0.00777| 0.00404| #> |er44c0      |ebi-a-GCST007432 |FEV1    |MMP.10   |Simple mode               |   10| -0.05425| 0.01646| 0.00929| #> |er44c0      |ebi-a-GCST007432 |FEV1    |MMP.10   |Weighted mode             |   10| -0.01338| 0.01226| 0.30366| knitr::kable(read.delim(paste0(prefix,\"-heterogeneity.txt\"),header=TRUE),              caption=paste(caption,\"(heterogeneity)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (heterogeneity) #>  #> |id.exposure |id.outcome       |outcome |exposure |method                    |    Q| Q_df| Q_pval| #> |:-----------|:----------------|:-------|:--------|:-------------------------|----:|----:|------:| #> |er44c0      |ebi-a-GCST007432 |FEV1    |MMP.10   |MR Egger                  | 4.94|    8|  0.764| #> |er44c0      |ebi-a-GCST007432 |FEV1    |MMP.10   |Inverse variance weighted | 8.39|    9|  0.496| knitr::kable(read.delim(paste0(prefix,\"-pleiotropy.txt\"),header=TRUE),              caption=paste(caption,\"(pleiotropy)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (pleiotropy) #>  #> |id.exposure |id.outcome       |outcome |exposure | egger_intercept|      se| pval| #> |:-----------|:----------------|:-------|:--------|---------------:|-------:|----:| #> |er44c0      |ebi-a-GCST007432 |FEV1    |MMP.10   |        -0.00368| 0.00198|  0.1| knitr::kable(read.delim(paste0(prefix,\"-single.txt\"),header=TRUE),              caption=paste(caption,\"(single)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (single) #>  #> |exposure |outcome |id.exposure |id.outcome       | samplesize|SNP                             |        b|      se|       p| #> |:--------|:-------|:-----------|:----------------|----------:|:-------------------------------|--------:|-------:|-------:| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs11601744                      | -0.01770| 0.02056| 0.38918| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs140957819                     | -0.03994| 0.03391| 0.23889| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs2292733                       |  0.00228| 0.01901| 0.90448| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs2514414                       | -0.05914| 0.03226| 0.06675| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs484316                        | -0.05898| 0.03155| 0.06154| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs577850                        |  0.00870| 0.03285| 0.79124| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs608419                        | -0.06043| 0.03309| 0.06784| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs6590984                       | -0.01855| 0.01408| 0.18781| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs75524134                      |  0.00284| 0.03354| 0.93246| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs9735884                       | -0.05507| 0.03478| 0.11335| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|All - Inverse variance weighted | -0.02234| 0.00777| 0.00404| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|All - MR Egger                  |  0.00526| 0.01677| 0.76191| knitr::kable(read.delim(paste0(prefix,\"-loo.txt\"),header=TRUE),              caption=paste(caption,\"(loo)\")) #>  #>  #> Table: Table. MMP.10 variants and FEV1 (loo) #>  #> |exposure |outcome |id.exposure |id.outcome       | samplesize|SNP         |       b|      se|       p| #> |:--------|:-------|:-----------|:----------------|----------:|:-----------|-------:|-------:|-------:| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs11601744  | -0.0231| 0.00856| 0.00695| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs140957819 | -0.0214| 0.00803| 0.00783| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs2292733   | -0.0273| 0.00851| 0.00136| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs2514414   | -0.0201| 0.00801| 0.01217| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs484316    | -0.0200| 0.00802| 0.01273| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs577850    | -0.0242| 0.00800| 0.00250| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs608419    | -0.0201| 0.00799| 0.01185| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs6590984   | -0.0240| 0.00948| 0.01136| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs75524134  | -0.0238| 0.00799| 0.00292| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|rs9735884   | -0.0206| 0.00797| 0.00969| #> |MMP.10   |FEV1    |er44c0      |ebi-a-GCST007432 |     321047|All         | -0.0223| 0.00777| 0.00404| for (x in c(\"result\",\"heterogeneity\",\"pleiotropy\",\"single\",\"loo\"))     unlink(paste0(prefix,\"-\",x,\".txt\"))"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":null,"dir":"Reference","previous_headings":"","what":"Colocalisation analysis — run_coloc","title":"Colocalisation analysis — run_coloc","text":"function takes eQTL GWAS summary statistics colocalisation analysis.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Colocalisation analysis — run_coloc","text":"","code":"run_coloc(eqtl_sumstats, gwas_sumstats, harmonise = TRUE)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Colocalisation analysis — run_coloc","text":"eqtl_sumstats eQTL summary data. gwas_sumstats GWAS summary data. harmonise flag harmonise data.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/run_coloc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Colocalisation analysis — run_coloc","text":"Summary coloc.abf.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":null,"dir":"Reference","previous_headings":"","what":"phenoscanner snpqueries in batches — snpqueries","title":"phenoscanner snpqueries in batches — snpqueries","text":"R/phenoscanner allows certain number items supplied. simple function return large number calls batches well generating SNPIDs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"phenoscanner snpqueries in batches — snpqueries","text":"","code":"snpqueries(   snplist,   block_size = 100,   waiting_time = 60 * 60,   catalogue = \"pQTL\",   proxies = \"EUR\",   p = 5e-08,   r2 = 0.8,   build = 37,   wait = TRUE )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"phenoscanner snpqueries in batches — snpqueries","text":"snplist list SNPs. block_size size query block. waiting_time time (seconds) wait query blocks. catalogue \"None\",\"eQTL\",\"mQTL\",\"methQTL\",\"pQTL\",\"GWAS\". proxies \"None\", \"AFR\",\"AMR\",\"EAS\",\"EUR\",\"SAS\". p p value threshold. r2 r2 LD. build 37, 38. wait flag wait 1hr every 500 SNPs.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"phenoscanner snpqueries in batches — snpqueries","text":"returned value list containing snps results:","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"phenoscanner snpqueries in batches — snpqueries","text":"Batches generated queries combined one.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"phenoscanner snpqueries in batches — snpqueries","text":"adapted custom codings","code":""},{"path":[]},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/snpqueries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"phenoscanner snpqueries in batches — snpqueries","text":"","code":"if (FALSE) { # \\dontrun{  # single SNP  snpqueries(\"rs704\")  # SCALLOP/INF INF <- Sys.getenv(\"INF\") rsid <- scan(paste(INF,'work','INF1.merge.snp',sep='/'),\"\") r <- snpqueries(rsid,catalogue='pQTL',p=1e-11) INTERVAL_Olink <- subset(with(r,results),efo=='EFO_0004747' & pmid=='29875488') save(INTERVAL_Olink,file='INTERVAL_Olink.rda',compress='xz') # --- query intersect proteins --- # SomaLogic intersect SomaLogic_overlap_list <- subset(st4,UniProt %in% intersect_list) r <- snpqueries(SomaLogic_overlap_list[,6],catalogue='pQTL',p=1e-11) SomaLogic_overlap <- subset(with(r,results),efo=='EFO_0004747' & pmid=='29875488') save(SomaLogic_overlap_list,SomaLogic_overlap,file='SomaLogic_overlap.rda',compress='xz') SomaLogic_result <- merge(SomaLogic_overlap_list,SomaLogic_overlap,                           by.x=\"Sentinel.variant*\",by.y=\"snp\") # Olink intersect INF1_merge_rsid <- read.delim(paste(INF,\"work\",\"INF1.merge-rsid\",sep=\"/\")) INF1_merge_rsid_uniprot <- merge(INF1_merge_rsid,inf1,by=\"prot\") Olink_overlap_list <- subset(INF1_merge_rsid_uniprot,uniprot %in% intersect_list) r <- snpqueries(with(Olink_overlap_list,MarkerName),catalogue='pQTL',p=1e-11) Olink_overlap <- subset(with(r,results),efo=='EFO_0004747' & pmid=='29875488') save(Olink_overlap_list,Olink_overlap,file='Olink_overlap.rda',compress='xz') Olink_result <- merge(Olink_overlap_list,Olink_overlap,by.x=\"MarkerName\",by.y=\"snp\") } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/swap.html","id":null,"dir":"Reference","previous_headings":"","what":"FUNCTION_TITLE — swap","title":"FUNCTION_TITLE — swap","text":"FUNCTION_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/swap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FUNCTION_TITLE — swap","text":"","code":"swap(x, y)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/swap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FUNCTION_TITLE — swap","text":"x PARAM_DESCRIPTION y PARAM_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/swap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FUNCTION_TITLE — swap","text":"OUTPUT_DESCRIPTION","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboman.html","id":null,"dir":"Reference","previous_headings":"","what":"Manhattan plots — turboman","title":"Manhattan plots — turboman","text":"Manhattan plots","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboman.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manhattan plots — turboman","text":"","code":"turboman(   input_data_path,   custom_peak_annotation_file_path,   reference_file_path,   pvalue_sign,   plot_title,   vertical_resolution = 1800 )"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboman.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manhattan plots — turboman","text":"input_data_path Path input association data. custom_peak_annotation_file_path Path custom annotation variants. reference_file_path Path 'turboman_hg19_reference_data.rda' / 'turboman_hg19_reference_data.rda' reference file. pvalue_sign Significance threshold p-value. plot_title Plot title displayed top plot. vertical_resolution fixed number points (pixels) plotted vertically.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboman.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Manhattan plots — turboman","text":"Input association data file / input_data_path Define path input association data. input data needs file : Spaces field separators. One header line. Option . (extreme p-values present): 3 columns, chromosome, position, pvalue order, column names important. Option II. (extreme p-values present): 5 columns, chromosome, position, pvalue, beta, se order, column names important. Custom annotation file / custom_peak_annotation_file_path Define path custom annotation variants. input data needs file : Spaces / tabs field separators. One header line exact column names (order important). Columns: chromosome, position, label (e.g., gene name) / nearest_gene_name, cis/trans flag (optional). NB!: label given, variants automatically annotated Reference file / reference_file_path Define path 'turboman_hg19_reference_data.rda' / 'turboman_hg38_reference_data.rda' reference file contains LD block breaks Berisa Pickrell (2016)  gene coordinates used construct annotate Manhattan plot. available turboman directory installed package, e.g., file.path(find.package('pQTLtools'),'turboman','turboman_hg38_reference_data.rda'). Significance threshold p-value / pvalue_sign Define significance threshold. used Highlight signal peaks come significance threshold. Annotate nearest gene top signal peak. Draw horizontal reference line equal threshold. Title plot / plot_title Define title top plot. Number pixels vertical axis / vertical_resolution Define fixed number points (pixels) vertical axis.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboman.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Manhattan plots — turboman","text":"Berisa T, Pickrell JK (2016). “Approximately independent linkage disequilibrium blocks human populations.” Bioinformatics, 32(2), 283-285. doi:10.1093/bioinformatics/btv546 .","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboman.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Manhattan plots — turboman","text":"Arthur Gilly, Chris Finan, Bram Prins, see https://github.com/bpprins/turboman.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboman.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Manhattan plots — turboman","text":"","code":"if (FALSE) { # \\dontrun{ # Screen output require(gap.datasets) test <- mhtdata[c('chr','pos','p')] write.table(test,file='test.txt',row.names=FALSE,quote=FALSE) annotate <- subset(mhtdata[c('chr','start','gene','p')],p<5e-8 & gene!='') names(annotate) <- c('chromosome','position','nearest_gene_name','p') write.table(unique(annotate[,-4]),file='annotate.txt',row.names=FALSE,quote=FALSE) input_data_path <- 'test.txt' custom_peak_annotation_file_path <- 'annotate.txt' reference_file_path <- file.path(find.package('pQTLtools',lib.loc=.libPaths()[1]),   'turboman','turboman_hg19_reference_data.rda') pvalue_sign <- 5e-8 plot_title <- 'gap.datasets example' turboman(input_data_path, custom_peak_annotation_file_path,          reference_file_path, pvalue_sign, plot_title) # Figure shown on https://github.com/jinghuazhao/tests/tree/main/turboman png('IL12B.png',width=3600, height=3600, pointsize = 12, res=450) input_data_path <- 'IL.12B.txt.gz' custom_peak_annotation_file_path <- 'IL.12B.annotate' reference_file_path <-   file.path(find.package('pQTLtools'),'turboman','turboman_hg19_reference_data.rda') pvalue_sign <- 5e-8 plot_title <- 'IL12B' turboman(input_data_path, custom_peak_annotation_file_path,          reference_file_path, pvalue_sign, plot_title) dev.off() } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboqq.html","id":null,"dir":"Reference","previous_headings":"","what":"QQ plots — turboqq","title":"QQ plots — turboqq","text":"QQ plots","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboqq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QQ plots — turboqq","text":"","code":"turboqq(input_data_path, plot_title, plot_resolution = 1800)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboqq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QQ plots — turboqq","text":"input_data_path Path input association data. plot_title Plot title displayed top plot. plot_resolution fixed number points (pixels) plotted vertically horizontally.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboqq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QQ plots — turboqq","text":"direct return value. script generates QQ plots output.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboqq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"QQ plots — turboqq","text":"method uses kth order statistic sample n ..d. U(0,1) statistics Beta(k,n+1-k) distribution Quesenberry Hales (1980)  Coded  Weale M, Price T. https://sites.google.com/site/mikeweale/software Input association data file / input_data_path Define path input association data. input data needs file : Spaces field separators. One header line. Option . (extreme p-values present): 3 columns, chromosome, position, pvalue order, column names important. Option II. (extreme p-values present): 5 columns, chromosome, position, pvalue, beta, se order, column names important. Plot title / plot_title Define plot title displayed top plot. Resolution plot / plot_resolution Define fixed number points (pixels) plotted vertically horizontally.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboqq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"QQ plots — turboqq","text":"Quesenberry CP, Hales C (1980). “Concentration bands uniformity plots.” J Statist Comput Simul, 11(1), 41-53. doi:10.1080/00949658008810388 .","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboqq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"QQ plots — turboqq","text":"Bram Prins, https://github.com/bpprins/turboqq.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/turboqq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QQ plots — turboqq","text":"","code":"if (FALSE) { # \\dontrun{ png('test_qq.png', height = 1800, width = 1800, pointsize = 12, res = 450) par(mar = c(4, 4, 3, 1)) require(gap.datasets) test <- mhtdata[c('chr','pos','p')] write.table(test,file='test.txt',row.names=FALSE,quote=FALSE) input_data_path <- 'test.txt' plot_title <- 'gap.datasets example' turboqq(input_data_path, plot_title) dev.off() } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":null,"dir":"Reference","previous_headings":"","what":"UniProt IDs to others — uniprot2ids","title":"UniProt IDs to others — uniprot2ids","text":"function converts UniProt IDs others.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"UniProt IDs to others — uniprot2ids","text":"","code":"uniprot2ids(uniprotid = \"ACC+ID\", to, query)"},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"UniProt IDs to others — uniprot2ids","text":"uniprotid Source IDs. IDs. query query.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"UniProt IDs to others — uniprot2ids","text":"UniProt-ID mapping","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"UniProt IDs to others — uniprot2ids","text":"function based Python3 script UniProt. See https://www.uniprot.org/help/api_idmapping","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"UniProt IDs to others — uniprot2ids","text":"Adapted script UniProt","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/reference/uniprot2ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"UniProt IDs to others — uniprot2ids","text":"","code":"if (FALSE) { # \\dontrun{ uniprotid <- \"ACC+ID\" to <- \"CHEMBL_ID\" query <- noquote(gap.datasets::inf1[[\"uniprot\"]]) query <- paste(query,collapse=\" \") r <- pQTLtools::uniprot2ids(uniprotid,to,query) cat(r,file=\"INF1.merge.chembl\") } # }"},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"pqtltools-05","dir":"Changelog","previous_headings":"","what":"pQTLtools 0.5","title":"pQTLtools 0.5","text":"(2025/3/24) Add single quotes package/software name. Add inst/scripts docs.sh cran.sh. Drop link GitHub repository _pkgdown.yml lot options(). Merge Bioconductor-related LocusZoom.js/SCALLOP-Caprion articles. Revise README.Rmd. Set fig.height/fig.width articles suggest Cairo CairoPNG. Suggests CAMERA, MSnbase, MSstats, mzR, protViz, rawrr, Spectra","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"pqtltools-04","dir":"Changelog","previous_headings":"","what":"pQTLtools 0.4","title":"pQTLtools 0.4","text":"(2025/3/7) Another pass R CMD check –-cran Revise articles esp. pQTLtools, esse, LocusZoom.js (including lz.html stack.html). Unify DESCRIPTION/README.md (finally). Add support MathJax mermaid. Add Caprion coloc scripts. Add SummarizedExperiment section es.Rmd –> esse.Rmd. Add csq(), protein_altering_variants (data/), histo.fyi, aria-label. Adopt new hg38 LD blocks turboman(). Add spectrum.Rmd. Renew call ldops novelty_check() accordance ieugwasr. Replace tests/ recent PROC results.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"pqtltools-03","dir":"Changelog","previous_headings":"","what":"pQTLtools 0.3","title":"pQTLtools 0.3","text":"(2024/05/26) Activate package logo GitHub repository. Dedicated .R files (blocks ) functions. Use scope operator clarification, e.g., ensembldb::genes(). Use OPENGWAS_JWT (.Renviron) https://api.opengwas.io/profile/. Suggest IlluminaHumanMethylation450kmanifest, OUTRIDER. Fix URL DESCRIPTION/snakemake.Rmd.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"pqtltools-02","dir":"Changelog","previous_headings":"","what":"pQTLtools 0.2","title":"pQTLtools 0.2","text":"(2024/04/24)","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"milestones-0-2","dir":"Changelog","previous_headings":"","what":"Milestones","title":"pQTLtools 0.2","text":"2023.12. Add LocusZoom.js article. 2023.05. Test data fully available medRxiv post SCALLOP paper. 2022.12. new package pQTLdata created hold panel meta data. 2022.06. passes CRAN checks warning. 2021.02. web-driven documentation now available, https://jinghuazhao.github.io/pQTLtools/.","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"package-0-2","dir":"Changelog","previous_headings":"","what":"Package","title":"pQTLtools 0.2","text":"information mirrors package DESCRIPTION, Depends R (>=3.5.0), pQTLdata. Import dplyr, gap, ggplot2, Rdpack. importFrom utils read.table tail. Import lmm template, use save(compress=‘xz’). Replace ChangeLog NEWS.md. LICENSE.md README.md. Reduce size sed -'/ISSN/d' REFERENCES.bib. Suggest Biobase, BioStrings, GenomeInfoDb, GenomicRanges, IRanges, VariantAnnotation. Suggest Roxygen2. Suggest biomaRt, bookdown, circlize, cowplot. Suggest gap.datasets, gwasvcf, htmlwidgets, httr, ieugwasr. Suggest knitr, mclust, meta. Suggest openxlsx, plotly, plyr. Suggest regione, rgl, rmarkdown, rtracklayer. Suggest scatterplot3d, seqminer, stringr. GitHub action inst/Bioconductor/. inst/STRING/change_STRING_colors.py. inst/UniProt|PPI/README.md. inst/snakemake pQTLtools.Rmd, bioconductor.Rmd, es.Rmd, LocusZoom.js.Rmd, snakemake.Rmd SCALLOP-INF.Rmd articles. List publications pQTLs Sun et al. (2018) Suhre et al. (2020).","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"functions-0-2","dir":"Changelog","previous_headings":"","what":"Functions","title":"pQTLtools 0.2","text":"list particular order, peptideMapping(), peptideAssociationPlot(). make_ExpressionSet(), novelty_check(), qtl_lookup(), turboman(), turboqq(). Reflow turboman.r/[partial]turboqq.r formatR::tidy_source(). pqtlMR(), run_TwoSampleMR(). run_coloc(). import_OpenGWAS() import_eQTLCatalogue(). genequries(), regionqueries(), snpqueries(). uniprot2ids().","code":""},{"path":"https://jinghuazhao.github.io/pQTLtools/news/index.html","id":"pqtltools-01","dir":"Changelog","previous_headings":"","what":"pQTLtools 0.1","title":"pQTLtools 0.1","text":"First release","code":""}]
